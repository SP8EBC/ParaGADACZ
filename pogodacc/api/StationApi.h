/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * StationApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_StationApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_StationApi_H_


#include "../ApiClient.h"

#include "AvailableParametersModel.h"
#include "StationCurrentLocalTime.h"
#include "StationDataModel.h"
#include "Summary.h"
#include "Trend.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  StationApi 
{
public:

    explicit StationApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~StationApi();

    /// <summary>
    /// Get all parameters measured by station
    /// </summary>
    /// <remarks>
    /// ...
    /// </remarks>
    /// <param name="stationName"></param>
    pplx::task<std::shared_ptr<AvailableParametersModel>> stationStationNameAvailableParametersGet(
        utility::string_t stationName
    ) const;
    /// <summary>
    /// Get last data measured by station
    /// </summary>
    /// <remarks>
    /// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
    /// </remarks>
    /// <param name="stationName"></param>
    /// <param name="ascendingOrder">Set to true to change sorting order to older-first</param>
    /// <param name="isLong">Set to true to get last 2000 records instead of 50</param>
    pplx::task<std::vector<std::shared_ptr<StationDataModel>>> stationStationNameLastStationDataGet(
        utility::string_t stationName,
        int64_t ascendingOrder,
        int64_t isLong
    ) const;
    /// <summary>
    /// Returns current local RTC time for a station
    /// </summary>
    /// <remarks>
    /// Used mainly to synchronize RTC clock in ParaMETEO
    /// </remarks>
    /// <param name="stationName"></param>
    pplx::task<std::shared_ptr<StationCurrentLocalTime>> stationStationNameStationCurrentLocalTimeGet(
        utility::string_t stationName
    ) const;
    /// <summary>
    /// Get measurements data for specified period
    /// </summary>
    /// <remarks>
    /// This endpoint returns all measurements done between two specified timestamps. Maximum time period is limited to 7 days at once!!
    /// </remarks>
    /// <param name="stationName"></param>
    /// <param name="from">Timestamp in UNIX epoch format (UTC)</param>
    /// <param name="to">Timestamp in UNIX epoch format (UTC)</param>
    pplx::task<std::vector<std::shared_ptr<StationDataModel>>> stationStationNameStationDataGet(
        utility::string_t stationName,
        int64_t from,
        int64_t to
    ) const;
    /// <summary>
    /// Returns measurement summary for station
    /// </summary>
    /// <remarks>
    /// Summary
    /// </remarks>
    /// <param name="stationName"></param>
    pplx::task<std::shared_ptr<Summary>> stationStationNameSummaryGet(
        utility::string_t stationName
    ) const;
    /// <summary>
    /// Returns trend of measurement changes
    /// </summary>
    /// <remarks>
    /// Summary
    /// </remarks>
    /// <param name="stationName"></param>
    pplx::task<std::shared_ptr<Trend>> stationStationNameTrendGet(
        utility::string_t stationName
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_StationApi_H_ */

