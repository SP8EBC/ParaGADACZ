/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "LocaleEntry.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




LocaleEntry::LocaleEntry()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_StationGroupId = 0;
    m_StationGroupIdIsSet = false;
    m_Language = utility::conversions::to_string_t("");
    m_LanguageIsSet = false;
    m_Text = utility::conversions::to_string_t("");
    m_TextIsSet = false;
}

LocaleEntry::~LocaleEntry()
{
}

void LocaleEntry::validate()
{
    // TODO: implement validation
}

web::json::value LocaleEntry::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_StationGroupIdIsSet)
    {
        val[utility::conversions::to_string_t("stationGroupId")] = ModelBase::toJson(m_StationGroupId);
    }
    if(m_LanguageIsSet)
    {
        val[utility::conversions::to_string_t("language")] = ModelBase::toJson(m_Language);
    }
    if(m_TextIsSet)
    {
        val[utility::conversions::to_string_t("text")] = ModelBase::toJson(m_Text);
    }

    return val;
}

bool LocaleEntry::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stationGroupId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stationGroupId"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_stationGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_stationGroupId);
            setStationGroupId(refVal_stationGroupId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("language")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("language"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_language;
            ok &= ModelBase::fromJson(fieldValue, refVal_language);
            setLanguage(refVal_language);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("text")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("text"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_text;
            ok &= ModelBase::fromJson(fieldValue, refVal_text);
            setText(refVal_text);
        }
    }
    return ok;
}

void LocaleEntry::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_StationGroupIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stationGroupId"), m_StationGroupId));
    }
    if(m_LanguageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("language"), m_Language));
    }
    if(m_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("text"), m_Text));
    }
}

bool LocaleEntry::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stationGroupId")))
    {
        int32_t refVal_stationGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stationGroupId")), refVal_stationGroupId );
        setStationGroupId(refVal_stationGroupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("language")))
    {
        utility::string_t refVal_language;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("language")), refVal_language );
        setLanguage(refVal_language);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("text")))
    {
        utility::string_t refVal_text;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("text")), refVal_text );
        setText(refVal_text);
    }
    return ok;
}

int32_t LocaleEntry::getId() const
{
    return m_Id;
}

void LocaleEntry::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool LocaleEntry::idIsSet() const
{
    return m_IdIsSet;
}

void LocaleEntry::unsetId()
{
    m_IdIsSet = false;
}
int32_t LocaleEntry::getStationGroupId() const
{
    return m_StationGroupId;
}

void LocaleEntry::setStationGroupId(int32_t value)
{
    m_StationGroupId = value;
    m_StationGroupIdIsSet = true;
}

bool LocaleEntry::stationGroupIdIsSet() const
{
    return m_StationGroupIdIsSet;
}

void LocaleEntry::unsetStationGroupId()
{
    m_StationGroupIdIsSet = false;
}
utility::string_t LocaleEntry::getLanguage() const
{
    return m_Language;
}

void LocaleEntry::setLanguage(const utility::string_t& value)
{
    m_Language = value;
    m_LanguageIsSet = true;
}

bool LocaleEntry::languageIsSet() const
{
    return m_LanguageIsSet;
}

void LocaleEntry::unsetLanguage()
{
    m_LanguageIsSet = false;
}
utility::string_t LocaleEntry::getText() const
{
    return m_Text;
}

void LocaleEntry::setText(const utility::string_t& value)
{
    m_Text = value;
    m_TextIsSet = true;
}

bool LocaleEntry::textIsSet() const
{
    return m_TextIsSet;
}

void LocaleEntry::unsetText()
{
    m_TextIsSet = false;
}
}
}
}
}


