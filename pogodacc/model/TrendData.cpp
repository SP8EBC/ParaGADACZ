/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TrendData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




TrendData::TrendData()
{
    m_Curent_value = 0.0f;
    m_Curent_valueIsSet = false;
    m_Two_hours_value = 0.0f;
    m_Two_hours_valueIsSet = false;
    m_Four_hours_value = 0.0f;
    m_Four_hours_valueIsSet = false;
    m_Six_hours_value = 0.0f;
    m_Six_hours_valueIsSet = false;
    m_Eight_hours_value = 0.0f;
    m_Eight_hours_valueIsSet = false;
}

TrendData::~TrendData()
{
}

void TrendData::validate()
{
    // TODO: implement validation
}

web::json::value TrendData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Curent_valueIsSet)
    {
        val[utility::conversions::to_string_t("curent_value")] = ModelBase::toJson(m_Curent_value);
    }
    if(m_Two_hours_valueIsSet)
    {
        val[utility::conversions::to_string_t("two_hours_value")] = ModelBase::toJson(m_Two_hours_value);
    }
    if(m_Four_hours_valueIsSet)
    {
        val[utility::conversions::to_string_t("four_hours_value")] = ModelBase::toJson(m_Four_hours_value);
    }
    if(m_Six_hours_valueIsSet)
    {
        val[utility::conversions::to_string_t("six_hours_value")] = ModelBase::toJson(m_Six_hours_value);
    }
    if(m_Eight_hours_valueIsSet)
    {
        val[utility::conversions::to_string_t("eight_hours_value")] = ModelBase::toJson(m_Eight_hours_value);
    }

    return val;
}

bool TrendData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("curent_value")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("curent_value"));
        if(!fieldValue.is_null())
        {
            float refVal_curent_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_curent_value);
            setCurentValue(refVal_curent_value);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("two_hours_value")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("two_hours_value"));
        if(!fieldValue.is_null())
        {
            float refVal_two_hours_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_two_hours_value);
            setTwoHoursValue(refVal_two_hours_value);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("four_hours_value")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("four_hours_value"));
        if(!fieldValue.is_null())
        {
            float refVal_four_hours_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_four_hours_value);
            setFourHoursValue(refVal_four_hours_value);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("six_hours_value")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("six_hours_value"));
        if(!fieldValue.is_null())
        {
            float refVal_six_hours_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_six_hours_value);
            setSixHoursValue(refVal_six_hours_value);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eight_hours_value")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("eight_hours_value"));
        if(!fieldValue.is_null())
        {
            float refVal_eight_hours_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_eight_hours_value);
            setEightHoursValue(refVal_eight_hours_value);
        }
    }
    return ok;
}

void TrendData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Curent_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("curent_value"), m_Curent_value));
    }
    if(m_Two_hours_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("two_hours_value"), m_Two_hours_value));
    }
    if(m_Four_hours_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("four_hours_value"), m_Four_hours_value));
    }
    if(m_Six_hours_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("six_hours_value"), m_Six_hours_value));
    }
    if(m_Eight_hours_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("eight_hours_value"), m_Eight_hours_value));
    }
}

bool TrendData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("curent_value")))
    {
        float refVal_curent_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("curent_value")), refVal_curent_value );
        setCurentValue(refVal_curent_value);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("two_hours_value")))
    {
        float refVal_two_hours_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("two_hours_value")), refVal_two_hours_value );
        setTwoHoursValue(refVal_two_hours_value);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("four_hours_value")))
    {
        float refVal_four_hours_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("four_hours_value")), refVal_four_hours_value );
        setFourHoursValue(refVal_four_hours_value);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("six_hours_value")))
    {
        float refVal_six_hours_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("six_hours_value")), refVal_six_hours_value );
        setSixHoursValue(refVal_six_hours_value);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eight_hours_value")))
    {
        float refVal_eight_hours_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("eight_hours_value")), refVal_eight_hours_value );
        setEightHoursValue(refVal_eight_hours_value);
    }
    return ok;
}

float TrendData::getCurentValue() const
{
    return m_Curent_value;
}

void TrendData::setCurentValue(float value)
{
    m_Curent_value = value;
    m_Curent_valueIsSet = true;
}

bool TrendData::curentValueIsSet() const
{
    return m_Curent_valueIsSet;
}

void TrendData::unsetCurent_value()
{
    m_Curent_valueIsSet = false;
}
float TrendData::getTwoHoursValue() const
{
    return m_Two_hours_value;
}

void TrendData::setTwoHoursValue(float value)
{
    m_Two_hours_value = value;
    m_Two_hours_valueIsSet = true;
}

bool TrendData::twoHoursValueIsSet() const
{
    return m_Two_hours_valueIsSet;
}

void TrendData::unsetTwo_hours_value()
{
    m_Two_hours_valueIsSet = false;
}
float TrendData::getFourHoursValue() const
{
    return m_Four_hours_value;
}

void TrendData::setFourHoursValue(float value)
{
    m_Four_hours_value = value;
    m_Four_hours_valueIsSet = true;
}

bool TrendData::fourHoursValueIsSet() const
{
    return m_Four_hours_valueIsSet;
}

void TrendData::unsetFour_hours_value()
{
    m_Four_hours_valueIsSet = false;
}
float TrendData::getSixHoursValue() const
{
    return m_Six_hours_value;
}

void TrendData::setSixHoursValue(float value)
{
    m_Six_hours_value = value;
    m_Six_hours_valueIsSet = true;
}

bool TrendData::sixHoursValueIsSet() const
{
    return m_Six_hours_valueIsSet;
}

void TrendData::unsetSix_hours_value()
{
    m_Six_hours_valueIsSet = false;
}
float TrendData::getEightHoursValue() const
{
    return m_Eight_hours_value;
}

void TrendData::setEightHoursValue(float value)
{
    m_Eight_hours_value = value;
    m_Eight_hours_valueIsSet = true;
}

bool TrendData::eightHoursValueIsSet() const
{
    return m_Eight_hours_valueIsSet;
}

void TrendData::unsetEight_hours_value()
{
    m_Eight_hours_valueIsSet = false;
}
}
}
}
}


