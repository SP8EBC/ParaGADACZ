/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StationsGroup.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




StationsGroup::StationsGroup()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Category = utility::conversions::to_string_t("");
    m_CategoryIsSet = false;
    m_LocaleIsSet = false;
    m_IsEnabled = false;
    m_IsEnabledIsSet = false;
    m_IsEmpty = false;
    m_IsEmptyIsSet = false;
    m_IsBuiltin = false;
    m_IsBuiltinIsSet = false;
}

StationsGroup::~StationsGroup()
{
}

void StationsGroup::validate()
{
    // TODO: implement validation
}

web::json::value StationsGroup::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_CategoryIsSet)
    {
        val[utility::conversions::to_string_t("category")] = ModelBase::toJson(m_Category);
    }
    if(m_LocaleIsSet)
    {
        val[utility::conversions::to_string_t("locale")] = ModelBase::toJson(m_Locale);
    }
    if(m_IsEnabledIsSet)
    {
        val[utility::conversions::to_string_t("isEnabled")] = ModelBase::toJson(m_IsEnabled);
    }
    if(m_IsEmptyIsSet)
    {
        val[utility::conversions::to_string_t("isEmpty")] = ModelBase::toJson(m_IsEmpty);
    }
    if(m_IsBuiltinIsSet)
    {
        val[utility::conversions::to_string_t("isBuiltin")] = ModelBase::toJson(m_IsBuiltin);
    }

    return val;
}

bool StationsGroup::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("category")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("category"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_category;
            ok &= ModelBase::fromJson(fieldValue, refVal_category);
            setCategory(refVal_category);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locale")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locale"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LocaleEntry>> refVal_locale;
            ok &= ModelBase::fromJson(fieldValue, refVal_locale);
            setLocale(refVal_locale);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isEnabled")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isEnabled"));
        if(!fieldValue.is_null())
        {
            bool refVal_isEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_isEnabled);
            setIsEnabled(refVal_isEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isEmpty")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isEmpty"));
        if(!fieldValue.is_null())
        {
            bool refVal_isEmpty;
            ok &= ModelBase::fromJson(fieldValue, refVal_isEmpty);
            setIsEmpty(refVal_isEmpty);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isBuiltin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isBuiltin"));
        if(!fieldValue.is_null())
        {
            bool refVal_isBuiltin;
            ok &= ModelBase::fromJson(fieldValue, refVal_isBuiltin);
            setIsBuiltin(refVal_isBuiltin);
        }
    }
    return ok;
}

void StationsGroup::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("category"), m_Category));
    }
    if(m_LocaleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locale"), m_Locale));
    }
    if(m_IsEnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEnabled"), m_IsEnabled));
    }
    if(m_IsEmptyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isEmpty"), m_IsEmpty));
    }
    if(m_IsBuiltinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isBuiltin"), m_IsBuiltin));
    }
}

bool StationsGroup::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("category")))
    {
        utility::string_t refVal_category;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("category")), refVal_category );
        setCategory(refVal_category);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locale")))
    {
        std::vector<std::shared_ptr<LocaleEntry>> refVal_locale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locale")), refVal_locale );
        setLocale(refVal_locale);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isEnabled")))
    {
        bool refVal_isEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEnabled")), refVal_isEnabled );
        setIsEnabled(refVal_isEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isEmpty")))
    {
        bool refVal_isEmpty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isEmpty")), refVal_isEmpty );
        setIsEmpty(refVal_isEmpty);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isBuiltin")))
    {
        bool refVal_isBuiltin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isBuiltin")), refVal_isBuiltin );
        setIsBuiltin(refVal_isBuiltin);
    }
    return ok;
}

int32_t StationsGroup::getId() const
{
    return m_Id;
}

void StationsGroup::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool StationsGroup::idIsSet() const
{
    return m_IdIsSet;
}

void StationsGroup::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t StationsGroup::getCategory() const
{
    return m_Category;
}

void StationsGroup::setCategory(const utility::string_t& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}

bool StationsGroup::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void StationsGroup::unsetCategory()
{
    m_CategoryIsSet = false;
}
std::vector<std::shared_ptr<LocaleEntry>>& StationsGroup::getLocale()
{
    return m_Locale;
}

void StationsGroup::setLocale(const std::vector<std::shared_ptr<LocaleEntry>>& value)
{
    m_Locale = value;
    m_LocaleIsSet = true;
}

bool StationsGroup::localeIsSet() const
{
    return m_LocaleIsSet;
}

void StationsGroup::unsetLocale()
{
    m_LocaleIsSet = false;
}
bool StationsGroup::isIsEnabled() const
{
    return m_IsEnabled;
}

void StationsGroup::setIsEnabled(bool value)
{
    m_IsEnabled = value;
    m_IsEnabledIsSet = true;
}

bool StationsGroup::isEnabledIsSet() const
{
    return m_IsEnabledIsSet;
}

void StationsGroup::unsetIsEnabled()
{
    m_IsEnabledIsSet = false;
}
bool StationsGroup::isIsEmpty() const
{
    return m_IsEmpty;
}

void StationsGroup::setIsEmpty(bool value)
{
    m_IsEmpty = value;
    m_IsEmptyIsSet = true;
}

bool StationsGroup::isEmptyIsSet() const
{
    return m_IsEmptyIsSet;
}

void StationsGroup::unsetIsEmpty()
{
    m_IsEmptyIsSet = false;
}
bool StationsGroup::isIsBuiltin() const
{
    return m_IsBuiltin;
}

void StationsGroup::setIsBuiltin(bool value)
{
    m_IsBuiltin = value;
    m_IsBuiltinIsSet = true;
}

bool StationsGroup::isBuiltinIsSet() const
{
    return m_IsBuiltinIsSet;
}

void StationsGroup::unsetIsBuiltin()
{
    m_IsBuiltinIsSet = false;
}
}
}
}
}


