/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * StationCurrentLocalTime.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_StationCurrentLocalTime_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_StationCurrentLocalTime_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  StationCurrentLocalTime
    : public ModelBase
{
public:
    StationCurrentLocalTime();
    virtual ~StationCurrentLocalTime();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// StationCurrentLocalTime members

    /// <summary>
    /// 
    /// </summary>
    int32_t getYear() const;
    bool yearIsSet() const;
    void unsetYear();

    void setYear(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMonth() const;
    bool monthIsSet() const;
    void unsetMonth();

    void setMonth(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDay() const;
    bool dayIsSet() const;
    void unsetDay();

    void setDay(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getHour() const;
    bool hourIsSet() const;
    void unsetHour();

    void setHour(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMinute() const;
    bool minuteIsSet() const;
    void unsetMinute();

    void setMinute(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSecond() const;
    bool secondIsSet() const;
    void unsetSecond();

    void setSecond(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTimezone() const;
    bool timezoneIsSet() const;
    void unsetTimezone();

    void setTimezone(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTimezoneOffset() const;
    bool timezoneOffsetIsSet() const;
    void unsetTimezone_offset();

    void setTimezoneOffset(int32_t value);


protected:
    int32_t m_Year;
    bool m_YearIsSet;
    int32_t m_Month;
    bool m_MonthIsSet;
    int32_t m_Day;
    bool m_DayIsSet;
    int32_t m_Hour;
    bool m_HourIsSet;
    int32_t m_Minute;
    bool m_MinuteIsSet;
    int32_t m_Second;
    bool m_SecondIsSet;
    utility::string_t m_Timezone;
    bool m_TimezoneIsSet;
    int32_t m_Timezone_offset;
    bool m_Timezone_offsetIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_StationCurrentLocalTime_H_ */
