/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Status.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Status::Status()
{
    m_Backend_api_version_string = utility::conversions::to_string_t("");
    m_Backend_api_version_stringIsSet = false;
    m_Backend_api_main_version_number = 0;
    m_Backend_api_main_version_numberIsSet = false;
    m_Backend_api_patch_version_number = 0;
    m_Backend_api_patch_version_numberIsSet = false;
    m_Backend_api_build_version_number = 0;
    m_Backend_api_build_version_numberIsSet = false;
    m_Status = 0;
    m_StatusIsSet = false;
    m_Api_timestamp_epoch = 0L;
    m_Api_timestamp_epochIsSet = false;
    m_Api_tz_offset_string = utility::conversions::to_string_t("");
    m_Api_tz_offset_stringIsSet = false;
    m_Api_tz_offset_seconds = 0;
    m_Api_tz_offset_secondsIsSet = false;
    m_Api_timezone = utility::conversions::to_string_t("");
    m_Api_timezoneIsSet = false;
}

Status::~Status()
{
}

void Status::validate()
{
    // TODO: implement validation
}

web::json::value Status::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Backend_api_version_stringIsSet)
    {
        val[utility::conversions::to_string_t("backend_api_version_string")] = ModelBase::toJson(m_Backend_api_version_string);
    }
    if(m_Backend_api_main_version_numberIsSet)
    {
        val[utility::conversions::to_string_t("backend_api_main_version_number")] = ModelBase::toJson(m_Backend_api_main_version_number);
    }
    if(m_Backend_api_patch_version_numberIsSet)
    {
        val[utility::conversions::to_string_t("backend_api_patch_version_number")] = ModelBase::toJson(m_Backend_api_patch_version_number);
    }
    if(m_Backend_api_build_version_numberIsSet)
    {
        val[utility::conversions::to_string_t("backend_api_build_version_number")] = ModelBase::toJson(m_Backend_api_build_version_number);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_Api_timestamp_epochIsSet)
    {
        val[utility::conversions::to_string_t("api_timestamp_epoch")] = ModelBase::toJson(m_Api_timestamp_epoch);
    }
    if(m_Api_tz_offset_stringIsSet)
    {
        val[utility::conversions::to_string_t("api_tz_offset_string")] = ModelBase::toJson(m_Api_tz_offset_string);
    }
    if(m_Api_tz_offset_secondsIsSet)
    {
        val[utility::conversions::to_string_t("api_tz_offset_seconds")] = ModelBase::toJson(m_Api_tz_offset_seconds);
    }
    if(m_Api_timezoneIsSet)
    {
        val[utility::conversions::to_string_t("api_timezone")] = ModelBase::toJson(m_Api_timezone);
    }

    return val;
}

bool Status::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("backend_api_version_string")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("backend_api_version_string"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_backend_api_version_string;
            ok &= ModelBase::fromJson(fieldValue, refVal_backend_api_version_string);
            setBackendApiVersionString(refVal_backend_api_version_string);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("backend_api_main_version_number")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("backend_api_main_version_number"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_backend_api_main_version_number;
            ok &= ModelBase::fromJson(fieldValue, refVal_backend_api_main_version_number);
            setBackendApiMainVersionNumber(refVal_backend_api_main_version_number);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("backend_api_patch_version_number")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("backend_api_patch_version_number"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_backend_api_patch_version_number;
            ok &= ModelBase::fromJson(fieldValue, refVal_backend_api_patch_version_number);
            setBackendApiPatchVersionNumber(refVal_backend_api_patch_version_number);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("backend_api_build_version_number")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("backend_api_build_version_number"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_backend_api_build_version_number;
            ok &= ModelBase::fromJson(fieldValue, refVal_backend_api_build_version_number);
            setBackendApiBuildVersionNumber(refVal_backend_api_build_version_number);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("status"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("api_timestamp_epoch")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("api_timestamp_epoch"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_api_timestamp_epoch;
            ok &= ModelBase::fromJson(fieldValue, refVal_api_timestamp_epoch);
            setApiTimestampEpoch(refVal_api_timestamp_epoch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("api_tz_offset_string")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("api_tz_offset_string"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_api_tz_offset_string;
            ok &= ModelBase::fromJson(fieldValue, refVal_api_tz_offset_string);
            setApiTzOffsetString(refVal_api_tz_offset_string);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("api_tz_offset_seconds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("api_tz_offset_seconds"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_api_tz_offset_seconds;
            ok &= ModelBase::fromJson(fieldValue, refVal_api_tz_offset_seconds);
            setApiTzOffsetSeconds(refVal_api_tz_offset_seconds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("api_timezone")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("api_timezone"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_api_timezone;
            ok &= ModelBase::fromJson(fieldValue, refVal_api_timezone);
            setApiTimezone(refVal_api_timezone);
        }
    }
    return ok;
}

void Status::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Backend_api_version_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("backend_api_version_string"), m_Backend_api_version_string));
    }
    if(m_Backend_api_main_version_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("backend_api_main_version_number"), m_Backend_api_main_version_number));
    }
    if(m_Backend_api_patch_version_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("backend_api_patch_version_number"), m_Backend_api_patch_version_number));
    }
    if(m_Backend_api_build_version_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("backend_api_build_version_number"), m_Backend_api_build_version_number));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    }
    if(m_Api_timestamp_epochIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("api_timestamp_epoch"), m_Api_timestamp_epoch));
    }
    if(m_Api_tz_offset_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("api_tz_offset_string"), m_Api_tz_offset_string));
    }
    if(m_Api_tz_offset_secondsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("api_tz_offset_seconds"), m_Api_tz_offset_seconds));
    }
    if(m_Api_timezoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("api_timezone"), m_Api_timezone));
    }
}

bool Status::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("backend_api_version_string")))
    {
        utility::string_t refVal_backend_api_version_string;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("backend_api_version_string")), refVal_backend_api_version_string );
        setBackendApiVersionString(refVal_backend_api_version_string);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("backend_api_main_version_number")))
    {
        int32_t refVal_backend_api_main_version_number;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("backend_api_main_version_number")), refVal_backend_api_main_version_number );
        setBackendApiMainVersionNumber(refVal_backend_api_main_version_number);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("backend_api_patch_version_number")))
    {
        int32_t refVal_backend_api_patch_version_number;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("backend_api_patch_version_number")), refVal_backend_api_patch_version_number );
        setBackendApiPatchVersionNumber(refVal_backend_api_patch_version_number);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("backend_api_build_version_number")))
    {
        int32_t refVal_backend_api_build_version_number;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("backend_api_build_version_number")), refVal_backend_api_build_version_number );
        setBackendApiBuildVersionNumber(refVal_backend_api_build_version_number);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        int32_t refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("status")), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("api_timestamp_epoch")))
    {
        int64_t refVal_api_timestamp_epoch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("api_timestamp_epoch")), refVal_api_timestamp_epoch );
        setApiTimestampEpoch(refVal_api_timestamp_epoch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("api_tz_offset_string")))
    {
        utility::string_t refVal_api_tz_offset_string;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("api_tz_offset_string")), refVal_api_tz_offset_string );
        setApiTzOffsetString(refVal_api_tz_offset_string);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("api_tz_offset_seconds")))
    {
        int32_t refVal_api_tz_offset_seconds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("api_tz_offset_seconds")), refVal_api_tz_offset_seconds );
        setApiTzOffsetSeconds(refVal_api_tz_offset_seconds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("api_timezone")))
    {
        utility::string_t refVal_api_timezone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("api_timezone")), refVal_api_timezone );
        setApiTimezone(refVal_api_timezone);
    }
    return ok;
}

utility::string_t Status::getBackendApiVersionString() const
{
    return m_Backend_api_version_string;
}

void Status::setBackendApiVersionString(const utility::string_t& value)
{
    m_Backend_api_version_string = value;
    m_Backend_api_version_stringIsSet = true;
}

bool Status::backendApiVersionStringIsSet() const
{
    return m_Backend_api_version_stringIsSet;
}

void Status::unsetBackend_api_version_string()
{
    m_Backend_api_version_stringIsSet = false;
}
int32_t Status::getBackendApiMainVersionNumber() const
{
    return m_Backend_api_main_version_number;
}

void Status::setBackendApiMainVersionNumber(int32_t value)
{
    m_Backend_api_main_version_number = value;
    m_Backend_api_main_version_numberIsSet = true;
}

bool Status::backendApiMainVersionNumberIsSet() const
{
    return m_Backend_api_main_version_numberIsSet;
}

void Status::unsetBackend_api_main_version_number()
{
    m_Backend_api_main_version_numberIsSet = false;
}
int32_t Status::getBackendApiPatchVersionNumber() const
{
    return m_Backend_api_patch_version_number;
}

void Status::setBackendApiPatchVersionNumber(int32_t value)
{
    m_Backend_api_patch_version_number = value;
    m_Backend_api_patch_version_numberIsSet = true;
}

bool Status::backendApiPatchVersionNumberIsSet() const
{
    return m_Backend_api_patch_version_numberIsSet;
}

void Status::unsetBackend_api_patch_version_number()
{
    m_Backend_api_patch_version_numberIsSet = false;
}
int32_t Status::getBackendApiBuildVersionNumber() const
{
    return m_Backend_api_build_version_number;
}

void Status::setBackendApiBuildVersionNumber(int32_t value)
{
    m_Backend_api_build_version_number = value;
    m_Backend_api_build_version_numberIsSet = true;
}

bool Status::backendApiBuildVersionNumberIsSet() const
{
    return m_Backend_api_build_version_numberIsSet;
}

void Status::unsetBackend_api_build_version_number()
{
    m_Backend_api_build_version_numberIsSet = false;
}
int32_t Status::getStatus() const
{
    return m_Status;
}

void Status::setStatus(int32_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Status::statusIsSet() const
{
    return m_StatusIsSet;
}

void Status::unsetStatus()
{
    m_StatusIsSet = false;
}
int64_t Status::getApiTimestampEpoch() const
{
    return m_Api_timestamp_epoch;
}

void Status::setApiTimestampEpoch(int64_t value)
{
    m_Api_timestamp_epoch = value;
    m_Api_timestamp_epochIsSet = true;
}

bool Status::apiTimestampEpochIsSet() const
{
    return m_Api_timestamp_epochIsSet;
}

void Status::unsetApi_timestamp_epoch()
{
    m_Api_timestamp_epochIsSet = false;
}
utility::string_t Status::getApiTzOffsetString() const
{
    return m_Api_tz_offset_string;
}

void Status::setApiTzOffsetString(const utility::string_t& value)
{
    m_Api_tz_offset_string = value;
    m_Api_tz_offset_stringIsSet = true;
}

bool Status::apiTzOffsetStringIsSet() const
{
    return m_Api_tz_offset_stringIsSet;
}

void Status::unsetApi_tz_offset_string()
{
    m_Api_tz_offset_stringIsSet = false;
}
int32_t Status::getApiTzOffsetSeconds() const
{
    return m_Api_tz_offset_seconds;
}

void Status::setApiTzOffsetSeconds(int32_t value)
{
    m_Api_tz_offset_seconds = value;
    m_Api_tz_offset_secondsIsSet = true;
}

bool Status::apiTzOffsetSecondsIsSet() const
{
    return m_Api_tz_offset_secondsIsSet;
}

void Status::unsetApi_tz_offset_seconds()
{
    m_Api_tz_offset_secondsIsSet = false;
}
utility::string_t Status::getApiTimezone() const
{
    return m_Api_timezone;
}

void Status::setApiTimezone(const utility::string_t& value)
{
    m_Api_timezone = value;
    m_Api_timezoneIsSet = true;
}

bool Status::apiTimezoneIsSet() const
{
    return m_Api_timezoneIsSet;
}

void Status::unsetApi_timezone()
{
    m_Api_timezoneIsSet = false;
}
}
}
}
}


