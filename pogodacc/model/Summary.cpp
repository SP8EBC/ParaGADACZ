/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Summary.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Summary::Summary()
{
    m_Last_timestamp = 0L;
    m_Last_timestampIsSet = false;
    m_Number_of_measurements = 0;
    m_Number_of_measurementsIsSet = false;
    m_Avg_temperature = 0.0f;
    m_Avg_temperatureIsSet = false;
    m_Temperature_qfIsSet = false;
    m_Qnh = 0;
    m_QnhIsSet = false;
    m_Qnh_qfIsSet = false;
    m_Humidity = 0;
    m_HumidityIsSet = false;
    m_Humidity_qfIsSet = false;
    m_Direction = 0;
    m_DirectionIsSet = false;
    m_Average_speed = 0.0f;
    m_Average_speedIsSet = false;
    m_Gusts = 0.0f;
    m_GustsIsSet = false;
    m_Hour_gusts = 0.0f;
    m_Hour_gustsIsSet = false;
    m_Hour_max_average_speed = 0.0f;
    m_Hour_max_average_speedIsSet = false;
    m_Hour_min_average_speed = 0.0f;
    m_Hour_min_average_speedIsSet = false;
    m_Wind_qfIsSet = false;
}

Summary::~Summary()
{
}

void Summary::validate()
{
    // TODO: implement validation
}

web::json::value Summary::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Last_timestampIsSet)
    {
        val[utility::conversions::to_string_t("last_timestamp")] = ModelBase::toJson(m_Last_timestamp);
    }
    if(m_Number_of_measurementsIsSet)
    {
        val[utility::conversions::to_string_t("number_of_measurements")] = ModelBase::toJson(m_Number_of_measurements);
    }
    if(m_Avg_temperatureIsSet)
    {
        val[utility::conversions::to_string_t("avg_temperature")] = ModelBase::toJson(m_Avg_temperature);
    }
    if(m_Temperature_qfIsSet)
    {
        val[utility::conversions::to_string_t("temperature_qf")] = ModelBase::toJson(m_Temperature_qf);
    }
    if(m_QnhIsSet)
    {
        val[utility::conversions::to_string_t("qnh")] = ModelBase::toJson(m_Qnh);
    }
    if(m_Qnh_qfIsSet)
    {
        val[utility::conversions::to_string_t("qnh_qf")] = ModelBase::toJson(m_Qnh_qf);
    }
    if(m_HumidityIsSet)
    {
        val[utility::conversions::to_string_t("humidity")] = ModelBase::toJson(m_Humidity);
    }
    if(m_Humidity_qfIsSet)
    {
        val[utility::conversions::to_string_t("humidity_qf")] = ModelBase::toJson(m_Humidity_qf);
    }
    if(m_DirectionIsSet)
    {
        val[utility::conversions::to_string_t("direction")] = ModelBase::toJson(m_Direction);
    }
    if(m_Average_speedIsSet)
    {
        val[utility::conversions::to_string_t("average_speed")] = ModelBase::toJson(m_Average_speed);
    }
    if(m_GustsIsSet)
    {
        val[utility::conversions::to_string_t("gusts")] = ModelBase::toJson(m_Gusts);
    }
    if(m_Hour_gustsIsSet)
    {
        val[utility::conversions::to_string_t("hour_gusts")] = ModelBase::toJson(m_Hour_gusts);
    }
    if(m_Hour_max_average_speedIsSet)
    {
        val[utility::conversions::to_string_t("hour_max_average_speed")] = ModelBase::toJson(m_Hour_max_average_speed);
    }
    if(m_Hour_min_average_speedIsSet)
    {
        val[utility::conversions::to_string_t("hour_min_average_speed")] = ModelBase::toJson(m_Hour_min_average_speed);
    }
    if(m_Wind_qfIsSet)
    {
        val[utility::conversions::to_string_t("wind_qf")] = ModelBase::toJson(m_Wind_qf);
    }

    return val;
}

bool Summary::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("last_timestamp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("last_timestamp"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_last_timestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_last_timestamp);
            setLastTimestamp(refVal_last_timestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("number_of_measurements")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("number_of_measurements"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_number_of_measurements;
            ok &= ModelBase::fromJson(fieldValue, refVal_number_of_measurements);
            setNumberOfMeasurements(refVal_number_of_measurements);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avg_temperature")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("avg_temperature"));
        if(!fieldValue.is_null())
        {
            float refVal_avg_temperature;
            ok &= ModelBase::fromJson(fieldValue, refVal_avg_temperature);
            setAvgTemperature(refVal_avg_temperature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temperature_qf")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temperature_qf"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<QualityFactor> refVal_temperature_qf;
            ok &= ModelBase::fromJson(fieldValue, refVal_temperature_qf);
            setTemperatureQf(refVal_temperature_qf);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("qnh")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("qnh"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_qnh;
            ok &= ModelBase::fromJson(fieldValue, refVal_qnh);
            setQnh(refVal_qnh);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("qnh_qf")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("qnh_qf"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<QualityFactor> refVal_qnh_qf;
            ok &= ModelBase::fromJson(fieldValue, refVal_qnh_qf);
            setQnhQf(refVal_qnh_qf);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("humidity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("humidity"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_humidity;
            ok &= ModelBase::fromJson(fieldValue, refVal_humidity);
            setHumidity(refVal_humidity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("humidity_qf")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("humidity_qf"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<QualityFactor> refVal_humidity_qf;
            ok &= ModelBase::fromJson(fieldValue, refVal_humidity_qf);
            setHumidityQf(refVal_humidity_qf);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("direction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("direction"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_direction;
            ok &= ModelBase::fromJson(fieldValue, refVal_direction);
            setDirection(refVal_direction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("average_speed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("average_speed"));
        if(!fieldValue.is_null())
        {
            float refVal_average_speed;
            ok &= ModelBase::fromJson(fieldValue, refVal_average_speed);
            setAverageSpeed(refVal_average_speed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("gusts")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("gusts"));
        if(!fieldValue.is_null())
        {
            float refVal_gusts;
            ok &= ModelBase::fromJson(fieldValue, refVal_gusts);
            setGusts(refVal_gusts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hour_gusts")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hour_gusts"));
        if(!fieldValue.is_null())
        {
            float refVal_hour_gusts;
            ok &= ModelBase::fromJson(fieldValue, refVal_hour_gusts);
            setHourGusts(refVal_hour_gusts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hour_max_average_speed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hour_max_average_speed"));
        if(!fieldValue.is_null())
        {
            float refVal_hour_max_average_speed;
            ok &= ModelBase::fromJson(fieldValue, refVal_hour_max_average_speed);
            setHourMaxAverageSpeed(refVal_hour_max_average_speed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hour_min_average_speed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hour_min_average_speed"));
        if(!fieldValue.is_null())
        {
            float refVal_hour_min_average_speed;
            ok &= ModelBase::fromJson(fieldValue, refVal_hour_min_average_speed);
            setHourMinAverageSpeed(refVal_hour_min_average_speed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wind_qf")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wind_qf"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<QualityFactor> refVal_wind_qf;
            ok &= ModelBase::fromJson(fieldValue, refVal_wind_qf);
            setWindQf(refVal_wind_qf);
        }
    }
    return ok;
}

void Summary::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Last_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last_timestamp"), m_Last_timestamp));
    }
    if(m_Number_of_measurementsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("number_of_measurements"), m_Number_of_measurements));
    }
    if(m_Avg_temperatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avg_temperature"), m_Avg_temperature));
    }
    if(m_Temperature_qfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temperature_qf"), m_Temperature_qf));
    }
    if(m_QnhIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("qnh"), m_Qnh));
    }
    if(m_Qnh_qfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("qnh_qf"), m_Qnh_qf));
    }
    if(m_HumidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("humidity"), m_Humidity));
    }
    if(m_Humidity_qfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("humidity_qf"), m_Humidity_qf));
    }
    if(m_DirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("direction"), m_Direction));
    }
    if(m_Average_speedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("average_speed"), m_Average_speed));
    }
    if(m_GustsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("gusts"), m_Gusts));
    }
    if(m_Hour_gustsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hour_gusts"), m_Hour_gusts));
    }
    if(m_Hour_max_average_speedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hour_max_average_speed"), m_Hour_max_average_speed));
    }
    if(m_Hour_min_average_speedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hour_min_average_speed"), m_Hour_min_average_speed));
    }
    if(m_Wind_qfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wind_qf"), m_Wind_qf));
    }
}

bool Summary::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("last_timestamp")))
    {
        int64_t refVal_last_timestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("last_timestamp")), refVal_last_timestamp );
        setLastTimestamp(refVal_last_timestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("number_of_measurements")))
    {
        int32_t refVal_number_of_measurements;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("number_of_measurements")), refVal_number_of_measurements );
        setNumberOfMeasurements(refVal_number_of_measurements);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avg_temperature")))
    {
        float refVal_avg_temperature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("avg_temperature")), refVal_avg_temperature );
        setAvgTemperature(refVal_avg_temperature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temperature_qf")))
    {
        std::shared_ptr<QualityFactor> refVal_temperature_qf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temperature_qf")), refVal_temperature_qf );
        setTemperatureQf(refVal_temperature_qf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("qnh")))
    {
        int32_t refVal_qnh;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("qnh")), refVal_qnh );
        setQnh(refVal_qnh);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("qnh_qf")))
    {
        std::shared_ptr<QualityFactor> refVal_qnh_qf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("qnh_qf")), refVal_qnh_qf );
        setQnhQf(refVal_qnh_qf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("humidity")))
    {
        int32_t refVal_humidity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("humidity")), refVal_humidity );
        setHumidity(refVal_humidity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("humidity_qf")))
    {
        std::shared_ptr<QualityFactor> refVal_humidity_qf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("humidity_qf")), refVal_humidity_qf );
        setHumidityQf(refVal_humidity_qf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("direction")))
    {
        int32_t refVal_direction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("direction")), refVal_direction );
        setDirection(refVal_direction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("average_speed")))
    {
        float refVal_average_speed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("average_speed")), refVal_average_speed );
        setAverageSpeed(refVal_average_speed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("gusts")))
    {
        float refVal_gusts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("gusts")), refVal_gusts );
        setGusts(refVal_gusts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hour_gusts")))
    {
        float refVal_hour_gusts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hour_gusts")), refVal_hour_gusts );
        setHourGusts(refVal_hour_gusts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hour_max_average_speed")))
    {
        float refVal_hour_max_average_speed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hour_max_average_speed")), refVal_hour_max_average_speed );
        setHourMaxAverageSpeed(refVal_hour_max_average_speed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hour_min_average_speed")))
    {
        float refVal_hour_min_average_speed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hour_min_average_speed")), refVal_hour_min_average_speed );
        setHourMinAverageSpeed(refVal_hour_min_average_speed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wind_qf")))
    {
        std::shared_ptr<QualityFactor> refVal_wind_qf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wind_qf")), refVal_wind_qf );
        setWindQf(refVal_wind_qf);
    }
    return ok;
}

int64_t Summary::getLastTimestamp() const
{
    return m_Last_timestamp;
}

void Summary::setLastTimestamp(int64_t value)
{
    m_Last_timestamp = value;
    m_Last_timestampIsSet = true;
}

bool Summary::lastTimestampIsSet() const
{
    return m_Last_timestampIsSet;
}

void Summary::unsetLast_timestamp()
{
    m_Last_timestampIsSet = false;
}
int32_t Summary::getNumberOfMeasurements() const
{
    return m_Number_of_measurements;
}

void Summary::setNumberOfMeasurements(int32_t value)
{
    m_Number_of_measurements = value;
    m_Number_of_measurementsIsSet = true;
}

bool Summary::numberOfMeasurementsIsSet() const
{
    return m_Number_of_measurementsIsSet;
}

void Summary::unsetNumber_of_measurements()
{
    m_Number_of_measurementsIsSet = false;
}
float Summary::getAvgTemperature() const
{
    return m_Avg_temperature;
}

void Summary::setAvgTemperature(float value)
{
    m_Avg_temperature = value;
    m_Avg_temperatureIsSet = true;
}

bool Summary::avgTemperatureIsSet() const
{
    return m_Avg_temperatureIsSet;
}

void Summary::unsetAvg_temperature()
{
    m_Avg_temperatureIsSet = false;
}
std::shared_ptr<QualityFactor> Summary::getTemperatureQf() const
{
    return m_Temperature_qf;
}

void Summary::setTemperatureQf(const std::shared_ptr<QualityFactor>& value)
{
    m_Temperature_qf = value;
    m_Temperature_qfIsSet = true;
}

bool Summary::temperatureQfIsSet() const
{
    return m_Temperature_qfIsSet;
}

void Summary::unsetTemperature_qf()
{
    m_Temperature_qfIsSet = false;
}
int32_t Summary::getQnh() const
{
    return m_Qnh;
}

void Summary::setQnh(int32_t value)
{
    m_Qnh = value;
    m_QnhIsSet = true;
}

bool Summary::qnhIsSet() const
{
    return m_QnhIsSet;
}

void Summary::unsetQnh()
{
    m_QnhIsSet = false;
}
std::shared_ptr<QualityFactor> Summary::getQnhQf() const
{
    return m_Qnh_qf;
}

void Summary::setQnhQf(const std::shared_ptr<QualityFactor>& value)
{
    m_Qnh_qf = value;
    m_Qnh_qfIsSet = true;
}

bool Summary::qnhQfIsSet() const
{
    return m_Qnh_qfIsSet;
}

void Summary::unsetQnh_qf()
{
    m_Qnh_qfIsSet = false;
}
int32_t Summary::getHumidity() const
{
    return m_Humidity;
}

void Summary::setHumidity(int32_t value)
{
    m_Humidity = value;
    m_HumidityIsSet = true;
}

bool Summary::humidityIsSet() const
{
    return m_HumidityIsSet;
}

void Summary::unsetHumidity()
{
    m_HumidityIsSet = false;
}
std::shared_ptr<QualityFactor> Summary::getHumidityQf() const
{
    return m_Humidity_qf;
}

void Summary::setHumidityQf(const std::shared_ptr<QualityFactor>& value)
{
    m_Humidity_qf = value;
    m_Humidity_qfIsSet = true;
}

bool Summary::humidityQfIsSet() const
{
    return m_Humidity_qfIsSet;
}

void Summary::unsetHumidity_qf()
{
    m_Humidity_qfIsSet = false;
}
int32_t Summary::getDirection() const
{
    return m_Direction;
}

void Summary::setDirection(int32_t value)
{
    m_Direction = value;
    m_DirectionIsSet = true;
}

bool Summary::directionIsSet() const
{
    return m_DirectionIsSet;
}

void Summary::unsetDirection()
{
    m_DirectionIsSet = false;
}
float Summary::getAverageSpeed() const
{
    return m_Average_speed;
}

void Summary::setAverageSpeed(float value)
{
    m_Average_speed = value;
    m_Average_speedIsSet = true;
}

bool Summary::averageSpeedIsSet() const
{
    return m_Average_speedIsSet;
}

void Summary::unsetAverage_speed()
{
    m_Average_speedIsSet = false;
}
float Summary::getGusts() const
{
    return m_Gusts;
}

void Summary::setGusts(float value)
{
    m_Gusts = value;
    m_GustsIsSet = true;
}

bool Summary::gustsIsSet() const
{
    return m_GustsIsSet;
}

void Summary::unsetGusts()
{
    m_GustsIsSet = false;
}
float Summary::getHourGusts() const
{
    return m_Hour_gusts;
}

void Summary::setHourGusts(float value)
{
    m_Hour_gusts = value;
    m_Hour_gustsIsSet = true;
}

bool Summary::hourGustsIsSet() const
{
    return m_Hour_gustsIsSet;
}

void Summary::unsetHour_gusts()
{
    m_Hour_gustsIsSet = false;
}
float Summary::getHourMaxAverageSpeed() const
{
    return m_Hour_max_average_speed;
}

void Summary::setHourMaxAverageSpeed(float value)
{
    m_Hour_max_average_speed = value;
    m_Hour_max_average_speedIsSet = true;
}

bool Summary::hourMaxAverageSpeedIsSet() const
{
    return m_Hour_max_average_speedIsSet;
}

void Summary::unsetHour_max_average_speed()
{
    m_Hour_max_average_speedIsSet = false;
}
float Summary::getHourMinAverageSpeed() const
{
    return m_Hour_min_average_speed;
}

void Summary::setHourMinAverageSpeed(float value)
{
    m_Hour_min_average_speed = value;
    m_Hour_min_average_speedIsSet = true;
}

bool Summary::hourMinAverageSpeedIsSet() const
{
    return m_Hour_min_average_speedIsSet;
}

void Summary::unsetHour_min_average_speed()
{
    m_Hour_min_average_speedIsSet = false;
}
std::shared_ptr<QualityFactor> Summary::getWindQf() const
{
    return m_Wind_qf;
}

void Summary::setWindQf(const std::shared_ptr<QualityFactor>& value)
{
    m_Wind_qf = value;
    m_Wind_qfIsSet = true;
}

bool Summary::windQfIsSet() const
{
    return m_Wind_qfIsSet;
}

void Summary::unsetWind_qf()
{
    m_Wind_qfIsSet = false;
}
}
}
}
}


