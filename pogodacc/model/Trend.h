/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Trend.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Trend_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Trend_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "TrendData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Trend
    : public ModelBase
{
public:
    Trend();
    virtual ~Trend();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Trend members

    /// <summary>
    /// 
    /// </summary>
    int64_t getLastTimestamp() const;
    bool lastTimestampIsSet() const;
    void unsetLast_timestamp();

    void setLastTimestamp(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDisplayedName() const;
    bool displayedNameIsSet() const;
    void unsetDisplayed_name();

    void setDisplayedName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrentTemperatureQf() const;
    bool currentTemperatureQfIsSet() const;
    void unsetCurrent_temperature_qf();

    void setCurrentTemperatureQf(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrentQnhQf() const;
    bool currentQnhQfIsSet() const;
    void unsetCurrent_qnh_qf();

    void setCurrentQnhQf(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrentHumidityQf() const;
    bool currentHumidityQfIsSet() const;
    void unsetCurrent_humidity_qf();

    void setCurrentHumidityQf(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrentWindQf() const;
    bool currentWindQfIsSet() const;
    void unsetCurrent_wind_qf();

    void setCurrentWindQf(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrendData> getTemperatureTrend() const;
    bool temperatureTrendIsSet() const;
    void unsetTemperature_trend();

    void setTemperatureTrend(const std::shared_ptr<TrendData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrendData> getHumidityTrend() const;
    bool humidityTrendIsSet() const;
    void unsetHumidity_trend();

    void setHumidityTrend(const std::shared_ptr<TrendData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrendData> getPressureTrend() const;
    bool pressureTrendIsSet() const;
    void unsetPressure_trend();

    void setPressureTrend(const std::shared_ptr<TrendData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrendData> getAverageWindSpeedTrend() const;
    bool averageWindSpeedTrendIsSet() const;
    void unsetAverage_wind_speed_trend();

    void setAverageWindSpeedTrend(const std::shared_ptr<TrendData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrendData> getMaximumWindSpeedTrend() const;
    bool maximumWindSpeedTrendIsSet() const;
    void unsetMaximum_wind_speed_trend();

    void setMaximumWindSpeedTrend(const std::shared_ptr<TrendData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TrendData> getWindDirectionTrend() const;
    bool windDirectionTrendIsSet() const;
    void unsetWind_direction_trend();

    void setWindDirectionTrend(const std::shared_ptr<TrendData>& value);


protected:
    int64_t m_Last_timestamp;
    bool m_Last_timestampIsSet;
    utility::string_t m_Displayed_name;
    bool m_Displayed_nameIsSet;
    utility::string_t m_Current_temperature_qf;
    bool m_Current_temperature_qfIsSet;
    utility::string_t m_Current_qnh_qf;
    bool m_Current_qnh_qfIsSet;
    utility::string_t m_Current_humidity_qf;
    bool m_Current_humidity_qfIsSet;
    utility::string_t m_Current_wind_qf;
    bool m_Current_wind_qfIsSet;
    std::shared_ptr<TrendData> m_Temperature_trend;
    bool m_Temperature_trendIsSet;
    std::shared_ptr<TrendData> m_Humidity_trend;
    bool m_Humidity_trendIsSet;
    std::shared_ptr<TrendData> m_Pressure_trend;
    bool m_Pressure_trendIsSet;
    std::shared_ptr<TrendData> m_Average_wind_speed_trend;
    bool m_Average_wind_speed_trendIsSet;
    std::shared_ptr<TrendData> m_Maximum_wind_speed_trend;
    bool m_Maximum_wind_speed_trendIsSet;
    std::shared_ptr<TrendData> m_Wind_direction_trend;
    bool m_Wind_direction_trendIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Trend_H_ */
