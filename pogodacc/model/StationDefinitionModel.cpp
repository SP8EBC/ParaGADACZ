/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StationDefinitionModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




StationDefinitionModel::StationDefinitionModel()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_Callsign = utility::conversions::to_string_t("");
    m_CallsignIsSet = false;
    m_Ssid = 0;
    m_SsidIsSet = false;
    m_DisplayedName = utility::conversions::to_string_t("");
    m_DisplayedNameIsSet = false;
    m_DisplayedLocation = utility::conversions::to_string_t("");
    m_DisplayedLocationIsSet = false;
    m_SponsorUrl = utility::conversions::to_string_t("");
    m_SponsorUrlIsSet = false;
    m_BackgroundJpg = utility::conversions::to_string_t("");
    m_BackgroundJpgIsSet = false;
    m_BackgroundJpgAlign = 0;
    m_BackgroundJpgAlignIsSet = false;
    m_StationNameTextColour = 0;
    m_StationNameTextColourIsSet = false;
    m_MoreInfo = utility::conversions::to_string_t("");
    m_MoreInfoIsSet = false;
    m_Lat = 0.0;
    m_LatIsSet = false;
    m_Lon = 0.0;
    m_LonIsSet = false;
    m_Timezone = utility::conversions::to_string_t("");
    m_TimezoneIsSet = false;
    m_HasWind = false;
    m_HasWindIsSet = false;
    m_HasQnh = false;
    m_HasQnhIsSet = false;
    m_HasHumidity = false;
    m_HasHumidityIsSet = false;
    m_HasRain = false;
    m_HasRainIsSet = false;
}

StationDefinitionModel::~StationDefinitionModel()
{
}

void StationDefinitionModel::validate()
{
    // TODO: implement validation
}

web::json::value StationDefinitionModel::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_CallsignIsSet)
    {
        val[utility::conversions::to_string_t("callsign")] = ModelBase::toJson(m_Callsign);
    }
    if(m_SsidIsSet)
    {
        val[utility::conversions::to_string_t("ssid")] = ModelBase::toJson(m_Ssid);
    }
    if(m_DisplayedNameIsSet)
    {
        val[utility::conversions::to_string_t("displayedName")] = ModelBase::toJson(m_DisplayedName);
    }
    if(m_DisplayedLocationIsSet)
    {
        val[utility::conversions::to_string_t("displayedLocation")] = ModelBase::toJson(m_DisplayedLocation);
    }
    if(m_SponsorUrlIsSet)
    {
        val[utility::conversions::to_string_t("sponsorUrl")] = ModelBase::toJson(m_SponsorUrl);
    }
    if(m_BackgroundJpgIsSet)
    {
        val[utility::conversions::to_string_t("backgroundJpg")] = ModelBase::toJson(m_BackgroundJpg);
    }
    if(m_BackgroundJpgAlignIsSet)
    {
        val[utility::conversions::to_string_t("backgroundJpgAlign")] = ModelBase::toJson(m_BackgroundJpgAlign);
    }
    if(m_StationNameTextColourIsSet)
    {
        val[utility::conversions::to_string_t("stationNameTextColour")] = ModelBase::toJson(m_StationNameTextColour);
    }
    if(m_MoreInfoIsSet)
    {
        val[utility::conversions::to_string_t("moreInfo")] = ModelBase::toJson(m_MoreInfo);
    }
    if(m_LatIsSet)
    {
        val[utility::conversions::to_string_t("lat")] = ModelBase::toJson(m_Lat);
    }
    if(m_LonIsSet)
    {
        val[utility::conversions::to_string_t("lon")] = ModelBase::toJson(m_Lon);
    }
    if(m_TimezoneIsSet)
    {
        val[utility::conversions::to_string_t("timezone")] = ModelBase::toJson(m_Timezone);
    }
    if(m_HasWindIsSet)
    {
        val[utility::conversions::to_string_t("hasWind")] = ModelBase::toJson(m_HasWind);
    }
    if(m_HasQnhIsSet)
    {
        val[utility::conversions::to_string_t("hasQnh")] = ModelBase::toJson(m_HasQnh);
    }
    if(m_HasHumidityIsSet)
    {
        val[utility::conversions::to_string_t("hasHumidity")] = ModelBase::toJson(m_HasHumidity);
    }
    if(m_HasRainIsSet)
    {
        val[utility::conversions::to_string_t("hasRain")] = ModelBase::toJson(m_HasRain);
    }

    return val;
}

bool StationDefinitionModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("enabled")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("enabled"));
        if(!fieldValue.is_null())
        {
            bool refVal_enabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_enabled);
            setEnabled(refVal_enabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("callsign")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("callsign"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_callsign;
            ok &= ModelBase::fromJson(fieldValue, refVal_callsign);
            setCallsign(refVal_callsign);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ssid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ssid"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_ssid;
            ok &= ModelBase::fromJson(fieldValue, refVal_ssid);
            setSsid(refVal_ssid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayedName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("displayedName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_displayedName;
            ok &= ModelBase::fromJson(fieldValue, refVal_displayedName);
            setDisplayedName(refVal_displayedName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayedLocation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("displayedLocation"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_displayedLocation;
            ok &= ModelBase::fromJson(fieldValue, refVal_displayedLocation);
            setDisplayedLocation(refVal_displayedLocation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sponsorUrl")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sponsorUrl"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sponsorUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_sponsorUrl);
            setSponsorUrl(refVal_sponsorUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("backgroundJpg")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("backgroundJpg"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_backgroundJpg;
            ok &= ModelBase::fromJson(fieldValue, refVal_backgroundJpg);
            setBackgroundJpg(refVal_backgroundJpg);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("backgroundJpgAlign")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("backgroundJpgAlign"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_backgroundJpgAlign;
            ok &= ModelBase::fromJson(fieldValue, refVal_backgroundJpgAlign);
            setBackgroundJpgAlign(refVal_backgroundJpgAlign);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stationNameTextColour")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stationNameTextColour"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_stationNameTextColour;
            ok &= ModelBase::fromJson(fieldValue, refVal_stationNameTextColour);
            setStationNameTextColour(refVal_stationNameTextColour);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("moreInfo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("moreInfo"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_moreInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_moreInfo);
            setMoreInfo(refVal_moreInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lat")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lat"));
        if(!fieldValue.is_null())
        {
            double refVal_lat;
            ok &= ModelBase::fromJson(fieldValue, refVal_lat);
            setLat(refVal_lat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lon")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lon"));
        if(!fieldValue.is_null())
        {
            double refVal_lon;
            ok &= ModelBase::fromJson(fieldValue, refVal_lon);
            setLon(refVal_lon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timezone")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timezone"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_timezone;
            ok &= ModelBase::fromJson(fieldValue, refVal_timezone);
            setTimezone(refVal_timezone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasWind")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasWind"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasWind;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasWind);
            setHasWind(refVal_hasWind);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasQnh")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasQnh"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasQnh;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasQnh);
            setHasQnh(refVal_hasQnh);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasHumidity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasHumidity"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasHumidity;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasHumidity);
            setHasHumidity(refVal_hasHumidity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasRain")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasRain"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasRain;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasRain);
            setHasRain(refVal_hasRain);
        }
    }
    return ok;
}

void StationDefinitionModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enabled"), m_Enabled));
    }
    if(m_CallsignIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("callsign"), m_Callsign));
    }
    if(m_SsidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ssid"), m_Ssid));
    }
    if(m_DisplayedNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayedName"), m_DisplayedName));
    }
    if(m_DisplayedLocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayedLocation"), m_DisplayedLocation));
    }
    if(m_SponsorUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sponsorUrl"), m_SponsorUrl));
    }
    if(m_BackgroundJpgIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("backgroundJpg"), m_BackgroundJpg));
    }
    if(m_BackgroundJpgAlignIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("backgroundJpgAlign"), m_BackgroundJpgAlign));
    }
    if(m_StationNameTextColourIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stationNameTextColour"), m_StationNameTextColour));
    }
    if(m_MoreInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("moreInfo"), m_MoreInfo));
    }
    if(m_LatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lat"), m_Lat));
    }
    if(m_LonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lon"), m_Lon));
    }
    if(m_TimezoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timezone"), m_Timezone));
    }
    if(m_HasWindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasWind"), m_HasWind));
    }
    if(m_HasQnhIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasQnh"), m_HasQnh));
    }
    if(m_HasHumidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasHumidity"), m_HasHumidity));
    }
    if(m_HasRainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasRain"), m_HasRain));
    }
}

bool StationDefinitionModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("enabled")))
    {
        bool refVal_enabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("enabled")), refVal_enabled );
        setEnabled(refVal_enabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("callsign")))
    {
        utility::string_t refVal_callsign;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("callsign")), refVal_callsign );
        setCallsign(refVal_callsign);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ssid")))
    {
        int32_t refVal_ssid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ssid")), refVal_ssid );
        setSsid(refVal_ssid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayedName")))
    {
        utility::string_t refVal_displayedName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayedName")), refVal_displayedName );
        setDisplayedName(refVal_displayedName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayedLocation")))
    {
        utility::string_t refVal_displayedLocation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayedLocation")), refVal_displayedLocation );
        setDisplayedLocation(refVal_displayedLocation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sponsorUrl")))
    {
        utility::string_t refVal_sponsorUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sponsorUrl")), refVal_sponsorUrl );
        setSponsorUrl(refVal_sponsorUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("backgroundJpg")))
    {
        utility::string_t refVal_backgroundJpg;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("backgroundJpg")), refVal_backgroundJpg );
        setBackgroundJpg(refVal_backgroundJpg);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("backgroundJpgAlign")))
    {
        int32_t refVal_backgroundJpgAlign;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("backgroundJpgAlign")), refVal_backgroundJpgAlign );
        setBackgroundJpgAlign(refVal_backgroundJpgAlign);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stationNameTextColour")))
    {
        int32_t refVal_stationNameTextColour;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stationNameTextColour")), refVal_stationNameTextColour );
        setStationNameTextColour(refVal_stationNameTextColour);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("moreInfo")))
    {
        utility::string_t refVal_moreInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("moreInfo")), refVal_moreInfo );
        setMoreInfo(refVal_moreInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lat")))
    {
        double refVal_lat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lat")), refVal_lat );
        setLat(refVal_lat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lon")))
    {
        double refVal_lon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lon")), refVal_lon );
        setLon(refVal_lon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timezone")))
    {
        utility::string_t refVal_timezone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timezone")), refVal_timezone );
        setTimezone(refVal_timezone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasWind")))
    {
        bool refVal_hasWind;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasWind")), refVal_hasWind );
        setHasWind(refVal_hasWind);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasQnh")))
    {
        bool refVal_hasQnh;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasQnh")), refVal_hasQnh );
        setHasQnh(refVal_hasQnh);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasHumidity")))
    {
        bool refVal_hasHumidity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasHumidity")), refVal_hasHumidity );
        setHasHumidity(refVal_hasHumidity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasRain")))
    {
        bool refVal_hasRain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasRain")), refVal_hasRain );
        setHasRain(refVal_hasRain);
    }
    return ok;
}

int32_t StationDefinitionModel::getId() const
{
    return m_Id;
}

void StationDefinitionModel::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool StationDefinitionModel::idIsSet() const
{
    return m_IdIsSet;
}

void StationDefinitionModel::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t StationDefinitionModel::getName() const
{
    return m_Name;
}

void StationDefinitionModel::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool StationDefinitionModel::nameIsSet() const
{
    return m_NameIsSet;
}

void StationDefinitionModel::unsetName()
{
    m_NameIsSet = false;
}
bool StationDefinitionModel::isEnabled() const
{
    return m_Enabled;
}

void StationDefinitionModel::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}

bool StationDefinitionModel::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void StationDefinitionModel::unsetEnabled()
{
    m_EnabledIsSet = false;
}
utility::string_t StationDefinitionModel::getCallsign() const
{
    return m_Callsign;
}

void StationDefinitionModel::setCallsign(const utility::string_t& value)
{
    m_Callsign = value;
    m_CallsignIsSet = true;
}

bool StationDefinitionModel::callsignIsSet() const
{
    return m_CallsignIsSet;
}

void StationDefinitionModel::unsetCallsign()
{
    m_CallsignIsSet = false;
}
int32_t StationDefinitionModel::getSsid() const
{
    return m_Ssid;
}

void StationDefinitionModel::setSsid(int32_t value)
{
    m_Ssid = value;
    m_SsidIsSet = true;
}

bool StationDefinitionModel::ssidIsSet() const
{
    return m_SsidIsSet;
}

void StationDefinitionModel::unsetSsid()
{
    m_SsidIsSet = false;
}
utility::string_t StationDefinitionModel::getDisplayedName() const
{
    return m_DisplayedName;
}

void StationDefinitionModel::setDisplayedName(const utility::string_t& value)
{
    m_DisplayedName = value;
    m_DisplayedNameIsSet = true;
}

bool StationDefinitionModel::displayedNameIsSet() const
{
    return m_DisplayedNameIsSet;
}

void StationDefinitionModel::unsetDisplayedName()
{
    m_DisplayedNameIsSet = false;
}
utility::string_t StationDefinitionModel::getDisplayedLocation() const
{
    return m_DisplayedLocation;
}

void StationDefinitionModel::setDisplayedLocation(const utility::string_t& value)
{
    m_DisplayedLocation = value;
    m_DisplayedLocationIsSet = true;
}

bool StationDefinitionModel::displayedLocationIsSet() const
{
    return m_DisplayedLocationIsSet;
}

void StationDefinitionModel::unsetDisplayedLocation()
{
    m_DisplayedLocationIsSet = false;
}
utility::string_t StationDefinitionModel::getSponsorUrl() const
{
    return m_SponsorUrl;
}

void StationDefinitionModel::setSponsorUrl(const utility::string_t& value)
{
    m_SponsorUrl = value;
    m_SponsorUrlIsSet = true;
}

bool StationDefinitionModel::sponsorUrlIsSet() const
{
    return m_SponsorUrlIsSet;
}

void StationDefinitionModel::unsetSponsorUrl()
{
    m_SponsorUrlIsSet = false;
}
utility::string_t StationDefinitionModel::getBackgroundJpg() const
{
    return m_BackgroundJpg;
}

void StationDefinitionModel::setBackgroundJpg(const utility::string_t& value)
{
    m_BackgroundJpg = value;
    m_BackgroundJpgIsSet = true;
}

bool StationDefinitionModel::backgroundJpgIsSet() const
{
    return m_BackgroundJpgIsSet;
}

void StationDefinitionModel::unsetBackgroundJpg()
{
    m_BackgroundJpgIsSet = false;
}
int32_t StationDefinitionModel::getBackgroundJpgAlign() const
{
    return m_BackgroundJpgAlign;
}

void StationDefinitionModel::setBackgroundJpgAlign(int32_t value)
{
    m_BackgroundJpgAlign = value;
    m_BackgroundJpgAlignIsSet = true;
}

bool StationDefinitionModel::backgroundJpgAlignIsSet() const
{
    return m_BackgroundJpgAlignIsSet;
}

void StationDefinitionModel::unsetBackgroundJpgAlign()
{
    m_BackgroundJpgAlignIsSet = false;
}
int32_t StationDefinitionModel::getStationNameTextColour() const
{
    return m_StationNameTextColour;
}

void StationDefinitionModel::setStationNameTextColour(int32_t value)
{
    m_StationNameTextColour = value;
    m_StationNameTextColourIsSet = true;
}

bool StationDefinitionModel::stationNameTextColourIsSet() const
{
    return m_StationNameTextColourIsSet;
}

void StationDefinitionModel::unsetStationNameTextColour()
{
    m_StationNameTextColourIsSet = false;
}
utility::string_t StationDefinitionModel::getMoreInfo() const
{
    return m_MoreInfo;
}

void StationDefinitionModel::setMoreInfo(const utility::string_t& value)
{
    m_MoreInfo = value;
    m_MoreInfoIsSet = true;
}

bool StationDefinitionModel::moreInfoIsSet() const
{
    return m_MoreInfoIsSet;
}

void StationDefinitionModel::unsetMoreInfo()
{
    m_MoreInfoIsSet = false;
}
double StationDefinitionModel::getLat() const
{
    return m_Lat;
}

void StationDefinitionModel::setLat(double value)
{
    m_Lat = value;
    m_LatIsSet = true;
}

bool StationDefinitionModel::latIsSet() const
{
    return m_LatIsSet;
}

void StationDefinitionModel::unsetLat()
{
    m_LatIsSet = false;
}
double StationDefinitionModel::getLon() const
{
    return m_Lon;
}

void StationDefinitionModel::setLon(double value)
{
    m_Lon = value;
    m_LonIsSet = true;
}

bool StationDefinitionModel::lonIsSet() const
{
    return m_LonIsSet;
}

void StationDefinitionModel::unsetLon()
{
    m_LonIsSet = false;
}
utility::string_t StationDefinitionModel::getTimezone() const
{
    return m_Timezone;
}

void StationDefinitionModel::setTimezone(const utility::string_t& value)
{
    m_Timezone = value;
    m_TimezoneIsSet = true;
}

bool StationDefinitionModel::timezoneIsSet() const
{
    return m_TimezoneIsSet;
}

void StationDefinitionModel::unsetTimezone()
{
    m_TimezoneIsSet = false;
}
bool StationDefinitionModel::isHasWind() const
{
    return m_HasWind;
}

void StationDefinitionModel::setHasWind(bool value)
{
    m_HasWind = value;
    m_HasWindIsSet = true;
}

bool StationDefinitionModel::hasWindIsSet() const
{
    return m_HasWindIsSet;
}

void StationDefinitionModel::unsetHasWind()
{
    m_HasWindIsSet = false;
}
bool StationDefinitionModel::isHasQnh() const
{
    return m_HasQnh;
}

void StationDefinitionModel::setHasQnh(bool value)
{
    m_HasQnh = value;
    m_HasQnhIsSet = true;
}

bool StationDefinitionModel::hasQnhIsSet() const
{
    return m_HasQnhIsSet;
}

void StationDefinitionModel::unsetHasQnh()
{
    m_HasQnhIsSet = false;
}
bool StationDefinitionModel::isHasHumidity() const
{
    return m_HasHumidity;
}

void StationDefinitionModel::setHasHumidity(bool value)
{
    m_HasHumidity = value;
    m_HasHumidityIsSet = true;
}

bool StationDefinitionModel::hasHumidityIsSet() const
{
    return m_HasHumidityIsSet;
}

void StationDefinitionModel::unsetHasHumidity()
{
    m_HasHumidityIsSet = false;
}
bool StationDefinitionModel::isHasRain() const
{
    return m_HasRain;
}

void StationDefinitionModel::setHasRain(bool value)
{
    m_HasRain = value;
    m_HasRainIsSet = true;
}

bool StationDefinitionModel::hasRainIsSet() const
{
    return m_HasRainIsSet;
}

void StationDefinitionModel::unsetHasRain()
{
    m_HasRainIsSet = false;
}
}
}
}
}


