/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Trend.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Trend::Trend()
{
    m_Last_timestamp = 0L;
    m_Last_timestampIsSet = false;
    m_Displayed_name = utility::conversions::to_string_t("");
    m_Displayed_nameIsSet = false;
    m_Current_temperature_qf = utility::conversions::to_string_t("");
    m_Current_temperature_qfIsSet = false;
    m_Current_qnh_qf = utility::conversions::to_string_t("");
    m_Current_qnh_qfIsSet = false;
    m_Current_humidity_qf = utility::conversions::to_string_t("");
    m_Current_humidity_qfIsSet = false;
    m_Current_wind_qf = utility::conversions::to_string_t("");
    m_Current_wind_qfIsSet = false;
    m_Temperature_trendIsSet = false;
    m_Humidity_trendIsSet = false;
    m_Pressure_trendIsSet = false;
    m_Average_wind_speed_trendIsSet = false;
    m_Maximum_wind_speed_trendIsSet = false;
    m_Wind_direction_trendIsSet = false;
}

Trend::~Trend()
{
}

void Trend::validate()
{
    // TODO: implement validation
}

web::json::value Trend::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Last_timestampIsSet)
    {
        val[utility::conversions::to_string_t("last_timestamp")] = ModelBase::toJson(m_Last_timestamp);
    }
    if(m_Displayed_nameIsSet)
    {
        val[utility::conversions::to_string_t("displayed_name")] = ModelBase::toJson(m_Displayed_name);
    }
    if(m_Current_temperature_qfIsSet)
    {
        val[utility::conversions::to_string_t("current_temperature_qf")] = ModelBase::toJson(m_Current_temperature_qf);
    }
    if(m_Current_qnh_qfIsSet)
    {
        val[utility::conversions::to_string_t("current_qnh_qf")] = ModelBase::toJson(m_Current_qnh_qf);
    }
    if(m_Current_humidity_qfIsSet)
    {
        val[utility::conversions::to_string_t("current_humidity_qf")] = ModelBase::toJson(m_Current_humidity_qf);
    }
    if(m_Current_wind_qfIsSet)
    {
        val[utility::conversions::to_string_t("current_wind_qf")] = ModelBase::toJson(m_Current_wind_qf);
    }
    if(m_Temperature_trendIsSet)
    {
        val[utility::conversions::to_string_t("temperature_trend")] = ModelBase::toJson(m_Temperature_trend);
    }
    if(m_Humidity_trendIsSet)
    {
        val[utility::conversions::to_string_t("humidity_trend")] = ModelBase::toJson(m_Humidity_trend);
    }
    if(m_Pressure_trendIsSet)
    {
        val[utility::conversions::to_string_t("pressure_trend")] = ModelBase::toJson(m_Pressure_trend);
    }
    if(m_Average_wind_speed_trendIsSet)
    {
        val[utility::conversions::to_string_t("average_wind_speed_trend")] = ModelBase::toJson(m_Average_wind_speed_trend);
    }
    if(m_Maximum_wind_speed_trendIsSet)
    {
        val[utility::conversions::to_string_t("maximum_wind_speed_trend")] = ModelBase::toJson(m_Maximum_wind_speed_trend);
    }
    if(m_Wind_direction_trendIsSet)
    {
        val[utility::conversions::to_string_t("wind_direction_trend")] = ModelBase::toJson(m_Wind_direction_trend);
    }

    return val;
}

bool Trend::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("last_timestamp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("last_timestamp"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_last_timestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_last_timestamp);
            setLastTimestamp(refVal_last_timestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayed_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("displayed_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_displayed_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_displayed_name);
            setDisplayedName(refVal_displayed_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current_temperature_qf")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current_temperature_qf"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_current_temperature_qf;
            ok &= ModelBase::fromJson(fieldValue, refVal_current_temperature_qf);
            setCurrentTemperatureQf(refVal_current_temperature_qf);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current_qnh_qf")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current_qnh_qf"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_current_qnh_qf;
            ok &= ModelBase::fromJson(fieldValue, refVal_current_qnh_qf);
            setCurrentQnhQf(refVal_current_qnh_qf);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current_humidity_qf")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current_humidity_qf"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_current_humidity_qf;
            ok &= ModelBase::fromJson(fieldValue, refVal_current_humidity_qf);
            setCurrentHumidityQf(refVal_current_humidity_qf);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("current_wind_qf")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("current_wind_qf"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_current_wind_qf;
            ok &= ModelBase::fromJson(fieldValue, refVal_current_wind_qf);
            setCurrentWindQf(refVal_current_wind_qf);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temperature_trend")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temperature_trend"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TrendData> refVal_temperature_trend;
            ok &= ModelBase::fromJson(fieldValue, refVal_temperature_trend);
            setTemperatureTrend(refVal_temperature_trend);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("humidity_trend")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("humidity_trend"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TrendData> refVal_humidity_trend;
            ok &= ModelBase::fromJson(fieldValue, refVal_humidity_trend);
            setHumidityTrend(refVal_humidity_trend);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure_trend")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure_trend"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TrendData> refVal_pressure_trend;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure_trend);
            setPressureTrend(refVal_pressure_trend);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("average_wind_speed_trend")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("average_wind_speed_trend"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TrendData> refVal_average_wind_speed_trend;
            ok &= ModelBase::fromJson(fieldValue, refVal_average_wind_speed_trend);
            setAverageWindSpeedTrend(refVal_average_wind_speed_trend);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("maximum_wind_speed_trend")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("maximum_wind_speed_trend"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TrendData> refVal_maximum_wind_speed_trend;
            ok &= ModelBase::fromJson(fieldValue, refVal_maximum_wind_speed_trend);
            setMaximumWindSpeedTrend(refVal_maximum_wind_speed_trend);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wind_direction_trend")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wind_direction_trend"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TrendData> refVal_wind_direction_trend;
            ok &= ModelBase::fromJson(fieldValue, refVal_wind_direction_trend);
            setWindDirectionTrend(refVal_wind_direction_trend);
        }
    }
    return ok;
}

void Trend::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Last_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last_timestamp"), m_Last_timestamp));
    }
    if(m_Displayed_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayed_name"), m_Displayed_name));
    }
    if(m_Current_temperature_qfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current_temperature_qf"), m_Current_temperature_qf));
    }
    if(m_Current_qnh_qfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current_qnh_qf"), m_Current_qnh_qf));
    }
    if(m_Current_humidity_qfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current_humidity_qf"), m_Current_humidity_qf));
    }
    if(m_Current_wind_qfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("current_wind_qf"), m_Current_wind_qf));
    }
    if(m_Temperature_trendIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temperature_trend"), m_Temperature_trend));
    }
    if(m_Humidity_trendIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("humidity_trend"), m_Humidity_trend));
    }
    if(m_Pressure_trendIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure_trend"), m_Pressure_trend));
    }
    if(m_Average_wind_speed_trendIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("average_wind_speed_trend"), m_Average_wind_speed_trend));
    }
    if(m_Maximum_wind_speed_trendIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("maximum_wind_speed_trend"), m_Maximum_wind_speed_trend));
    }
    if(m_Wind_direction_trendIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wind_direction_trend"), m_Wind_direction_trend));
    }
}

bool Trend::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("last_timestamp")))
    {
        int64_t refVal_last_timestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("last_timestamp")), refVal_last_timestamp );
        setLastTimestamp(refVal_last_timestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayed_name")))
    {
        utility::string_t refVal_displayed_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayed_name")), refVal_displayed_name );
        setDisplayedName(refVal_displayed_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current_temperature_qf")))
    {
        utility::string_t refVal_current_temperature_qf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("current_temperature_qf")), refVal_current_temperature_qf );
        setCurrentTemperatureQf(refVal_current_temperature_qf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current_qnh_qf")))
    {
        utility::string_t refVal_current_qnh_qf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("current_qnh_qf")), refVal_current_qnh_qf );
        setCurrentQnhQf(refVal_current_qnh_qf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current_humidity_qf")))
    {
        utility::string_t refVal_current_humidity_qf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("current_humidity_qf")), refVal_current_humidity_qf );
        setCurrentHumidityQf(refVal_current_humidity_qf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("current_wind_qf")))
    {
        utility::string_t refVal_current_wind_qf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("current_wind_qf")), refVal_current_wind_qf );
        setCurrentWindQf(refVal_current_wind_qf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temperature_trend")))
    {
        std::shared_ptr<TrendData> refVal_temperature_trend;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temperature_trend")), refVal_temperature_trend );
        setTemperatureTrend(refVal_temperature_trend);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("humidity_trend")))
    {
        std::shared_ptr<TrendData> refVal_humidity_trend;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("humidity_trend")), refVal_humidity_trend );
        setHumidityTrend(refVal_humidity_trend);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure_trend")))
    {
        std::shared_ptr<TrendData> refVal_pressure_trend;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure_trend")), refVal_pressure_trend );
        setPressureTrend(refVal_pressure_trend);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("average_wind_speed_trend")))
    {
        std::shared_ptr<TrendData> refVal_average_wind_speed_trend;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("average_wind_speed_trend")), refVal_average_wind_speed_trend );
        setAverageWindSpeedTrend(refVal_average_wind_speed_trend);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("maximum_wind_speed_trend")))
    {
        std::shared_ptr<TrendData> refVal_maximum_wind_speed_trend;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("maximum_wind_speed_trend")), refVal_maximum_wind_speed_trend );
        setMaximumWindSpeedTrend(refVal_maximum_wind_speed_trend);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wind_direction_trend")))
    {
        std::shared_ptr<TrendData> refVal_wind_direction_trend;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wind_direction_trend")), refVal_wind_direction_trend );
        setWindDirectionTrend(refVal_wind_direction_trend);
    }
    return ok;
}

int64_t Trend::getLastTimestamp() const
{
    return m_Last_timestamp;
}

void Trend::setLastTimestamp(int64_t value)
{
    m_Last_timestamp = value;
    m_Last_timestampIsSet = true;
}

bool Trend::lastTimestampIsSet() const
{
    return m_Last_timestampIsSet;
}

void Trend::unsetLast_timestamp()
{
    m_Last_timestampIsSet = false;
}
utility::string_t Trend::getDisplayedName() const
{
    return m_Displayed_name;
}

void Trend::setDisplayedName(const utility::string_t& value)
{
    m_Displayed_name = value;
    m_Displayed_nameIsSet = true;
}

bool Trend::displayedNameIsSet() const
{
    return m_Displayed_nameIsSet;
}

void Trend::unsetDisplayed_name()
{
    m_Displayed_nameIsSet = false;
}
utility::string_t Trend::getCurrentTemperatureQf() const
{
    return m_Current_temperature_qf;
}

void Trend::setCurrentTemperatureQf(const utility::string_t& value)
{
    m_Current_temperature_qf = value;
    m_Current_temperature_qfIsSet = true;
}

bool Trend::currentTemperatureQfIsSet() const
{
    return m_Current_temperature_qfIsSet;
}

void Trend::unsetCurrent_temperature_qf()
{
    m_Current_temperature_qfIsSet = false;
}
utility::string_t Trend::getCurrentQnhQf() const
{
    return m_Current_qnh_qf;
}

void Trend::setCurrentQnhQf(const utility::string_t& value)
{
    m_Current_qnh_qf = value;
    m_Current_qnh_qfIsSet = true;
}

bool Trend::currentQnhQfIsSet() const
{
    return m_Current_qnh_qfIsSet;
}

void Trend::unsetCurrent_qnh_qf()
{
    m_Current_qnh_qfIsSet = false;
}
utility::string_t Trend::getCurrentHumidityQf() const
{
    return m_Current_humidity_qf;
}

void Trend::setCurrentHumidityQf(const utility::string_t& value)
{
    m_Current_humidity_qf = value;
    m_Current_humidity_qfIsSet = true;
}

bool Trend::currentHumidityQfIsSet() const
{
    return m_Current_humidity_qfIsSet;
}

void Trend::unsetCurrent_humidity_qf()
{
    m_Current_humidity_qfIsSet = false;
}
utility::string_t Trend::getCurrentWindQf() const
{
    return m_Current_wind_qf;
}

void Trend::setCurrentWindQf(const utility::string_t& value)
{
    m_Current_wind_qf = value;
    m_Current_wind_qfIsSet = true;
}

bool Trend::currentWindQfIsSet() const
{
    return m_Current_wind_qfIsSet;
}

void Trend::unsetCurrent_wind_qf()
{
    m_Current_wind_qfIsSet = false;
}
std::shared_ptr<TrendData> Trend::getTemperatureTrend() const
{
    return m_Temperature_trend;
}

void Trend::setTemperatureTrend(const std::shared_ptr<TrendData>& value)
{
    m_Temperature_trend = value;
    m_Temperature_trendIsSet = true;
}

bool Trend::temperatureTrendIsSet() const
{
    return m_Temperature_trendIsSet;
}

void Trend::unsetTemperature_trend()
{
    m_Temperature_trendIsSet = false;
}
std::shared_ptr<TrendData> Trend::getHumidityTrend() const
{
    return m_Humidity_trend;
}

void Trend::setHumidityTrend(const std::shared_ptr<TrendData>& value)
{
    m_Humidity_trend = value;
    m_Humidity_trendIsSet = true;
}

bool Trend::humidityTrendIsSet() const
{
    return m_Humidity_trendIsSet;
}

void Trend::unsetHumidity_trend()
{
    m_Humidity_trendIsSet = false;
}
std::shared_ptr<TrendData> Trend::getPressureTrend() const
{
    return m_Pressure_trend;
}

void Trend::setPressureTrend(const std::shared_ptr<TrendData>& value)
{
    m_Pressure_trend = value;
    m_Pressure_trendIsSet = true;
}

bool Trend::pressureTrendIsSet() const
{
    return m_Pressure_trendIsSet;
}

void Trend::unsetPressure_trend()
{
    m_Pressure_trendIsSet = false;
}
std::shared_ptr<TrendData> Trend::getAverageWindSpeedTrend() const
{
    return m_Average_wind_speed_trend;
}

void Trend::setAverageWindSpeedTrend(const std::shared_ptr<TrendData>& value)
{
    m_Average_wind_speed_trend = value;
    m_Average_wind_speed_trendIsSet = true;
}

bool Trend::averageWindSpeedTrendIsSet() const
{
    return m_Average_wind_speed_trendIsSet;
}

void Trend::unsetAverage_wind_speed_trend()
{
    m_Average_wind_speed_trendIsSet = false;
}
std::shared_ptr<TrendData> Trend::getMaximumWindSpeedTrend() const
{
    return m_Maximum_wind_speed_trend;
}

void Trend::setMaximumWindSpeedTrend(const std::shared_ptr<TrendData>& value)
{
    m_Maximum_wind_speed_trend = value;
    m_Maximum_wind_speed_trendIsSet = true;
}

bool Trend::maximumWindSpeedTrendIsSet() const
{
    return m_Maximum_wind_speed_trendIsSet;
}

void Trend::unsetMaximum_wind_speed_trend()
{
    m_Maximum_wind_speed_trendIsSet = false;
}
std::shared_ptr<TrendData> Trend::getWindDirectionTrend() const
{
    return m_Wind_direction_trend;
}

void Trend::setWindDirectionTrend(const std::shared_ptr<TrendData>& value)
{
    m_Wind_direction_trend = value;
    m_Wind_direction_trendIsSet = true;
}

bool Trend::windDirectionTrendIsSet() const
{
    return m_Wind_direction_trendIsSet;
}

void Trend::unsetWind_direction_trend()
{
    m_Wind_direction_trendIsSet = false;
}
}
}
}
}


