/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StationGroupStations.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




StationGroupStations::StationGroupStations()
{
    m_StationGroupId = 0;
    m_StationGroupIdIsSet = false;
    m_StationIdsIsSet = false;
}

StationGroupStations::~StationGroupStations()
{
}

void StationGroupStations::validate()
{
    // TODO: implement validation
}

web::json::value StationGroupStations::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StationGroupIdIsSet)
    {
        val[utility::conversions::to_string_t("stationGroupId")] = ModelBase::toJson(m_StationGroupId);
    }
    if(m_StationIdsIsSet)
    {
        val[utility::conversions::to_string_t("stationIds")] = ModelBase::toJson(m_StationIds);
    }

    return val;
}

bool StationGroupStations::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("stationGroupId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stationGroupId"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_stationGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_stationGroupId);
            setStationGroupId(refVal_stationGroupId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stationIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stationIds"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<StationGroupStationsStation>> refVal_stationIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_stationIds);
            setStationIds(refVal_stationIds);
        }
    }
    return ok;
}

void StationGroupStations::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_StationGroupIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stationGroupId"), m_StationGroupId));
    }
    if(m_StationIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stationIds"), m_StationIds));
    }
}

bool StationGroupStations::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("stationGroupId")))
    {
        int32_t refVal_stationGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stationGroupId")), refVal_stationGroupId );
        setStationGroupId(refVal_stationGroupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stationIds")))
    {
        std::vector<std::shared_ptr<StationGroupStationsStation>> refVal_stationIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stationIds")), refVal_stationIds );
        setStationIds(refVal_stationIds);
    }
    return ok;
}

int32_t StationGroupStations::getStationGroupId() const
{
    return m_StationGroupId;
}

void StationGroupStations::setStationGroupId(int32_t value)
{
    m_StationGroupId = value;
    m_StationGroupIdIsSet = true;
}

bool StationGroupStations::stationGroupIdIsSet() const
{
    return m_StationGroupIdIsSet;
}

void StationGroupStations::unsetStationGroupId()
{
    m_StationGroupIdIsSet = false;
}
std::vector<std::shared_ptr<StationGroupStationsStation>>& StationGroupStations::getStationIds()
{
    return m_StationIds;
}

void StationGroupStations::setStationIds(const std::vector<std::shared_ptr<StationGroupStationsStation>>& value)
{
    m_StationIds = value;
    m_StationIdsIsSet = true;
}

bool StationGroupStations::stationIdsIsSet() const
{
    return m_StationIdsIsSet;
}

void StationGroupStations::unsetStationIds()
{
    m_StationIdsIsSet = false;
}
}
}
}
}


