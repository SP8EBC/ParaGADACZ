/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * StationsGroup.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_StationsGroup_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_StationsGroup_H_


#include "../ModelBase.h"

#include "LocaleEntry.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  StationsGroup
    : public ModelBase
{
public:
    StationsGroup();
    virtual ~StationsGroup();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// StationsGroup members

    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCategory() const;
    bool categoryIsSet() const;
    void unsetCategory();

    void setCategory(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LocaleEntry>>& getLocale();
    bool localeIsSet() const;
    void unsetLocale();

    void setLocale(const std::vector<std::shared_ptr<LocaleEntry>>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsEnabled() const;
    bool isEnabledIsSet() const;
    void unsetIsEnabled();

    void setIsEnabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsEmpty() const;
    bool isEmptyIsSet() const;
    void unsetIsEmpty();

    void setIsEmpty(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsBuiltin() const;
    bool isBuiltinIsSet() const;
    void unsetIsBuiltin();

    void setIsBuiltin(bool value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Category;
    bool m_CategoryIsSet;
    std::vector<std::shared_ptr<LocaleEntry>> m_Locale;
    bool m_LocaleIsSet;
    bool m_IsEnabled;
    bool m_IsEnabledIsSet;
    bool m_IsEmpty;
    bool m_IsEmptyIsSet;
    bool m_IsBuiltin;
    bool m_IsBuiltinIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_StationsGroup_H_ */
