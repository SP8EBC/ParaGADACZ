/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AvailableParametersModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




AvailableParametersModel::AvailableParametersModel()
{
    m_HasWind = false;
    m_HasWindIsSet = false;
    m_HasQnh = false;
    m_HasQnhIsSet = false;
    m_HasHumidity = false;
    m_HasHumidityIsSet = false;
    m_HasRain = false;
    m_HasRainIsSet = false;
    m_TelemetryVersion = 0;
    m_TelemetryVersionIsSet = false;
}

AvailableParametersModel::~AvailableParametersModel()
{
}

void AvailableParametersModel::validate()
{
    // TODO: implement validation
}

web::json::value AvailableParametersModel::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HasWindIsSet)
    {
        val[utility::conversions::to_string_t("hasWind")] = ModelBase::toJson(m_HasWind);
    }
    if(m_HasQnhIsSet)
    {
        val[utility::conversions::to_string_t("hasQnh")] = ModelBase::toJson(m_HasQnh);
    }
    if(m_HasHumidityIsSet)
    {
        val[utility::conversions::to_string_t("hasHumidity")] = ModelBase::toJson(m_HasHumidity);
    }
    if(m_HasRainIsSet)
    {
        val[utility::conversions::to_string_t("hasRain")] = ModelBase::toJson(m_HasRain);
    }
    if(m_TelemetryVersionIsSet)
    {
        val[utility::conversions::to_string_t("telemetryVersion")] = ModelBase::toJson(m_TelemetryVersion);
    }

    return val;
}

bool AvailableParametersModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("hasWind")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasWind"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasWind;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasWind);
            setHasWind(refVal_hasWind);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasQnh")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasQnh"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasQnh;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasQnh);
            setHasQnh(refVal_hasQnh);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasHumidity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasHumidity"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasHumidity;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasHumidity);
            setHasHumidity(refVal_hasHumidity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasRain")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasRain"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasRain;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasRain);
            setHasRain(refVal_hasRain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("telemetryVersion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("telemetryVersion"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_telemetryVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_telemetryVersion);
            setTelemetryVersion(refVal_telemetryVersion);
        }
    }
    return ok;
}

void AvailableParametersModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_HasWindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasWind"), m_HasWind));
    }
    if(m_HasQnhIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasQnh"), m_HasQnh));
    }
    if(m_HasHumidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasHumidity"), m_HasHumidity));
    }
    if(m_HasRainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasRain"), m_HasRain));
    }
    if(m_TelemetryVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("telemetryVersion"), m_TelemetryVersion));
    }
}

bool AvailableParametersModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("hasWind")))
    {
        bool refVal_hasWind;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasWind")), refVal_hasWind );
        setHasWind(refVal_hasWind);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasQnh")))
    {
        bool refVal_hasQnh;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasQnh")), refVal_hasQnh );
        setHasQnh(refVal_hasQnh);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasHumidity")))
    {
        bool refVal_hasHumidity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasHumidity")), refVal_hasHumidity );
        setHasHumidity(refVal_hasHumidity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasRain")))
    {
        bool refVal_hasRain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasRain")), refVal_hasRain );
        setHasRain(refVal_hasRain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("telemetryVersion")))
    {
        int32_t refVal_telemetryVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("telemetryVersion")), refVal_telemetryVersion );
        setTelemetryVersion(refVal_telemetryVersion);
    }
    return ok;
}

bool AvailableParametersModel::isHasWind() const
{
    return m_HasWind;
}

void AvailableParametersModel::setHasWind(bool value)
{
    m_HasWind = value;
    m_HasWindIsSet = true;
}

bool AvailableParametersModel::hasWindIsSet() const
{
    return m_HasWindIsSet;
}

void AvailableParametersModel::unsetHasWind()
{
    m_HasWindIsSet = false;
}
bool AvailableParametersModel::isHasQnh() const
{
    return m_HasQnh;
}

void AvailableParametersModel::setHasQnh(bool value)
{
    m_HasQnh = value;
    m_HasQnhIsSet = true;
}

bool AvailableParametersModel::hasQnhIsSet() const
{
    return m_HasQnhIsSet;
}

void AvailableParametersModel::unsetHasQnh()
{
    m_HasQnhIsSet = false;
}
bool AvailableParametersModel::isHasHumidity() const
{
    return m_HasHumidity;
}

void AvailableParametersModel::setHasHumidity(bool value)
{
    m_HasHumidity = value;
    m_HasHumidityIsSet = true;
}

bool AvailableParametersModel::hasHumidityIsSet() const
{
    return m_HasHumidityIsSet;
}

void AvailableParametersModel::unsetHasHumidity()
{
    m_HasHumidityIsSet = false;
}
bool AvailableParametersModel::isHasRain() const
{
    return m_HasRain;
}

void AvailableParametersModel::setHasRain(bool value)
{
    m_HasRain = value;
    m_HasRainIsSet = true;
}

bool AvailableParametersModel::hasRainIsSet() const
{
    return m_HasRainIsSet;
}

void AvailableParametersModel::unsetHasRain()
{
    m_HasRainIsSet = false;
}
int32_t AvailableParametersModel::getTelemetryVersion() const
{
    return m_TelemetryVersion;
}

void AvailableParametersModel::setTelemetryVersion(int32_t value)
{
    m_TelemetryVersion = value;
    m_TelemetryVersionIsSet = true;
}

bool AvailableParametersModel::telemetryVersionIsSet() const
{
    return m_TelemetryVersionIsSet;
}

void AvailableParametersModel::unsetTelemetryVersion()
{
    m_TelemetryVersionIsSet = false;
}
}
}
}
}


