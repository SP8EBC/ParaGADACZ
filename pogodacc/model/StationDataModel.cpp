/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StationDataModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




StationDataModel::StationDataModel()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Epoch = 0L;
    m_EpochIsSet = false;
    m_Station = utility::conversions::to_string_t("");
    m_StationIsSet = false;
    m_Temperature = 0.0f;
    m_TemperatureIsSet = false;
    m_Humidity = 0;
    m_HumidityIsSet = false;
    m_Pressure = 0.0f;
    m_PressureIsSet = false;
    m_Winddir = 0;
    m_WinddirIsSet = false;
    m_Windspeed = 0.0f;
    m_WindspeedIsSet = false;
    m_Windgusts = 0.0f;
    m_WindgustsIsSet = false;
    m_Tsource = utility::conversions::to_string_t("");
    m_TsourceIsSet = false;
    m_Wsource = utility::conversions::to_string_t("");
    m_WsourceIsSet = false;
    m_Psource = utility::conversions::to_string_t("");
    m_PsourceIsSet = false;
}

StationDataModel::~StationDataModel()
{
}

void StationDataModel::validate()
{
    // TODO: implement validation
}

web::json::value StationDataModel::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_EpochIsSet)
    {
        val[utility::conversions::to_string_t("epoch")] = ModelBase::toJson(m_Epoch);
    }
    if(m_StationIsSet)
    {
        val[utility::conversions::to_string_t("station")] = ModelBase::toJson(m_Station);
    }
    if(m_TemperatureIsSet)
    {
        val[utility::conversions::to_string_t("temperature")] = ModelBase::toJson(m_Temperature);
    }
    if(m_HumidityIsSet)
    {
        val[utility::conversions::to_string_t("humidity")] = ModelBase::toJson(m_Humidity);
    }
    if(m_PressureIsSet)
    {
        val[utility::conversions::to_string_t("pressure")] = ModelBase::toJson(m_Pressure);
    }
    if(m_WinddirIsSet)
    {
        val[utility::conversions::to_string_t("winddir")] = ModelBase::toJson(m_Winddir);
    }
    if(m_WindspeedIsSet)
    {
        val[utility::conversions::to_string_t("windspeed")] = ModelBase::toJson(m_Windspeed);
    }
    if(m_WindgustsIsSet)
    {
        val[utility::conversions::to_string_t("windgusts")] = ModelBase::toJson(m_Windgusts);
    }
    if(m_TsourceIsSet)
    {
        val[utility::conversions::to_string_t("tsource")] = ModelBase::toJson(m_Tsource);
    }
    if(m_WsourceIsSet)
    {
        val[utility::conversions::to_string_t("wsource")] = ModelBase::toJson(m_Wsource);
    }
    if(m_PsourceIsSet)
    {
        val[utility::conversions::to_string_t("psource")] = ModelBase::toJson(m_Psource);
    }

    return val;
}

bool StationDataModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("epoch")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("epoch"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_epoch;
            ok &= ModelBase::fromJson(fieldValue, refVal_epoch);
            setEpoch(refVal_epoch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("station")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("station"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_station;
            ok &= ModelBase::fromJson(fieldValue, refVal_station);
            setStation(refVal_station);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temperature")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temperature"));
        if(!fieldValue.is_null())
        {
            float refVal_temperature;
            ok &= ModelBase::fromJson(fieldValue, refVal_temperature);
            setTemperature(refVal_temperature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("humidity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("humidity"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_humidity;
            ok &= ModelBase::fromJson(fieldValue, refVal_humidity);
            setHumidity(refVal_humidity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure"));
        if(!fieldValue.is_null())
        {
            float refVal_pressure;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure);
            setPressure(refVal_pressure);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("winddir")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("winddir"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_winddir;
            ok &= ModelBase::fromJson(fieldValue, refVal_winddir);
            setWinddir(refVal_winddir);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("windspeed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("windspeed"));
        if(!fieldValue.is_null())
        {
            float refVal_windspeed;
            ok &= ModelBase::fromJson(fieldValue, refVal_windspeed);
            setWindspeed(refVal_windspeed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("windgusts")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("windgusts"));
        if(!fieldValue.is_null())
        {
            float refVal_windgusts;
            ok &= ModelBase::fromJson(fieldValue, refVal_windgusts);
            setWindgusts(refVal_windgusts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tsource")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tsource"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_tsource;
            ok &= ModelBase::fromJson(fieldValue, refVal_tsource);
            setTsource(refVal_tsource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wsource")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wsource"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wsource;
            ok &= ModelBase::fromJson(fieldValue, refVal_wsource);
            setWsource(refVal_wsource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("psource")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("psource"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_psource;
            ok &= ModelBase::fromJson(fieldValue, refVal_psource);
            setPsource(refVal_psource);
        }
    }
    return ok;
}

void StationDataModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_EpochIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("epoch"), m_Epoch));
    }
    if(m_StationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("station"), m_Station));
    }
    if(m_TemperatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temperature"), m_Temperature));
    }
    if(m_HumidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("humidity"), m_Humidity));
    }
    if(m_PressureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure"), m_Pressure));
    }
    if(m_WinddirIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("winddir"), m_Winddir));
    }
    if(m_WindspeedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("windspeed"), m_Windspeed));
    }
    if(m_WindgustsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("windgusts"), m_Windgusts));
    }
    if(m_TsourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tsource"), m_Tsource));
    }
    if(m_WsourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wsource"), m_Wsource));
    }
    if(m_PsourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("psource"), m_Psource));
    }
}

bool StationDataModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("epoch")))
    {
        int64_t refVal_epoch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("epoch")), refVal_epoch );
        setEpoch(refVal_epoch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("station")))
    {
        utility::string_t refVal_station;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("station")), refVal_station );
        setStation(refVal_station);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temperature")))
    {
        float refVal_temperature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temperature")), refVal_temperature );
        setTemperature(refVal_temperature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("humidity")))
    {
        int32_t refVal_humidity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("humidity")), refVal_humidity );
        setHumidity(refVal_humidity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure")))
    {
        float refVal_pressure;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure")), refVal_pressure );
        setPressure(refVal_pressure);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("winddir")))
    {
        int32_t refVal_winddir;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("winddir")), refVal_winddir );
        setWinddir(refVal_winddir);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("windspeed")))
    {
        float refVal_windspeed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("windspeed")), refVal_windspeed );
        setWindspeed(refVal_windspeed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("windgusts")))
    {
        float refVal_windgusts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("windgusts")), refVal_windgusts );
        setWindgusts(refVal_windgusts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tsource")))
    {
        utility::string_t refVal_tsource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tsource")), refVal_tsource );
        setTsource(refVal_tsource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wsource")))
    {
        utility::string_t refVal_wsource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wsource")), refVal_wsource );
        setWsource(refVal_wsource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("psource")))
    {
        utility::string_t refVal_psource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("psource")), refVal_psource );
        setPsource(refVal_psource);
    }
    return ok;
}

int32_t StationDataModel::getId() const
{
    return m_Id;
}

void StationDataModel::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool StationDataModel::idIsSet() const
{
    return m_IdIsSet;
}

void StationDataModel::unsetId()
{
    m_IdIsSet = false;
}
int64_t StationDataModel::getEpoch() const
{
    return m_Epoch;
}

void StationDataModel::setEpoch(int64_t value)
{
    m_Epoch = value;
    m_EpochIsSet = true;
}

bool StationDataModel::epochIsSet() const
{
    return m_EpochIsSet;
}

void StationDataModel::unsetEpoch()
{
    m_EpochIsSet = false;
}
utility::string_t StationDataModel::getStation() const
{
    return m_Station;
}

void StationDataModel::setStation(const utility::string_t& value)
{
    m_Station = value;
    m_StationIsSet = true;
}

bool StationDataModel::stationIsSet() const
{
    return m_StationIsSet;
}

void StationDataModel::unsetStation()
{
    m_StationIsSet = false;
}
float StationDataModel::getTemperature() const
{
    return m_Temperature;
}

void StationDataModel::setTemperature(float value)
{
    m_Temperature = value;
    m_TemperatureIsSet = true;
}

bool StationDataModel::temperatureIsSet() const
{
    return m_TemperatureIsSet;
}

void StationDataModel::unsetTemperature()
{
    m_TemperatureIsSet = false;
}
int32_t StationDataModel::getHumidity() const
{
    return m_Humidity;
}

void StationDataModel::setHumidity(int32_t value)
{
    m_Humidity = value;
    m_HumidityIsSet = true;
}

bool StationDataModel::humidityIsSet() const
{
    return m_HumidityIsSet;
}

void StationDataModel::unsetHumidity()
{
    m_HumidityIsSet = false;
}
float StationDataModel::getPressure() const
{
    return m_Pressure;
}

void StationDataModel::setPressure(float value)
{
    m_Pressure = value;
    m_PressureIsSet = true;
}

bool StationDataModel::pressureIsSet() const
{
    return m_PressureIsSet;
}

void StationDataModel::unsetPressure()
{
    m_PressureIsSet = false;
}
int32_t StationDataModel::getWinddir() const
{
    return m_Winddir;
}

void StationDataModel::setWinddir(int32_t value)
{
    m_Winddir = value;
    m_WinddirIsSet = true;
}

bool StationDataModel::winddirIsSet() const
{
    return m_WinddirIsSet;
}

void StationDataModel::unsetWinddir()
{
    m_WinddirIsSet = false;
}
float StationDataModel::getWindspeed() const
{
    return m_Windspeed;
}

void StationDataModel::setWindspeed(float value)
{
    m_Windspeed = value;
    m_WindspeedIsSet = true;
}

bool StationDataModel::windspeedIsSet() const
{
    return m_WindspeedIsSet;
}

void StationDataModel::unsetWindspeed()
{
    m_WindspeedIsSet = false;
}
float StationDataModel::getWindgusts() const
{
    return m_Windgusts;
}

void StationDataModel::setWindgusts(float value)
{
    m_Windgusts = value;
    m_WindgustsIsSet = true;
}

bool StationDataModel::windgustsIsSet() const
{
    return m_WindgustsIsSet;
}

void StationDataModel::unsetWindgusts()
{
    m_WindgustsIsSet = false;
}
utility::string_t StationDataModel::getTsource() const
{
    return m_Tsource;
}

void StationDataModel::setTsource(const utility::string_t& value)
{
    m_Tsource = value;
    m_TsourceIsSet = true;
}

bool StationDataModel::tsourceIsSet() const
{
    return m_TsourceIsSet;
}

void StationDataModel::unsetTsource()
{
    m_TsourceIsSet = false;
}
utility::string_t StationDataModel::getWsource() const
{
    return m_Wsource;
}

void StationDataModel::setWsource(const utility::string_t& value)
{
    m_Wsource = value;
    m_WsourceIsSet = true;
}

bool StationDataModel::wsourceIsSet() const
{
    return m_WsourceIsSet;
}

void StationDataModel::unsetWsource()
{
    m_WsourceIsSet = false;
}
utility::string_t StationDataModel::getPsource() const
{
    return m_Psource;
}

void StationDataModel::setPsource(const utility::string_t& value)
{
    m_Psource = value;
    m_PsourceIsSet = true;
}

bool StationDataModel::psourceIsSet() const
{
    return m_PsourceIsSet;
}

void StationDataModel::unsetPsource()
{
    m_PsourceIsSet = false;
}
}
}
}
}


