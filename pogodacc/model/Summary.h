/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Summary.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Summary_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Summary_H_


#include "../ModelBase.h"

#include "QualityFactor.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Summary
    : public ModelBase
{
public:
    Summary();
    virtual ~Summary();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Summary members

    /// <summary>
    /// 
    /// </summary>
    int32_t getLastTimestamp() const;
    bool lastTimestampIsSet() const;
    void unsetLast_timestamp();

    void setLastTimestamp(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNumberOfMeasurements() const;
    bool numberOfMeasurementsIsSet() const;
    void unsetNumber_of_measurements();

    void setNumberOfMeasurements(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    float getAvgTemperature() const;
    bool avgTemperatureIsSet() const;
    void unsetAvg_temperature();

    void setAvgTemperature(float value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<QualityFactor> getTemperatureQf() const;
    bool temperatureQfIsSet() const;
    void unsetTemperature_qf();

    void setTemperatureQf(const std::shared_ptr<QualityFactor>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getQnh() const;
    bool qnhIsSet() const;
    void unsetQnh();

    void setQnh(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<QualityFactor> getQnhQf() const;
    bool qnhQfIsSet() const;
    void unsetQnh_qf();

    void setQnhQf(const std::shared_ptr<QualityFactor>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getHumidity() const;
    bool humidityIsSet() const;
    void unsetHumidity();

    void setHumidity(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<QualityFactor> getHumidityQf() const;
    bool humidityQfIsSet() const;
    void unsetHumidity_qf();

    void setHumidityQf(const std::shared_ptr<QualityFactor>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDirection() const;
    bool directionIsSet() const;
    void unsetDirection();

    void setDirection(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    float getAverageSpeed() const;
    bool averageSpeedIsSet() const;
    void unsetAverage_speed();

    void setAverageSpeed(float value);

    /// <summary>
    /// 
    /// </summary>
    float getGusts() const;
    bool gustsIsSet() const;
    void unsetGusts();

    void setGusts(float value);

    /// <summary>
    /// 
    /// </summary>
    float getHourGusts() const;
    bool hourGustsIsSet() const;
    void unsetHour_gusts();

    void setHourGusts(float value);

    /// <summary>
    /// 
    /// </summary>
    float getHourMaxAverageSpeed() const;
    bool hourMaxAverageSpeedIsSet() const;
    void unsetHour_max_average_speed();

    void setHourMaxAverageSpeed(float value);

    /// <summary>
    /// 
    /// </summary>
    float getHourMinAverageSpeed() const;
    bool hourMinAverageSpeedIsSet() const;
    void unsetHour_min_average_speed();

    void setHourMinAverageSpeed(float value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<QualityFactor> getWindQf() const;
    bool windQfIsSet() const;
    void unsetWind_qf();

    void setWindQf(const std::shared_ptr<QualityFactor>& value);


protected:
    int32_t m_Last_timestamp;
    bool m_Last_timestampIsSet;
    int32_t m_Number_of_measurements;
    bool m_Number_of_measurementsIsSet;
    float m_Avg_temperature;
    bool m_Avg_temperatureIsSet;
    std::shared_ptr<QualityFactor> m_Temperature_qf;
    bool m_Temperature_qfIsSet;
    int32_t m_Qnh;
    bool m_QnhIsSet;
    std::shared_ptr<QualityFactor> m_Qnh_qf;
    bool m_Qnh_qfIsSet;
    int32_t m_Humidity;
    bool m_HumidityIsSet;
    std::shared_ptr<QualityFactor> m_Humidity_qf;
    bool m_Humidity_qfIsSet;
    int32_t m_Direction;
    bool m_DirectionIsSet;
    float m_Average_speed;
    bool m_Average_speedIsSet;
    float m_Gusts;
    bool m_GustsIsSet;
    float m_Hour_gusts;
    bool m_Hour_gustsIsSet;
    float m_Hour_max_average_speed;
    bool m_Hour_max_average_speedIsSet;
    float m_Hour_min_average_speed;
    bool m_Hour_min_average_speedIsSet;
    std::shared_ptr<QualityFactor> m_Wind_qf;
    bool m_Wind_qfIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Summary_H_ */
