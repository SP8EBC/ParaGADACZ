/**
 * Pogoda.cc
 * Backend API specification for pogoda.cc system
 *
 * The version of the OpenAPI document: 1.0.11
 * Contact: sp8ebc@interia.pl
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StationCurrentLocalTime.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




StationCurrentLocalTime::StationCurrentLocalTime()
{
    m_Year = 0;
    m_YearIsSet = false;
    m_Month = 0;
    m_MonthIsSet = false;
    m_Day = 0;
    m_DayIsSet = false;
    m_Hour = 0;
    m_HourIsSet = false;
    m_Minute = 0;
    m_MinuteIsSet = false;
    m_Second = 0;
    m_SecondIsSet = false;
    m_Timezone = utility::conversions::to_string_t("");
    m_TimezoneIsSet = false;
    m_Timezone_offset = 0;
    m_Timezone_offsetIsSet = false;
}

StationCurrentLocalTime::~StationCurrentLocalTime()
{
}

void StationCurrentLocalTime::validate()
{
    // TODO: implement validation
}

web::json::value StationCurrentLocalTime::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_YearIsSet)
    {
        val[utility::conversions::to_string_t("year")] = ModelBase::toJson(m_Year);
    }
    if(m_MonthIsSet)
    {
        val[utility::conversions::to_string_t("month")] = ModelBase::toJson(m_Month);
    }
    if(m_DayIsSet)
    {
        val[utility::conversions::to_string_t("day")] = ModelBase::toJson(m_Day);
    }
    if(m_HourIsSet)
    {
        val[utility::conversions::to_string_t("hour")] = ModelBase::toJson(m_Hour);
    }
    if(m_MinuteIsSet)
    {
        val[utility::conversions::to_string_t("minute")] = ModelBase::toJson(m_Minute);
    }
    if(m_SecondIsSet)
    {
        val[utility::conversions::to_string_t("second")] = ModelBase::toJson(m_Second);
    }
    if(m_TimezoneIsSet)
    {
        val[utility::conversions::to_string_t("timezone")] = ModelBase::toJson(m_Timezone);
    }
    if(m_Timezone_offsetIsSet)
    {
        val[utility::conversions::to_string_t("timezone_offset")] = ModelBase::toJson(m_Timezone_offset);
    }

    return val;
}

bool StationCurrentLocalTime::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("year")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("year"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_year;
            ok &= ModelBase::fromJson(fieldValue, refVal_year);
            setYear(refVal_year);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("month")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("month"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_month;
            ok &= ModelBase::fromJson(fieldValue, refVal_month);
            setMonth(refVal_month);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("day")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("day"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_day;
            ok &= ModelBase::fromJson(fieldValue, refVal_day);
            setDay(refVal_day);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hour")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hour"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_hour;
            ok &= ModelBase::fromJson(fieldValue, refVal_hour);
            setHour(refVal_hour);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("minute")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("minute"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_minute;
            ok &= ModelBase::fromJson(fieldValue, refVal_minute);
            setMinute(refVal_minute);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("second")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("second"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_second;
            ok &= ModelBase::fromJson(fieldValue, refVal_second);
            setSecond(refVal_second);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timezone")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timezone"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_timezone;
            ok &= ModelBase::fromJson(fieldValue, refVal_timezone);
            setTimezone(refVal_timezone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timezone_offset")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timezone_offset"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_timezone_offset;
            ok &= ModelBase::fromJson(fieldValue, refVal_timezone_offset);
            setTimezoneOffset(refVal_timezone_offset);
        }
    }
    return ok;
}

void StationCurrentLocalTime::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_YearIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("year"), m_Year));
    }
    if(m_MonthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("month"), m_Month));
    }
    if(m_DayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("day"), m_Day));
    }
    if(m_HourIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hour"), m_Hour));
    }
    if(m_MinuteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("minute"), m_Minute));
    }
    if(m_SecondIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("second"), m_Second));
    }
    if(m_TimezoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timezone"), m_Timezone));
    }
    if(m_Timezone_offsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timezone_offset"), m_Timezone_offset));
    }
}

bool StationCurrentLocalTime::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("year")))
    {
        int32_t refVal_year;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("year")), refVal_year );
        setYear(refVal_year);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("month")))
    {
        int32_t refVal_month;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("month")), refVal_month );
        setMonth(refVal_month);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("day")))
    {
        int32_t refVal_day;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("day")), refVal_day );
        setDay(refVal_day);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hour")))
    {
        int32_t refVal_hour;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hour")), refVal_hour );
        setHour(refVal_hour);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("minute")))
    {
        int32_t refVal_minute;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("minute")), refVal_minute );
        setMinute(refVal_minute);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("second")))
    {
        int32_t refVal_second;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("second")), refVal_second );
        setSecond(refVal_second);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timezone")))
    {
        utility::string_t refVal_timezone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timezone")), refVal_timezone );
        setTimezone(refVal_timezone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timezone_offset")))
    {
        int32_t refVal_timezone_offset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timezone_offset")), refVal_timezone_offset );
        setTimezoneOffset(refVal_timezone_offset);
    }
    return ok;
}

int32_t StationCurrentLocalTime::getYear() const
{
    return m_Year;
}

void StationCurrentLocalTime::setYear(int32_t value)
{
    m_Year = value;
    m_YearIsSet = true;
}

bool StationCurrentLocalTime::yearIsSet() const
{
    return m_YearIsSet;
}

void StationCurrentLocalTime::unsetYear()
{
    m_YearIsSet = false;
}
int32_t StationCurrentLocalTime::getMonth() const
{
    return m_Month;
}

void StationCurrentLocalTime::setMonth(int32_t value)
{
    m_Month = value;
    m_MonthIsSet = true;
}

bool StationCurrentLocalTime::monthIsSet() const
{
    return m_MonthIsSet;
}

void StationCurrentLocalTime::unsetMonth()
{
    m_MonthIsSet = false;
}
int32_t StationCurrentLocalTime::getDay() const
{
    return m_Day;
}

void StationCurrentLocalTime::setDay(int32_t value)
{
    m_Day = value;
    m_DayIsSet = true;
}

bool StationCurrentLocalTime::dayIsSet() const
{
    return m_DayIsSet;
}

void StationCurrentLocalTime::unsetDay()
{
    m_DayIsSet = false;
}
int32_t StationCurrentLocalTime::getHour() const
{
    return m_Hour;
}

void StationCurrentLocalTime::setHour(int32_t value)
{
    m_Hour = value;
    m_HourIsSet = true;
}

bool StationCurrentLocalTime::hourIsSet() const
{
    return m_HourIsSet;
}

void StationCurrentLocalTime::unsetHour()
{
    m_HourIsSet = false;
}
int32_t StationCurrentLocalTime::getMinute() const
{
    return m_Minute;
}

void StationCurrentLocalTime::setMinute(int32_t value)
{
    m_Minute = value;
    m_MinuteIsSet = true;
}

bool StationCurrentLocalTime::minuteIsSet() const
{
    return m_MinuteIsSet;
}

void StationCurrentLocalTime::unsetMinute()
{
    m_MinuteIsSet = false;
}
int32_t StationCurrentLocalTime::getSecond() const
{
    return m_Second;
}

void StationCurrentLocalTime::setSecond(int32_t value)
{
    m_Second = value;
    m_SecondIsSet = true;
}

bool StationCurrentLocalTime::secondIsSet() const
{
    return m_SecondIsSet;
}

void StationCurrentLocalTime::unsetSecond()
{
    m_SecondIsSet = false;
}
utility::string_t StationCurrentLocalTime::getTimezone() const
{
    return m_Timezone;
}

void StationCurrentLocalTime::setTimezone(const utility::string_t& value)
{
    m_Timezone = value;
    m_TimezoneIsSet = true;
}

bool StationCurrentLocalTime::timezoneIsSet() const
{
    return m_TimezoneIsSet;
}

void StationCurrentLocalTime::unsetTimezone()
{
    m_TimezoneIsSet = false;
}
int32_t StationCurrentLocalTime::getTimezoneOffset() const
{
    return m_Timezone_offset;
}

void StationCurrentLocalTime::setTimezoneOffset(int32_t value)
{
    m_Timezone_offset = value;
    m_Timezone_offsetIsSet = true;
}

bool StationCurrentLocalTime::timezoneOffsetIsSet() const
{
    return m_Timezone_offsetIsSet;
}

void StationCurrentLocalTime::unsetTimezone_offset()
{
    m_Timezone_offsetIsSet = false;
}
}
}
}
}


