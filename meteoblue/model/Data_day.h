/**
 * Meteoblue Package API - day & 3h
 * This yaml contains a description of basic_day and basic_3h from Package API provided by Meteoblue
 *
 * The version of the OpenAPI document: 1.0.11
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Data_day.h
 *
 * ....
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Data_day_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Data_day_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// ....
/// </summary>
class  Data_day
    : public ModelBase
{
public:
    Data_day();
    virtual ~Data_day();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Data_day members

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getTime();
    bool timeIsSet() const;
    void unsetTime();

    void setTime(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getPictocode();
    bool pictocodeIsSet() const;
    void unsetPictocode();

    void setPictocode(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getUvindex();
    bool uvindexIsSet() const;
    void unsetUvindex();

    void setUvindex(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getTemperatureMax();
    bool temperatureMaxIsSet() const;
    void unsetTemperature_max();

    void setTemperatureMax(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getTemperatureMin();
    bool temperatureMinIsSet() const;
    void unsetTemperature_min();

    void setTemperatureMin(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getTemperatureMean();
    bool temperatureMeanIsSet() const;
    void unsetTemperature_mean();

    void setTemperatureMean(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getFelttemperatureMax();
    bool felttemperatureMaxIsSet() const;
    void unsetFelttemperature_max();

    void setFelttemperatureMax(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getFelttemperatureMin();
    bool felttemperatureMinIsSet() const;
    void unsetFelttemperature_min();

    void setFelttemperatureMin(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getWinddirection();
    bool winddirectionIsSet() const;
    void unsetWinddirection();

    void setWinddirection(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getPrecipitationProbability();
    bool precipitationProbabilityIsSet() const;
    void unsetPrecipitation_probability();

    void setPrecipitationProbability(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getRainspot();
    bool rainspotIsSet() const;
    void unsetRainspot();

    void setRainspot(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getPredictabilityClass();
    bool predictabilityClassIsSet() const;
    void unsetPredictability_class();

    void setPredictabilityClass(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getPredictability();
    bool predictabilityIsSet() const;
    void unsetPredictability();

    void setPredictability(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getPrecipitation();
    bool precipitationIsSet() const;
    void unsetPrecipitation();

    void setPrecipitation(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getSnowfraction();
    bool snowfractionIsSet() const;
    void unsetSnowfraction();

    void setSnowfraction(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getSealevelpressureMax();
    bool sealevelpressureMaxIsSet() const;
    void unsetSealevelpressure_max();

    void setSealevelpressureMax(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getSealevelpressureMin();
    bool sealevelpressureMinIsSet() const;
    void unsetSealevelpressure_min();

    void setSealevelpressureMin(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getSealevelpressureMean();
    bool sealevelpressureMeanIsSet() const;
    void unsetSealevelpressure_mean();

    void setSealevelpressureMean(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getWindspeedMax();
    bool windspeedMaxIsSet() const;
    void unsetWindspeed_max();

    void setWindspeedMax(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getWindspeedMean();
    bool windspeedMeanIsSet() const;
    void unsetWindspeed_mean();

    void setWindspeedMean(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getWindspeedMin();
    bool windspeedMinIsSet() const;
    void unsetWindspeed_min();

    void setWindspeedMin(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getRelativehumidityMax();
    bool relativehumidityMaxIsSet() const;
    void unsetRelativehumidity_max();

    void setRelativehumidityMax(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getRelativehumidityMin();
    bool relativehumidityMinIsSet() const;
    void unsetRelativehumidity_min();

    void setRelativehumidityMin(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getRelativehumidityMean();
    bool relativehumidityMeanIsSet() const;
    void unsetRelativehumidity_mean();

    void setRelativehumidityMean(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getConvectivePrecipitation();
    bool convectivePrecipitationIsSet() const;
    void unsetConvective_precipitation();

    void setConvectivePrecipitation(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getPrecipitationHours();
    bool precipitationHoursIsSet() const;
    void unsetPrecipitation_hours();

    void setPrecipitationHours(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getHumiditygreater90Hours();
    bool humiditygreater90HoursIsSet() const;
    void unsetHumiditygreater90_hours();

    void setHumiditygreater90Hours(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getIndexto3hvaluesStart();
    bool indexto3hvaluesStartIsSet() const;
    void unsetIndexto3hvalues_start();

    void setIndexto3hvaluesStart(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getIndexto3hvaluesEnd();
    bool indexto3hvaluesEndIsSet() const;
    void unsetIndexto3hvalues_end();

    void setIndexto3hvaluesEnd(std::vector<int32_t> value);


protected:
    std::vector<int32_t> m_Time;
    bool m_TimeIsSet;
    std::vector<int32_t> m_Pictocode;
    bool m_PictocodeIsSet;
    std::vector<int32_t> m_Uvindex;
    bool m_UvindexIsSet;
    std::vector<float> m_Temperature_max;
    bool m_Temperature_maxIsSet;
    std::vector<float> m_Temperature_min;
    bool m_Temperature_minIsSet;
    std::vector<float> m_Temperature_mean;
    bool m_Temperature_meanIsSet;
    std::vector<float> m_Felttemperature_max;
    bool m_Felttemperature_maxIsSet;
    std::vector<float> m_Felttemperature_min;
    bool m_Felttemperature_minIsSet;
    std::vector<int32_t> m_Winddirection;
    bool m_WinddirectionIsSet;
    std::vector<int32_t> m_Precipitation_probability;
    bool m_Precipitation_probabilityIsSet;
    std::vector<utility::string_t> m_Rainspot;
    bool m_RainspotIsSet;
    std::vector<int32_t> m_Predictability_class;
    bool m_Predictability_classIsSet;
    std::vector<int32_t> m_Predictability;
    bool m_PredictabilityIsSet;
    std::vector<float> m_Precipitation;
    bool m_PrecipitationIsSet;
    std::vector<float> m_Snowfraction;
    bool m_SnowfractionIsSet;
    std::vector<int32_t> m_Sealevelpressure_max;
    bool m_Sealevelpressure_maxIsSet;
    std::vector<int32_t> m_Sealevelpressure_min;
    bool m_Sealevelpressure_minIsSet;
    std::vector<int32_t> m_Sealevelpressure_mean;
    bool m_Sealevelpressure_meanIsSet;
    std::vector<float> m_Windspeed_max;
    bool m_Windspeed_maxIsSet;
    std::vector<float> m_Windspeed_mean;
    bool m_Windspeed_meanIsSet;
    std::vector<float> m_Windspeed_min;
    bool m_Windspeed_minIsSet;
    std::vector<int32_t> m_Relativehumidity_max;
    bool m_Relativehumidity_maxIsSet;
    std::vector<int32_t> m_Relativehumidity_min;
    bool m_Relativehumidity_minIsSet;
    std::vector<int32_t> m_Relativehumidity_mean;
    bool m_Relativehumidity_meanIsSet;
    std::vector<float> m_Convective_precipitation;
    bool m_Convective_precipitationIsSet;
    std::vector<float> m_Precipitation_hours;
    bool m_Precipitation_hoursIsSet;
    std::vector<float> m_Humiditygreater90_hours;
    bool m_Humiditygreater90_hoursIsSet;
    std::vector<int32_t> m_Indexto3hvalues_start;
    bool m_Indexto3hvalues_startIsSet;
    std::vector<int32_t> m_Indexto3hvalues_end;
    bool m_Indexto3hvalues_endIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Data_day_H_ */
