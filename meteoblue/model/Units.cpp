/**
 * Meteoblue Package API - day & 3h
 * This yaml contains a description of basic_day and basic_3h from Package API provided by Meteoblue
 *
 * The version of the OpenAPI document: 1.0.11
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Units.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Units::Units()
{
    m_Time = utility::conversions::to_string_t("");
    m_TimeIsSet = false;
    m_Precipitation_probability = utility::conversions::to_string_t("");
    m_Precipitation_probabilityIsSet = false;
    m_Pressure = utility::conversions::to_string_t("");
    m_PressureIsSet = false;
    m_Relativehumidity = utility::conversions::to_string_t("");
    m_RelativehumidityIsSet = false;
    m_Co = utility::conversions::to_string_t("");
    m_CoIsSet = false;
    m_Precipitation = utility::conversions::to_string_t("");
    m_PrecipitationIsSet = false;
    m_Temperature = utility::conversions::to_string_t("");
    m_TemperatureIsSet = false;
    m_Windspeed = utility::conversions::to_string_t("");
    m_WindspeedIsSet = false;
    m_Winddirection = utility::conversions::to_string_t("");
    m_WinddirectionIsSet = false;
    m_Predictability = utility::conversions::to_string_t("");
    m_PredictabilityIsSet = false;
}

Units::~Units()
{
}

void Units::validate()
{
    // TODO: implement validation
}

web::json::value Units::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TimeIsSet)
    {
        val[utility::conversions::to_string_t("time")] = ModelBase::toJson(m_Time);
    }
    if(m_Precipitation_probabilityIsSet)
    {
        val[utility::conversions::to_string_t("precipitation_probability")] = ModelBase::toJson(m_Precipitation_probability);
    }
    if(m_PressureIsSet)
    {
        val[utility::conversions::to_string_t("pressure")] = ModelBase::toJson(m_Pressure);
    }
    if(m_RelativehumidityIsSet)
    {
        val[utility::conversions::to_string_t("relativehumidity")] = ModelBase::toJson(m_Relativehumidity);
    }
    if(m_CoIsSet)
    {
        val[utility::conversions::to_string_t("co")] = ModelBase::toJson(m_Co);
    }
    if(m_PrecipitationIsSet)
    {
        val[utility::conversions::to_string_t("precipitation")] = ModelBase::toJson(m_Precipitation);
    }
    if(m_TemperatureIsSet)
    {
        val[utility::conversions::to_string_t("temperature")] = ModelBase::toJson(m_Temperature);
    }
    if(m_WindspeedIsSet)
    {
        val[utility::conversions::to_string_t("windspeed")] = ModelBase::toJson(m_Windspeed);
    }
    if(m_WinddirectionIsSet)
    {
        val[utility::conversions::to_string_t("winddirection")] = ModelBase::toJson(m_Winddirection);
    }
    if(m_PredictabilityIsSet)
    {
        val[utility::conversions::to_string_t("predictability")] = ModelBase::toJson(m_Predictability);
    }

    return val;
}

bool Units::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_time);
            setTime(refVal_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("precipitation_probability")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("precipitation_probability"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_precipitation_probability;
            ok &= ModelBase::fromJson(fieldValue, refVal_precipitation_probability);
            setPrecipitationProbability(refVal_precipitation_probability);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pressure;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure);
            setPressure(refVal_pressure);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relativehumidity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relativehumidity"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relativehumidity;
            ok &= ModelBase::fromJson(fieldValue, refVal_relativehumidity);
            setRelativehumidity(refVal_relativehumidity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("co")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("co"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_co;
            ok &= ModelBase::fromJson(fieldValue, refVal_co);
            setCo(refVal_co);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("precipitation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("precipitation"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_precipitation;
            ok &= ModelBase::fromJson(fieldValue, refVal_precipitation);
            setPrecipitation(refVal_precipitation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temperature")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temperature"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temperature;
            ok &= ModelBase::fromJson(fieldValue, refVal_temperature);
            setTemperature(refVal_temperature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("windspeed")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("windspeed"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_windspeed;
            ok &= ModelBase::fromJson(fieldValue, refVal_windspeed);
            setWindspeed(refVal_windspeed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("winddirection")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("winddirection"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_winddirection;
            ok &= ModelBase::fromJson(fieldValue, refVal_winddirection);
            setWinddirection(refVal_winddirection);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("predictability")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("predictability"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_predictability;
            ok &= ModelBase::fromJson(fieldValue, refVal_predictability);
            setPredictability(refVal_predictability);
        }
    }
    return ok;
}

void Units::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("time"), m_Time));
    }
    if(m_Precipitation_probabilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("precipitation_probability"), m_Precipitation_probability));
    }
    if(m_PressureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure"), m_Pressure));
    }
    if(m_RelativehumidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relativehumidity"), m_Relativehumidity));
    }
    if(m_CoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("co"), m_Co));
    }
    if(m_PrecipitationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("precipitation"), m_Precipitation));
    }
    if(m_TemperatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temperature"), m_Temperature));
    }
    if(m_WindspeedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("windspeed"), m_Windspeed));
    }
    if(m_WinddirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("winddirection"), m_Winddirection));
    }
    if(m_PredictabilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("predictability"), m_Predictability));
    }
}

bool Units::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("time")))
    {
        utility::string_t refVal_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("time")), refVal_time );
        setTime(refVal_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("precipitation_probability")))
    {
        utility::string_t refVal_precipitation_probability;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("precipitation_probability")), refVal_precipitation_probability );
        setPrecipitationProbability(refVal_precipitation_probability);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure")))
    {
        utility::string_t refVal_pressure;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure")), refVal_pressure );
        setPressure(refVal_pressure);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relativehumidity")))
    {
        utility::string_t refVal_relativehumidity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relativehumidity")), refVal_relativehumidity );
        setRelativehumidity(refVal_relativehumidity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("co")))
    {
        utility::string_t refVal_co;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("co")), refVal_co );
        setCo(refVal_co);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("precipitation")))
    {
        utility::string_t refVal_precipitation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("precipitation")), refVal_precipitation );
        setPrecipitation(refVal_precipitation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temperature")))
    {
        utility::string_t refVal_temperature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temperature")), refVal_temperature );
        setTemperature(refVal_temperature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("windspeed")))
    {
        utility::string_t refVal_windspeed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("windspeed")), refVal_windspeed );
        setWindspeed(refVal_windspeed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("winddirection")))
    {
        utility::string_t refVal_winddirection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("winddirection")), refVal_winddirection );
        setWinddirection(refVal_winddirection);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("predictability")))
    {
        utility::string_t refVal_predictability;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("predictability")), refVal_predictability );
        setPredictability(refVal_predictability);
    }
    return ok;
}

utility::string_t Units::getTime() const
{
    return m_Time;
}

void Units::setTime(const utility::string_t& value)
{
    m_Time = value;
    m_TimeIsSet = true;
}

bool Units::timeIsSet() const
{
    return m_TimeIsSet;
}

void Units::unsetTime()
{
    m_TimeIsSet = false;
}
utility::string_t Units::getPrecipitationProbability() const
{
    return m_Precipitation_probability;
}

void Units::setPrecipitationProbability(const utility::string_t& value)
{
    m_Precipitation_probability = value;
    m_Precipitation_probabilityIsSet = true;
}

bool Units::precipitationProbabilityIsSet() const
{
    return m_Precipitation_probabilityIsSet;
}

void Units::unsetPrecipitation_probability()
{
    m_Precipitation_probabilityIsSet = false;
}
utility::string_t Units::getPressure() const
{
    return m_Pressure;
}

void Units::setPressure(const utility::string_t& value)
{
    m_Pressure = value;
    m_PressureIsSet = true;
}

bool Units::pressureIsSet() const
{
    return m_PressureIsSet;
}

void Units::unsetPressure()
{
    m_PressureIsSet = false;
}
utility::string_t Units::getRelativehumidity() const
{
    return m_Relativehumidity;
}

void Units::setRelativehumidity(const utility::string_t& value)
{
    m_Relativehumidity = value;
    m_RelativehumidityIsSet = true;
}

bool Units::relativehumidityIsSet() const
{
    return m_RelativehumidityIsSet;
}

void Units::unsetRelativehumidity()
{
    m_RelativehumidityIsSet = false;
}
utility::string_t Units::getCo() const
{
    return m_Co;
}

void Units::setCo(const utility::string_t& value)
{
    m_Co = value;
    m_CoIsSet = true;
}

bool Units::coIsSet() const
{
    return m_CoIsSet;
}

void Units::unsetCo()
{
    m_CoIsSet = false;
}
utility::string_t Units::getPrecipitation() const
{
    return m_Precipitation;
}

void Units::setPrecipitation(const utility::string_t& value)
{
    m_Precipitation = value;
    m_PrecipitationIsSet = true;
}

bool Units::precipitationIsSet() const
{
    return m_PrecipitationIsSet;
}

void Units::unsetPrecipitation()
{
    m_PrecipitationIsSet = false;
}
utility::string_t Units::getTemperature() const
{
    return m_Temperature;
}

void Units::setTemperature(const utility::string_t& value)
{
    m_Temperature = value;
    m_TemperatureIsSet = true;
}

bool Units::temperatureIsSet() const
{
    return m_TemperatureIsSet;
}

void Units::unsetTemperature()
{
    m_TemperatureIsSet = false;
}
utility::string_t Units::getWindspeed() const
{
    return m_Windspeed;
}

void Units::setWindspeed(const utility::string_t& value)
{
    m_Windspeed = value;
    m_WindspeedIsSet = true;
}

bool Units::windspeedIsSet() const
{
    return m_WindspeedIsSet;
}

void Units::unsetWindspeed()
{
    m_WindspeedIsSet = false;
}
utility::string_t Units::getWinddirection() const
{
    return m_Winddirection;
}

void Units::setWinddirection(const utility::string_t& value)
{
    m_Winddirection = value;
    m_WinddirectionIsSet = true;
}

bool Units::winddirectionIsSet() const
{
    return m_WinddirectionIsSet;
}

void Units::unsetWinddirection()
{
    m_WinddirectionIsSet = false;
}
utility::string_t Units::getPredictability() const
{
    return m_Predictability;
}

void Units::setPredictability(const utility::string_t& value)
{
    m_Predictability = value;
    m_PredictabilityIsSet = true;
}

bool Units::predictabilityIsSet() const
{
    return m_PredictabilityIsSet;
}

void Units::unsetPredictability()
{
    m_PredictabilityIsSet = false;
}
}
}
}
}


