/**
 * Meteoblue Package API - day & 3h
 * This yaml contains a description of basic_day and basic_3h from Package API provided by Meteoblue
 *
 * The version of the OpenAPI document: 1.0.11
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Data_3h.h
 *
 * Forecast data
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Data_3h_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Data_3h_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Forecast data
/// </summary>
class  Data_3h
    : public ModelBase
{
public:
    Data_3h();
    virtual ~Data_3h();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Data_3h members

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getRainspot();
    bool rainspotIsSet() const;
    void unsetRainspot();

    void setRainspot(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getTime();
    bool timeIsSet() const;
    void unsetTime();

    void setTime(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getPictocode();
    bool pictocodeIsSet() const;
    void unsetPictocode();

    void setPictocode(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getPrecipitation();
    bool precipitationIsSet() const;
    void unsetPrecipitation();

    void setPrecipitation(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getSnowfraction();
    bool snowfractionIsSet() const;
    void unsetSnowfraction();

    void setSnowfraction(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getPrecipitationProbability();
    bool precipitationProbabilityIsSet() const;
    void unsetPrecipitation_probability();

    void setPrecipitationProbability(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getTemperature();
    bool temperatureIsSet() const;
    void unsetTemperature();

    void setTemperature(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getFelttemperature();
    bool felttemperatureIsSet() const;
    void unsetFelttemperature();

    void setFelttemperature(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getWindspeed();
    bool windspeedIsSet() const;
    void unsetWindspeed();

    void setWindspeed(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getWinddirection();
    bool winddirectionIsSet() const;
    void unsetWinddirection();

    void setWinddirection(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getRelativehumidity();
    bool relativehumidityIsSet() const;
    void unsetRelativehumidity();

    void setRelativehumidity(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<float>& getSealevelpressure();
    bool sealevelpressureIsSet() const;
    void unsetSealevelpressure();

    void setSealevelpressure(std::vector<float> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getConvectivePrecipitation();
    bool convectivePrecipitationIsSet() const;
    void unsetConvective_precipitation();

    void setConvectivePrecipitation(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getIsdaylight();
    bool isdaylightIsSet() const;
    void unsetIsdaylight();

    void setIsdaylight(std::vector<int32_t> value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<int32_t>& getUvindex();
    bool uvindexIsSet() const;
    void unsetUvindex();

    void setUvindex(std::vector<int32_t> value);


protected:
    std::vector<utility::string_t> m_Rainspot;
    bool m_RainspotIsSet;
    std::vector<int32_t> m_Time;
    bool m_TimeIsSet;
    std::vector<int32_t> m_Pictocode;
    bool m_PictocodeIsSet;
    std::vector<float> m_Precipitation;
    bool m_PrecipitationIsSet;
    std::vector<float> m_Snowfraction;
    bool m_SnowfractionIsSet;
    std::vector<int32_t> m_Precipitation_probability;
    bool m_Precipitation_probabilityIsSet;
    std::vector<float> m_Temperature;
    bool m_TemperatureIsSet;
    std::vector<float> m_Felttemperature;
    bool m_FelttemperatureIsSet;
    std::vector<float> m_Windspeed;
    bool m_WindspeedIsSet;
    std::vector<int32_t> m_Winddirection;
    bool m_WinddirectionIsSet;
    std::vector<int32_t> m_Relativehumidity;
    bool m_RelativehumidityIsSet;
    std::vector<float> m_Sealevelpressure;
    bool m_SealevelpressureIsSet;
    std::vector<int32_t> m_Convective_precipitation;
    bool m_Convective_precipitationIsSet;
    std::vector<int32_t> m_Isdaylight;
    bool m_IsdaylightIsSet;
    std::vector<int32_t> m_Uvindex;
    bool m_UvindexIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Data_3h_H_ */
