/**
 * Meteoblue Package API - day & 3h
 * This yaml contains a description of basic_day and basic_3h from Package API provided by Meteoblue
 *
 * The version of the OpenAPI document: 1.0.11
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Inline_response_200.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Inline_response_200::Inline_response_200()
{
    m_MetadataIsSet = false;
    m_UnitsIsSet = false;
    m_Data_3hIsSet = false;
    m_Data_dayIsSet = false;
}

Inline_response_200::~Inline_response_200()
{
}

void Inline_response_200::validate()
{
    // TODO: implement validation
}

web::json::value Inline_response_200::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MetadataIsSet)
    {
        val[utility::conversions::to_string_t("metadata")] = ModelBase::toJson(m_Metadata);
    }
    if(m_UnitsIsSet)
    {
        val[utility::conversions::to_string_t("units")] = ModelBase::toJson(m_Units);
    }
    if(m_Data_3hIsSet)
    {
        val[utility::conversions::to_string_t("data_3h")] = ModelBase::toJson(m_Data_3h);
    }
    if(m_Data_dayIsSet)
    {
        val[utility::conversions::to_string_t("data_day")] = ModelBase::toJson(m_Data_day);
    }

    return val;
}

bool Inline_response_200::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("metadata")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("metadata"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Metadata> refVal_metadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_metadata);
            setMetadata(refVal_metadata);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("units")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("units"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Units> refVal_units;
            ok &= ModelBase::fromJson(fieldValue, refVal_units);
            setUnits(refVal_units);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("data_3h")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("data_3h"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Data_3h> refVal_data_3h;
            ok &= ModelBase::fromJson(fieldValue, refVal_data_3h);
            setData3h(refVal_data_3h);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("data_day")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("data_day"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Data_day> refVal_data_day;
            ok &= ModelBase::fromJson(fieldValue, refVal_data_day);
            setDataDay(refVal_data_day);
        }
    }
    return ok;
}

void Inline_response_200::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("metadata"), m_Metadata));
    }
    if(m_UnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("units"), m_Units));
    }
    if(m_Data_3hIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("data_3h"), m_Data_3h));
    }
    if(m_Data_dayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("data_day"), m_Data_day));
    }
}

bool Inline_response_200::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("metadata")))
    {
        std::shared_ptr<Metadata> refVal_metadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("metadata")), refVal_metadata );
        setMetadata(refVal_metadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("units")))
    {
        std::shared_ptr<Units> refVal_units;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("units")), refVal_units );
        setUnits(refVal_units);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("data_3h")))
    {
        std::shared_ptr<Data_3h> refVal_data_3h;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("data_3h")), refVal_data_3h );
        setData3h(refVal_data_3h);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("data_day")))
    {
        std::shared_ptr<Data_day> refVal_data_day;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("data_day")), refVal_data_day );
        setDataDay(refVal_data_day);
    }
    return ok;
}

std::shared_ptr<Metadata> Inline_response_200::getMetadata() const
{
    return m_Metadata;
}

void Inline_response_200::setMetadata(const std::shared_ptr<Metadata>& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}

bool Inline_response_200::metadataIsSet() const
{
    return m_MetadataIsSet;
}

void Inline_response_200::unsetMetadata()
{
    m_MetadataIsSet = false;
}
std::shared_ptr<Units> Inline_response_200::getUnits() const
{
    return m_Units;
}

void Inline_response_200::setUnits(const std::shared_ptr<Units>& value)
{
    m_Units = value;
    m_UnitsIsSet = true;
}

bool Inline_response_200::unitsIsSet() const
{
    return m_UnitsIsSet;
}

void Inline_response_200::unsetUnits()
{
    m_UnitsIsSet = false;
}
std::shared_ptr<Data_3h> Inline_response_200::getData3h() const
{
    return m_Data_3h;
}

void Inline_response_200::setData3h(const std::shared_ptr<Data_3h>& value)
{
    m_Data_3h = value;
    m_Data_3hIsSet = true;
}

bool Inline_response_200::data3hIsSet() const
{
    return m_Data_3hIsSet;
}

void Inline_response_200::unsetData_3h()
{
    m_Data_3hIsSet = false;
}
std::shared_ptr<Data_day> Inline_response_200::getDataDay() const
{
    return m_Data_day;
}

void Inline_response_200::setDataDay(const std::shared_ptr<Data_day>& value)
{
    m_Data_day = value;
    m_Data_dayIsSet = true;
}

bool Inline_response_200::dataDayIsSet() const
{
    return m_Data_dayIsSet;
}

void Inline_response_200::unsetData_day()
{
    m_Data_dayIsSet = false;
}
}
}
}
}


