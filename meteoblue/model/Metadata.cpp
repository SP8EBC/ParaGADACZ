/**
 * Meteoblue Package API - day & 3h
 * This yaml contains a description of basic_day and basic_3h from Package API provided by Meteoblue
 *
 * The version of the OpenAPI document: 1.0.11
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Metadata.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Metadata::Metadata()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Latitude = 0.0f;
    m_LatitudeIsSet = false;
    m_Longitude = 0.0f;
    m_LongitudeIsSet = false;
    m_Height = 0;
    m_HeightIsSet = false;
    m_Timezone_abbrevation = utility::conversions::to_string_t("");
    m_Timezone_abbrevationIsSet = false;
    m_Utc_timeoffset = 0.0f;
    m_Utc_timeoffsetIsSet = false;
    m_Modelrun_utc = 0;
    m_Modelrun_utcIsSet = false;
    m_Modelrun_updatetime_utc = 0;
    m_Modelrun_updatetime_utcIsSet = false;
}

Metadata::~Metadata()
{
}

void Metadata::validate()
{
    // TODO: implement validation
}

web::json::value Metadata::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t("latitude")] = ModelBase::toJson(m_Latitude);
    }
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t("longitude")] = ModelBase::toJson(m_Longitude);
    }
    if(m_HeightIsSet)
    {
        val[utility::conversions::to_string_t("height")] = ModelBase::toJson(m_Height);
    }
    if(m_Timezone_abbrevationIsSet)
    {
        val[utility::conversions::to_string_t("timezone_abbrevation")] = ModelBase::toJson(m_Timezone_abbrevation);
    }
    if(m_Utc_timeoffsetIsSet)
    {
        val[utility::conversions::to_string_t("utc_timeoffset")] = ModelBase::toJson(m_Utc_timeoffset);
    }
    if(m_Modelrun_utcIsSet)
    {
        val[utility::conversions::to_string_t("modelrun_utc")] = ModelBase::toJson(m_Modelrun_utc);
    }
    if(m_Modelrun_updatetime_utcIsSet)
    {
        val[utility::conversions::to_string_t("modelrun_updatetime_utc")] = ModelBase::toJson(m_Modelrun_updatetime_utc);
    }

    return val;
}

bool Metadata::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("latitude")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("latitude"));
        if(!fieldValue.is_null())
        {
            float refVal_latitude;
            ok &= ModelBase::fromJson(fieldValue, refVal_latitude);
            setLatitude(refVal_latitude);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("longitude")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("longitude"));
        if(!fieldValue.is_null())
        {
            float refVal_longitude;
            ok &= ModelBase::fromJson(fieldValue, refVal_longitude);
            setLongitude(refVal_longitude);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("height")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("height"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_height;
            ok &= ModelBase::fromJson(fieldValue, refVal_height);
            setHeight(refVal_height);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timezone_abbrevation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timezone_abbrevation"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_timezone_abbrevation;
            ok &= ModelBase::fromJson(fieldValue, refVal_timezone_abbrevation);
            setTimezoneAbbrevation(refVal_timezone_abbrevation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("utc_timeoffset")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("utc_timeoffset"));
        if(!fieldValue.is_null())
        {
            float refVal_utc_timeoffset;
            ok &= ModelBase::fromJson(fieldValue, refVal_utc_timeoffset);
            setUtcTimeoffset(refVal_utc_timeoffset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modelrun_utc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modelrun_utc"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_modelrun_utc;
            ok &= ModelBase::fromJson(fieldValue, refVal_modelrun_utc);
            setModelrunUtc(refVal_modelrun_utc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("modelrun_updatetime_utc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("modelrun_updatetime_utc"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_modelrun_updatetime_utc;
            ok &= ModelBase::fromJson(fieldValue, refVal_modelrun_updatetime_utc);
            setModelrunUpdatetimeUtc(refVal_modelrun_updatetime_utc);
        }
    }
    return ok;
}

void Metadata::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latitude"), m_Latitude));
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("longitude"), m_Longitude));
    }
    if(m_HeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("height"), m_Height));
    }
    if(m_Timezone_abbrevationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timezone_abbrevation"), m_Timezone_abbrevation));
    }
    if(m_Utc_timeoffsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("utc_timeoffset"), m_Utc_timeoffset));
    }
    if(m_Modelrun_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modelrun_utc"), m_Modelrun_utc));
    }
    if(m_Modelrun_updatetime_utcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("modelrun_updatetime_utc"), m_Modelrun_updatetime_utc));
    }
}

bool Metadata::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("latitude")))
    {
        float refVal_latitude;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("latitude")), refVal_latitude );
        setLatitude(refVal_latitude);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("longitude")))
    {
        float refVal_longitude;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("longitude")), refVal_longitude );
        setLongitude(refVal_longitude);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("height")))
    {
        int32_t refVal_height;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("height")), refVal_height );
        setHeight(refVal_height);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timezone_abbrevation")))
    {
        utility::string_t refVal_timezone_abbrevation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timezone_abbrevation")), refVal_timezone_abbrevation );
        setTimezoneAbbrevation(refVal_timezone_abbrevation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("utc_timeoffset")))
    {
        float refVal_utc_timeoffset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("utc_timeoffset")), refVal_utc_timeoffset );
        setUtcTimeoffset(refVal_utc_timeoffset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modelrun_utc")))
    {
        int32_t refVal_modelrun_utc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modelrun_utc")), refVal_modelrun_utc );
        setModelrunUtc(refVal_modelrun_utc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("modelrun_updatetime_utc")))
    {
        int32_t refVal_modelrun_updatetime_utc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("modelrun_updatetime_utc")), refVal_modelrun_updatetime_utc );
        setModelrunUpdatetimeUtc(refVal_modelrun_updatetime_utc);
    }
    return ok;
}

utility::string_t Metadata::getName() const
{
    return m_Name;
}

void Metadata::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Metadata::nameIsSet() const
{
    return m_NameIsSet;
}

void Metadata::unsetName()
{
    m_NameIsSet = false;
}
float Metadata::getLatitude() const
{
    return m_Latitude;
}

void Metadata::setLatitude(float value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}

bool Metadata::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void Metadata::unsetLatitude()
{
    m_LatitudeIsSet = false;
}
float Metadata::getLongitude() const
{
    return m_Longitude;
}

void Metadata::setLongitude(float value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}

bool Metadata::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void Metadata::unsetLongitude()
{
    m_LongitudeIsSet = false;
}
int32_t Metadata::getHeight() const
{
    return m_Height;
}

void Metadata::setHeight(int32_t value)
{
    m_Height = value;
    m_HeightIsSet = true;
}

bool Metadata::heightIsSet() const
{
    return m_HeightIsSet;
}

void Metadata::unsetHeight()
{
    m_HeightIsSet = false;
}
utility::string_t Metadata::getTimezoneAbbrevation() const
{
    return m_Timezone_abbrevation;
}

void Metadata::setTimezoneAbbrevation(const utility::string_t& value)
{
    m_Timezone_abbrevation = value;
    m_Timezone_abbrevationIsSet = true;
}

bool Metadata::timezoneAbbrevationIsSet() const
{
    return m_Timezone_abbrevationIsSet;
}

void Metadata::unsetTimezone_abbrevation()
{
    m_Timezone_abbrevationIsSet = false;
}
float Metadata::getUtcTimeoffset() const
{
    return m_Utc_timeoffset;
}

void Metadata::setUtcTimeoffset(float value)
{
    m_Utc_timeoffset = value;
    m_Utc_timeoffsetIsSet = true;
}

bool Metadata::utcTimeoffsetIsSet() const
{
    return m_Utc_timeoffsetIsSet;
}

void Metadata::unsetUtc_timeoffset()
{
    m_Utc_timeoffsetIsSet = false;
}
int32_t Metadata::getModelrunUtc() const
{
    return m_Modelrun_utc;
}

void Metadata::setModelrunUtc(int32_t value)
{
    m_Modelrun_utc = value;
    m_Modelrun_utcIsSet = true;
}

bool Metadata::modelrunUtcIsSet() const
{
    return m_Modelrun_utcIsSet;
}

void Metadata::unsetModelrun_utc()
{
    m_Modelrun_utcIsSet = false;
}
int32_t Metadata::getModelrunUpdatetimeUtc() const
{
    return m_Modelrun_updatetime_utc;
}

void Metadata::setModelrunUpdatetimeUtc(int32_t value)
{
    m_Modelrun_updatetime_utc = value;
    m_Modelrun_updatetime_utcIsSet = true;
}

bool Metadata::modelrunUpdatetimeUtcIsSet() const
{
    return m_Modelrun_updatetime_utcIsSet;
}

void Metadata::unsetModelrun_updatetime_utc()
{
    m_Modelrun_updatetime_utcIsSet = false;
}
}
}
}
}


