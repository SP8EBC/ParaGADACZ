/**
 * Meteoblue Package API - day & 3h
 * This yaml contains a description of basic_day and basic_3h from Package API provided by Meteoblue
 *
 * The version of the OpenAPI document: 1.0.11
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Data_day.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Data_day::Data_day()
{
    m_TimeIsSet = false;
    m_PictocodeIsSet = false;
    m_UvindexIsSet = false;
    m_Temperature_maxIsSet = false;
    m_Temperature_minIsSet = false;
    m_Temperature_meanIsSet = false;
    m_Felttemperature_maxIsSet = false;
    m_Felttemperature_minIsSet = false;
    m_WinddirectionIsSet = false;
    m_Precipitation_probabilityIsSet = false;
    m_RainspotIsSet = false;
    m_Predictability_classIsSet = false;
    m_PredictabilityIsSet = false;
    m_PrecipitationIsSet = false;
    m_SnowfractionIsSet = false;
    m_Sealevelpressure_maxIsSet = false;
    m_Sealevelpressure_minIsSet = false;
    m_Sealevelpressure_meanIsSet = false;
    m_Windspeed_maxIsSet = false;
    m_Windspeed_meanIsSet = false;
    m_Windspeed_minIsSet = false;
    m_Relativehumidity_maxIsSet = false;
    m_Relativehumidity_minIsSet = false;
    m_Relativehumidity_meanIsSet = false;
    m_Convective_precipitationIsSet = false;
    m_Precipitation_hoursIsSet = false;
    m_Humiditygreater90_hoursIsSet = false;
    m_Indexto3hvalues_startIsSet = false;
    m_Indexto3hvalues_endIsSet = false;
}

Data_day::~Data_day()
{
}

void Data_day::validate()
{
    // TODO: implement validation
}

web::json::value Data_day::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TimeIsSet)
    {
        val[utility::conversions::to_string_t("time")] = ModelBase::toJson(m_Time);
    }
    if(m_PictocodeIsSet)
    {
        val[utility::conversions::to_string_t("pictocode")] = ModelBase::toJson(m_Pictocode);
    }
    if(m_UvindexIsSet)
    {
        val[utility::conversions::to_string_t("uvindex")] = ModelBase::toJson(m_Uvindex);
    }
    if(m_Temperature_maxIsSet)
    {
        val[utility::conversions::to_string_t("temperature_max")] = ModelBase::toJson(m_Temperature_max);
    }
    if(m_Temperature_minIsSet)
    {
        val[utility::conversions::to_string_t("temperature_min")] = ModelBase::toJson(m_Temperature_min);
    }
    if(m_Temperature_meanIsSet)
    {
        val[utility::conversions::to_string_t("temperature_mean")] = ModelBase::toJson(m_Temperature_mean);
    }
    if(m_Felttemperature_maxIsSet)
    {
        val[utility::conversions::to_string_t("felttemperature_max")] = ModelBase::toJson(m_Felttemperature_max);
    }
    if(m_Felttemperature_minIsSet)
    {
        val[utility::conversions::to_string_t("felttemperature_min")] = ModelBase::toJson(m_Felttemperature_min);
    }
    if(m_WinddirectionIsSet)
    {
        val[utility::conversions::to_string_t("winddirection")] = ModelBase::toJson(m_Winddirection);
    }
    if(m_Precipitation_probabilityIsSet)
    {
        val[utility::conversions::to_string_t("precipitation_probability")] = ModelBase::toJson(m_Precipitation_probability);
    }
    if(m_RainspotIsSet)
    {
        val[utility::conversions::to_string_t("rainspot")] = ModelBase::toJson(m_Rainspot);
    }
    if(m_Predictability_classIsSet)
    {
        val[utility::conversions::to_string_t("predictability_class")] = ModelBase::toJson(m_Predictability_class);
    }
    if(m_PredictabilityIsSet)
    {
        val[utility::conversions::to_string_t("predictability")] = ModelBase::toJson(m_Predictability);
    }
    if(m_PrecipitationIsSet)
    {
        val[utility::conversions::to_string_t("precipitation")] = ModelBase::toJson(m_Precipitation);
    }
    if(m_SnowfractionIsSet)
    {
        val[utility::conversions::to_string_t("snowfraction")] = ModelBase::toJson(m_Snowfraction);
    }
    if(m_Sealevelpressure_maxIsSet)
    {
        val[utility::conversions::to_string_t("sealevelpressure_max")] = ModelBase::toJson(m_Sealevelpressure_max);
    }
    if(m_Sealevelpressure_minIsSet)
    {
        val[utility::conversions::to_string_t("sealevelpressure_min")] = ModelBase::toJson(m_Sealevelpressure_min);
    }
    if(m_Sealevelpressure_meanIsSet)
    {
        val[utility::conversions::to_string_t("sealevelpressure_mean")] = ModelBase::toJson(m_Sealevelpressure_mean);
    }
    if(m_Windspeed_maxIsSet)
    {
        val[utility::conversions::to_string_t("windspeed_max")] = ModelBase::toJson(m_Windspeed_max);
    }
    if(m_Windspeed_meanIsSet)
    {
        val[utility::conversions::to_string_t("windspeed_mean")] = ModelBase::toJson(m_Windspeed_mean);
    }
    if(m_Windspeed_minIsSet)
    {
        val[utility::conversions::to_string_t("windspeed_min")] = ModelBase::toJson(m_Windspeed_min);
    }
    if(m_Relativehumidity_maxIsSet)
    {
        val[utility::conversions::to_string_t("relativehumidity_max")] = ModelBase::toJson(m_Relativehumidity_max);
    }
    if(m_Relativehumidity_minIsSet)
    {
        val[utility::conversions::to_string_t("relativehumidity_min")] = ModelBase::toJson(m_Relativehumidity_min);
    }
    if(m_Relativehumidity_meanIsSet)
    {
        val[utility::conversions::to_string_t("relativehumidity_mean")] = ModelBase::toJson(m_Relativehumidity_mean);
    }
    if(m_Convective_precipitationIsSet)
    {
        val[utility::conversions::to_string_t("convective_precipitation")] = ModelBase::toJson(m_Convective_precipitation);
    }
    if(m_Precipitation_hoursIsSet)
    {
        val[utility::conversions::to_string_t("precipitation_hours")] = ModelBase::toJson(m_Precipitation_hours);
    }
    if(m_Humiditygreater90_hoursIsSet)
    {
        val[utility::conversions::to_string_t("humiditygreater90_hours")] = ModelBase::toJson(m_Humiditygreater90_hours);
    }
    if(m_Indexto3hvalues_startIsSet)
    {
        val[utility::conversions::to_string_t("indexto3hvalues_start")] = ModelBase::toJson(m_Indexto3hvalues_start);
    }
    if(m_Indexto3hvalues_endIsSet)
    {
        val[utility::conversions::to_string_t("indexto3hvalues_end")] = ModelBase::toJson(m_Indexto3hvalues_end);
    }

    return val;
}

bool Data_day::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("time"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_time);
            setTime(refVal_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pictocode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pictocode"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_pictocode;
            ok &= ModelBase::fromJson(fieldValue, refVal_pictocode);
            setPictocode(refVal_pictocode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("uvindex")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("uvindex"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_uvindex;
            ok &= ModelBase::fromJson(fieldValue, refVal_uvindex);
            setUvindex(refVal_uvindex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temperature_max")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temperature_max"));
        if(!fieldValue.is_null())
        {
            std::vector<float> refVal_temperature_max;
            ok &= ModelBase::fromJson(fieldValue, refVal_temperature_max);
            setTemperatureMax(refVal_temperature_max);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temperature_min")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temperature_min"));
        if(!fieldValue.is_null())
        {
            std::vector<float> refVal_temperature_min;
            ok &= ModelBase::fromJson(fieldValue, refVal_temperature_min);
            setTemperatureMin(refVal_temperature_min);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temperature_mean")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temperature_mean"));
        if(!fieldValue.is_null())
        {
            std::vector<float> refVal_temperature_mean;
            ok &= ModelBase::fromJson(fieldValue, refVal_temperature_mean);
            setTemperatureMean(refVal_temperature_mean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("felttemperature_max")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("felttemperature_max"));
        if(!fieldValue.is_null())
        {
            std::vector<float> refVal_felttemperature_max;
            ok &= ModelBase::fromJson(fieldValue, refVal_felttemperature_max);
            setFelttemperatureMax(refVal_felttemperature_max);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("felttemperature_min")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("felttemperature_min"));
        if(!fieldValue.is_null())
        {
            std::vector<float> refVal_felttemperature_min;
            ok &= ModelBase::fromJson(fieldValue, refVal_felttemperature_min);
            setFelttemperatureMin(refVal_felttemperature_min);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("winddirection")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("winddirection"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_winddirection;
            ok &= ModelBase::fromJson(fieldValue, refVal_winddirection);
            setWinddirection(refVal_winddirection);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("precipitation_probability")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("precipitation_probability"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_precipitation_probability;
            ok &= ModelBase::fromJson(fieldValue, refVal_precipitation_probability);
            setPrecipitationProbability(refVal_precipitation_probability);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rainspot")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rainspot"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_rainspot;
            ok &= ModelBase::fromJson(fieldValue, refVal_rainspot);
            setRainspot(refVal_rainspot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("predictability_class")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("predictability_class"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_predictability_class;
            ok &= ModelBase::fromJson(fieldValue, refVal_predictability_class);
            setPredictabilityClass(refVal_predictability_class);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("predictability")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("predictability"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_predictability;
            ok &= ModelBase::fromJson(fieldValue, refVal_predictability);
            setPredictability(refVal_predictability);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("precipitation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("precipitation"));
        if(!fieldValue.is_null())
        {
            std::vector<float> refVal_precipitation;
            ok &= ModelBase::fromJson(fieldValue, refVal_precipitation);
            setPrecipitation(refVal_precipitation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("snowfraction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("snowfraction"));
        if(!fieldValue.is_null())
        {
            std::vector<float> refVal_snowfraction;
            ok &= ModelBase::fromJson(fieldValue, refVal_snowfraction);
            setSnowfraction(refVal_snowfraction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sealevelpressure_max")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sealevelpressure_max"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_sealevelpressure_max;
            ok &= ModelBase::fromJson(fieldValue, refVal_sealevelpressure_max);
            setSealevelpressureMax(refVal_sealevelpressure_max);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sealevelpressure_min")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sealevelpressure_min"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_sealevelpressure_min;
            ok &= ModelBase::fromJson(fieldValue, refVal_sealevelpressure_min);
            setSealevelpressureMin(refVal_sealevelpressure_min);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sealevelpressure_mean")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sealevelpressure_mean"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_sealevelpressure_mean;
            ok &= ModelBase::fromJson(fieldValue, refVal_sealevelpressure_mean);
            setSealevelpressureMean(refVal_sealevelpressure_mean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("windspeed_max")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("windspeed_max"));
        if(!fieldValue.is_null())
        {
            std::vector<float> refVal_windspeed_max;
            ok &= ModelBase::fromJson(fieldValue, refVal_windspeed_max);
            setWindspeedMax(refVal_windspeed_max);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("windspeed_mean")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("windspeed_mean"));
        if(!fieldValue.is_null())
        {
            std::vector<float> refVal_windspeed_mean;
            ok &= ModelBase::fromJson(fieldValue, refVal_windspeed_mean);
            setWindspeedMean(refVal_windspeed_mean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("windspeed_min")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("windspeed_min"));
        if(!fieldValue.is_null())
        {
            std::vector<float> refVal_windspeed_min;
            ok &= ModelBase::fromJson(fieldValue, refVal_windspeed_min);
            setWindspeedMin(refVal_windspeed_min);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relativehumidity_max")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relativehumidity_max"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_relativehumidity_max;
            ok &= ModelBase::fromJson(fieldValue, refVal_relativehumidity_max);
            setRelativehumidityMax(refVal_relativehumidity_max);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relativehumidity_min")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relativehumidity_min"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_relativehumidity_min;
            ok &= ModelBase::fromJson(fieldValue, refVal_relativehumidity_min);
            setRelativehumidityMin(refVal_relativehumidity_min);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relativehumidity_mean")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relativehumidity_mean"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_relativehumidity_mean;
            ok &= ModelBase::fromJson(fieldValue, refVal_relativehumidity_mean);
            setRelativehumidityMean(refVal_relativehumidity_mean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("convective_precipitation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("convective_precipitation"));
        if(!fieldValue.is_null())
        {
            std::vector<float> refVal_convective_precipitation;
            ok &= ModelBase::fromJson(fieldValue, refVal_convective_precipitation);
            setConvectivePrecipitation(refVal_convective_precipitation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("precipitation_hours")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("precipitation_hours"));
        if(!fieldValue.is_null())
        {
            std::vector<float> refVal_precipitation_hours;
            ok &= ModelBase::fromJson(fieldValue, refVal_precipitation_hours);
            setPrecipitationHours(refVal_precipitation_hours);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("humiditygreater90_hours")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("humiditygreater90_hours"));
        if(!fieldValue.is_null())
        {
            std::vector<float> refVal_humiditygreater90_hours;
            ok &= ModelBase::fromJson(fieldValue, refVal_humiditygreater90_hours);
            setHumiditygreater90Hours(refVal_humiditygreater90_hours);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("indexto3hvalues_start")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("indexto3hvalues_start"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_indexto3hvalues_start;
            ok &= ModelBase::fromJson(fieldValue, refVal_indexto3hvalues_start);
            setIndexto3hvaluesStart(refVal_indexto3hvalues_start);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("indexto3hvalues_end")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("indexto3hvalues_end"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_indexto3hvalues_end;
            ok &= ModelBase::fromJson(fieldValue, refVal_indexto3hvalues_end);
            setIndexto3hvaluesEnd(refVal_indexto3hvalues_end);
        }
    }
    return ok;
}

void Data_day::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("time"), m_Time));
    }
    if(m_PictocodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pictocode"), m_Pictocode));
    }
    if(m_UvindexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("uvindex"), m_Uvindex));
    }
    if(m_Temperature_maxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temperature_max"), m_Temperature_max));
    }
    if(m_Temperature_minIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temperature_min"), m_Temperature_min));
    }
    if(m_Temperature_meanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temperature_mean"), m_Temperature_mean));
    }
    if(m_Felttemperature_maxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("felttemperature_max"), m_Felttemperature_max));
    }
    if(m_Felttemperature_minIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("felttemperature_min"), m_Felttemperature_min));
    }
    if(m_WinddirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("winddirection"), m_Winddirection));
    }
    if(m_Precipitation_probabilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("precipitation_probability"), m_Precipitation_probability));
    }
    if(m_RainspotIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rainspot"), m_Rainspot));
    }
    if(m_Predictability_classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("predictability_class"), m_Predictability_class));
    }
    if(m_PredictabilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("predictability"), m_Predictability));
    }
    if(m_PrecipitationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("precipitation"), m_Precipitation));
    }
    if(m_SnowfractionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("snowfraction"), m_Snowfraction));
    }
    if(m_Sealevelpressure_maxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sealevelpressure_max"), m_Sealevelpressure_max));
    }
    if(m_Sealevelpressure_minIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sealevelpressure_min"), m_Sealevelpressure_min));
    }
    if(m_Sealevelpressure_meanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sealevelpressure_mean"), m_Sealevelpressure_mean));
    }
    if(m_Windspeed_maxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("windspeed_max"), m_Windspeed_max));
    }
    if(m_Windspeed_meanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("windspeed_mean"), m_Windspeed_mean));
    }
    if(m_Windspeed_minIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("windspeed_min"), m_Windspeed_min));
    }
    if(m_Relativehumidity_maxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relativehumidity_max"), m_Relativehumidity_max));
    }
    if(m_Relativehumidity_minIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relativehumidity_min"), m_Relativehumidity_min));
    }
    if(m_Relativehumidity_meanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relativehumidity_mean"), m_Relativehumidity_mean));
    }
    if(m_Convective_precipitationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("convective_precipitation"), m_Convective_precipitation));
    }
    if(m_Precipitation_hoursIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("precipitation_hours"), m_Precipitation_hours));
    }
    if(m_Humiditygreater90_hoursIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("humiditygreater90_hours"), m_Humiditygreater90_hours));
    }
    if(m_Indexto3hvalues_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("indexto3hvalues_start"), m_Indexto3hvalues_start));
    }
    if(m_Indexto3hvalues_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("indexto3hvalues_end"), m_Indexto3hvalues_end));
    }
}

bool Data_day::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("time")))
    {
        std::vector<int32_t> refVal_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("time")), refVal_time );
        setTime(refVal_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pictocode")))
    {
        std::vector<int32_t> refVal_pictocode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pictocode")), refVal_pictocode );
        setPictocode(refVal_pictocode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("uvindex")))
    {
        std::vector<int32_t> refVal_uvindex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("uvindex")), refVal_uvindex );
        setUvindex(refVal_uvindex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temperature_max")))
    {
        std::vector<float> refVal_temperature_max;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temperature_max")), refVal_temperature_max );
        setTemperatureMax(refVal_temperature_max);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temperature_min")))
    {
        std::vector<float> refVal_temperature_min;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temperature_min")), refVal_temperature_min );
        setTemperatureMin(refVal_temperature_min);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temperature_mean")))
    {
        std::vector<float> refVal_temperature_mean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temperature_mean")), refVal_temperature_mean );
        setTemperatureMean(refVal_temperature_mean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("felttemperature_max")))
    {
        std::vector<float> refVal_felttemperature_max;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("felttemperature_max")), refVal_felttemperature_max );
        setFelttemperatureMax(refVal_felttemperature_max);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("felttemperature_min")))
    {
        std::vector<float> refVal_felttemperature_min;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("felttemperature_min")), refVal_felttemperature_min );
        setFelttemperatureMin(refVal_felttemperature_min);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("winddirection")))
    {
        std::vector<int32_t> refVal_winddirection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("winddirection")), refVal_winddirection );
        setWinddirection(refVal_winddirection);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("precipitation_probability")))
    {
        std::vector<int32_t> refVal_precipitation_probability;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("precipitation_probability")), refVal_precipitation_probability );
        setPrecipitationProbability(refVal_precipitation_probability);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rainspot")))
    {
        std::vector<utility::string_t> refVal_rainspot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rainspot")), refVal_rainspot );
        setRainspot(refVal_rainspot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("predictability_class")))
    {
        std::vector<int32_t> refVal_predictability_class;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("predictability_class")), refVal_predictability_class );
        setPredictabilityClass(refVal_predictability_class);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("predictability")))
    {
        std::vector<int32_t> refVal_predictability;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("predictability")), refVal_predictability );
        setPredictability(refVal_predictability);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("precipitation")))
    {
        std::vector<float> refVal_precipitation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("precipitation")), refVal_precipitation );
        setPrecipitation(refVal_precipitation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("snowfraction")))
    {
        std::vector<float> refVal_snowfraction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("snowfraction")), refVal_snowfraction );
        setSnowfraction(refVal_snowfraction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sealevelpressure_max")))
    {
        std::vector<int32_t> refVal_sealevelpressure_max;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sealevelpressure_max")), refVal_sealevelpressure_max );
        setSealevelpressureMax(refVal_sealevelpressure_max);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sealevelpressure_min")))
    {
        std::vector<int32_t> refVal_sealevelpressure_min;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sealevelpressure_min")), refVal_sealevelpressure_min );
        setSealevelpressureMin(refVal_sealevelpressure_min);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sealevelpressure_mean")))
    {
        std::vector<int32_t> refVal_sealevelpressure_mean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sealevelpressure_mean")), refVal_sealevelpressure_mean );
        setSealevelpressureMean(refVal_sealevelpressure_mean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("windspeed_max")))
    {
        std::vector<float> refVal_windspeed_max;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("windspeed_max")), refVal_windspeed_max );
        setWindspeedMax(refVal_windspeed_max);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("windspeed_mean")))
    {
        std::vector<float> refVal_windspeed_mean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("windspeed_mean")), refVal_windspeed_mean );
        setWindspeedMean(refVal_windspeed_mean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("windspeed_min")))
    {
        std::vector<float> refVal_windspeed_min;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("windspeed_min")), refVal_windspeed_min );
        setWindspeedMin(refVal_windspeed_min);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relativehumidity_max")))
    {
        std::vector<int32_t> refVal_relativehumidity_max;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relativehumidity_max")), refVal_relativehumidity_max );
        setRelativehumidityMax(refVal_relativehumidity_max);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relativehumidity_min")))
    {
        std::vector<int32_t> refVal_relativehumidity_min;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relativehumidity_min")), refVal_relativehumidity_min );
        setRelativehumidityMin(refVal_relativehumidity_min);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relativehumidity_mean")))
    {
        std::vector<int32_t> refVal_relativehumidity_mean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relativehumidity_mean")), refVal_relativehumidity_mean );
        setRelativehumidityMean(refVal_relativehumidity_mean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("convective_precipitation")))
    {
        std::vector<float> refVal_convective_precipitation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("convective_precipitation")), refVal_convective_precipitation );
        setConvectivePrecipitation(refVal_convective_precipitation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("precipitation_hours")))
    {
        std::vector<float> refVal_precipitation_hours;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("precipitation_hours")), refVal_precipitation_hours );
        setPrecipitationHours(refVal_precipitation_hours);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("humiditygreater90_hours")))
    {
        std::vector<float> refVal_humiditygreater90_hours;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("humiditygreater90_hours")), refVal_humiditygreater90_hours );
        setHumiditygreater90Hours(refVal_humiditygreater90_hours);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("indexto3hvalues_start")))
    {
        std::vector<int32_t> refVal_indexto3hvalues_start;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("indexto3hvalues_start")), refVal_indexto3hvalues_start );
        setIndexto3hvaluesStart(refVal_indexto3hvalues_start);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("indexto3hvalues_end")))
    {
        std::vector<int32_t> refVal_indexto3hvalues_end;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("indexto3hvalues_end")), refVal_indexto3hvalues_end );
        setIndexto3hvaluesEnd(refVal_indexto3hvalues_end);
    }
    return ok;
}

std::vector<int32_t>& Data_day::getTime()
{
    return m_Time;
}

void Data_day::setTime(std::vector<int32_t> value)
{
    m_Time = value;
    m_TimeIsSet = true;
}

bool Data_day::timeIsSet() const
{
    return m_TimeIsSet;
}

void Data_day::unsetTime()
{
    m_TimeIsSet = false;
}
std::vector<int32_t>& Data_day::getPictocode()
{
    return m_Pictocode;
}

void Data_day::setPictocode(std::vector<int32_t> value)
{
    m_Pictocode = value;
    m_PictocodeIsSet = true;
}

bool Data_day::pictocodeIsSet() const
{
    return m_PictocodeIsSet;
}

void Data_day::unsetPictocode()
{
    m_PictocodeIsSet = false;
}
std::vector<int32_t>& Data_day::getUvindex()
{
    return m_Uvindex;
}

void Data_day::setUvindex(std::vector<int32_t> value)
{
    m_Uvindex = value;
    m_UvindexIsSet = true;
}

bool Data_day::uvindexIsSet() const
{
    return m_UvindexIsSet;
}

void Data_day::unsetUvindex()
{
    m_UvindexIsSet = false;
}
std::vector<float>& Data_day::getTemperatureMax()
{
    return m_Temperature_max;
}

void Data_day::setTemperatureMax(std::vector<float> value)
{
    m_Temperature_max = value;
    m_Temperature_maxIsSet = true;
}

bool Data_day::temperatureMaxIsSet() const
{
    return m_Temperature_maxIsSet;
}

void Data_day::unsetTemperature_max()
{
    m_Temperature_maxIsSet = false;
}
std::vector<float>& Data_day::getTemperatureMin()
{
    return m_Temperature_min;
}

void Data_day::setTemperatureMin(std::vector<float> value)
{
    m_Temperature_min = value;
    m_Temperature_minIsSet = true;
}

bool Data_day::temperatureMinIsSet() const
{
    return m_Temperature_minIsSet;
}

void Data_day::unsetTemperature_min()
{
    m_Temperature_minIsSet = false;
}
std::vector<float>& Data_day::getTemperatureMean()
{
    return m_Temperature_mean;
}

void Data_day::setTemperatureMean(std::vector<float> value)
{
    m_Temperature_mean = value;
    m_Temperature_meanIsSet = true;
}

bool Data_day::temperatureMeanIsSet() const
{
    return m_Temperature_meanIsSet;
}

void Data_day::unsetTemperature_mean()
{
    m_Temperature_meanIsSet = false;
}
std::vector<float>& Data_day::getFelttemperatureMax()
{
    return m_Felttemperature_max;
}

void Data_day::setFelttemperatureMax(std::vector<float> value)
{
    m_Felttemperature_max = value;
    m_Felttemperature_maxIsSet = true;
}

bool Data_day::felttemperatureMaxIsSet() const
{
    return m_Felttemperature_maxIsSet;
}

void Data_day::unsetFelttemperature_max()
{
    m_Felttemperature_maxIsSet = false;
}
std::vector<float>& Data_day::getFelttemperatureMin()
{
    return m_Felttemperature_min;
}

void Data_day::setFelttemperatureMin(std::vector<float> value)
{
    m_Felttemperature_min = value;
    m_Felttemperature_minIsSet = true;
}

bool Data_day::felttemperatureMinIsSet() const
{
    return m_Felttemperature_minIsSet;
}

void Data_day::unsetFelttemperature_min()
{
    m_Felttemperature_minIsSet = false;
}
std::vector<int32_t>& Data_day::getWinddirection()
{
    return m_Winddirection;
}

void Data_day::setWinddirection(std::vector<int32_t> value)
{
    m_Winddirection = value;
    m_WinddirectionIsSet = true;
}

bool Data_day::winddirectionIsSet() const
{
    return m_WinddirectionIsSet;
}

void Data_day::unsetWinddirection()
{
    m_WinddirectionIsSet = false;
}
std::vector<int32_t>& Data_day::getPrecipitationProbability()
{
    return m_Precipitation_probability;
}

void Data_day::setPrecipitationProbability(std::vector<int32_t> value)
{
    m_Precipitation_probability = value;
    m_Precipitation_probabilityIsSet = true;
}

bool Data_day::precipitationProbabilityIsSet() const
{
    return m_Precipitation_probabilityIsSet;
}

void Data_day::unsetPrecipitation_probability()
{
    m_Precipitation_probabilityIsSet = false;
}
std::vector<utility::string_t>& Data_day::getRainspot()
{
    return m_Rainspot;
}

void Data_day::setRainspot(const std::vector<utility::string_t>& value)
{
    m_Rainspot = value;
    m_RainspotIsSet = true;
}

bool Data_day::rainspotIsSet() const
{
    return m_RainspotIsSet;
}

void Data_day::unsetRainspot()
{
    m_RainspotIsSet = false;
}
std::vector<int32_t>& Data_day::getPredictabilityClass()
{
    return m_Predictability_class;
}

void Data_day::setPredictabilityClass(std::vector<int32_t> value)
{
    m_Predictability_class = value;
    m_Predictability_classIsSet = true;
}

bool Data_day::predictabilityClassIsSet() const
{
    return m_Predictability_classIsSet;
}

void Data_day::unsetPredictability_class()
{
    m_Predictability_classIsSet = false;
}
std::vector<int32_t>& Data_day::getPredictability()
{
    return m_Predictability;
}

void Data_day::setPredictability(std::vector<int32_t> value)
{
    m_Predictability = value;
    m_PredictabilityIsSet = true;
}

bool Data_day::predictabilityIsSet() const
{
    return m_PredictabilityIsSet;
}

void Data_day::unsetPredictability()
{
    m_PredictabilityIsSet = false;
}
std::vector<float>& Data_day::getPrecipitation()
{
    return m_Precipitation;
}

void Data_day::setPrecipitation(std::vector<float> value)
{
    m_Precipitation = value;
    m_PrecipitationIsSet = true;
}

bool Data_day::precipitationIsSet() const
{
    return m_PrecipitationIsSet;
}

void Data_day::unsetPrecipitation()
{
    m_PrecipitationIsSet = false;
}
std::vector<float>& Data_day::getSnowfraction()
{
    return m_Snowfraction;
}

void Data_day::setSnowfraction(std::vector<float> value)
{
    m_Snowfraction = value;
    m_SnowfractionIsSet = true;
}

bool Data_day::snowfractionIsSet() const
{
    return m_SnowfractionIsSet;
}

void Data_day::unsetSnowfraction()
{
    m_SnowfractionIsSet = false;
}
std::vector<int32_t>& Data_day::getSealevelpressureMax()
{
    return m_Sealevelpressure_max;
}

void Data_day::setSealevelpressureMax(std::vector<int32_t> value)
{
    m_Sealevelpressure_max = value;
    m_Sealevelpressure_maxIsSet = true;
}

bool Data_day::sealevelpressureMaxIsSet() const
{
    return m_Sealevelpressure_maxIsSet;
}

void Data_day::unsetSealevelpressure_max()
{
    m_Sealevelpressure_maxIsSet = false;
}
std::vector<int32_t>& Data_day::getSealevelpressureMin()
{
    return m_Sealevelpressure_min;
}

void Data_day::setSealevelpressureMin(std::vector<int32_t> value)
{
    m_Sealevelpressure_min = value;
    m_Sealevelpressure_minIsSet = true;
}

bool Data_day::sealevelpressureMinIsSet() const
{
    return m_Sealevelpressure_minIsSet;
}

void Data_day::unsetSealevelpressure_min()
{
    m_Sealevelpressure_minIsSet = false;
}
std::vector<int32_t>& Data_day::getSealevelpressureMean()
{
    return m_Sealevelpressure_mean;
}

void Data_day::setSealevelpressureMean(std::vector<int32_t> value)
{
    m_Sealevelpressure_mean = value;
    m_Sealevelpressure_meanIsSet = true;
}

bool Data_day::sealevelpressureMeanIsSet() const
{
    return m_Sealevelpressure_meanIsSet;
}

void Data_day::unsetSealevelpressure_mean()
{
    m_Sealevelpressure_meanIsSet = false;
}
std::vector<float>& Data_day::getWindspeedMax()
{
    return m_Windspeed_max;
}

void Data_day::setWindspeedMax(std::vector<float> value)
{
    m_Windspeed_max = value;
    m_Windspeed_maxIsSet = true;
}

bool Data_day::windspeedMaxIsSet() const
{
    return m_Windspeed_maxIsSet;
}

void Data_day::unsetWindspeed_max()
{
    m_Windspeed_maxIsSet = false;
}
std::vector<float>& Data_day::getWindspeedMean()
{
    return m_Windspeed_mean;
}

void Data_day::setWindspeedMean(std::vector<float> value)
{
    m_Windspeed_mean = value;
    m_Windspeed_meanIsSet = true;
}

bool Data_day::windspeedMeanIsSet() const
{
    return m_Windspeed_meanIsSet;
}

void Data_day::unsetWindspeed_mean()
{
    m_Windspeed_meanIsSet = false;
}
std::vector<float>& Data_day::getWindspeedMin()
{
    return m_Windspeed_min;
}

void Data_day::setWindspeedMin(std::vector<float> value)
{
    m_Windspeed_min = value;
    m_Windspeed_minIsSet = true;
}

bool Data_day::windspeedMinIsSet() const
{
    return m_Windspeed_minIsSet;
}

void Data_day::unsetWindspeed_min()
{
    m_Windspeed_minIsSet = false;
}
std::vector<int32_t>& Data_day::getRelativehumidityMax()
{
    return m_Relativehumidity_max;
}

void Data_day::setRelativehumidityMax(std::vector<int32_t> value)
{
    m_Relativehumidity_max = value;
    m_Relativehumidity_maxIsSet = true;
}

bool Data_day::relativehumidityMaxIsSet() const
{
    return m_Relativehumidity_maxIsSet;
}

void Data_day::unsetRelativehumidity_max()
{
    m_Relativehumidity_maxIsSet = false;
}
std::vector<int32_t>& Data_day::getRelativehumidityMin()
{
    return m_Relativehumidity_min;
}

void Data_day::setRelativehumidityMin(std::vector<int32_t> value)
{
    m_Relativehumidity_min = value;
    m_Relativehumidity_minIsSet = true;
}

bool Data_day::relativehumidityMinIsSet() const
{
    return m_Relativehumidity_minIsSet;
}

void Data_day::unsetRelativehumidity_min()
{
    m_Relativehumidity_minIsSet = false;
}
std::vector<int32_t>& Data_day::getRelativehumidityMean()
{
    return m_Relativehumidity_mean;
}

void Data_day::setRelativehumidityMean(std::vector<int32_t> value)
{
    m_Relativehumidity_mean = value;
    m_Relativehumidity_meanIsSet = true;
}

bool Data_day::relativehumidityMeanIsSet() const
{
    return m_Relativehumidity_meanIsSet;
}

void Data_day::unsetRelativehumidity_mean()
{
    m_Relativehumidity_meanIsSet = false;
}
std::vector<float>& Data_day::getConvectivePrecipitation()
{
    return m_Convective_precipitation;
}

void Data_day::setConvectivePrecipitation(std::vector<float> value)
{
    m_Convective_precipitation = value;
    m_Convective_precipitationIsSet = true;
}

bool Data_day::convectivePrecipitationIsSet() const
{
    return m_Convective_precipitationIsSet;
}

void Data_day::unsetConvective_precipitation()
{
    m_Convective_precipitationIsSet = false;
}
std::vector<float>& Data_day::getPrecipitationHours()
{
    return m_Precipitation_hours;
}

void Data_day::setPrecipitationHours(std::vector<float> value)
{
    m_Precipitation_hours = value;
    m_Precipitation_hoursIsSet = true;
}

bool Data_day::precipitationHoursIsSet() const
{
    return m_Precipitation_hoursIsSet;
}

void Data_day::unsetPrecipitation_hours()
{
    m_Precipitation_hoursIsSet = false;
}
std::vector<float>& Data_day::getHumiditygreater90Hours()
{
    return m_Humiditygreater90_hours;
}

void Data_day::setHumiditygreater90Hours(std::vector<float> value)
{
    m_Humiditygreater90_hours = value;
    m_Humiditygreater90_hoursIsSet = true;
}

bool Data_day::humiditygreater90HoursIsSet() const
{
    return m_Humiditygreater90_hoursIsSet;
}

void Data_day::unsetHumiditygreater90_hours()
{
    m_Humiditygreater90_hoursIsSet = false;
}
std::vector<int32_t>& Data_day::getIndexto3hvaluesStart()
{
    return m_Indexto3hvalues_start;
}

void Data_day::setIndexto3hvaluesStart(std::vector<int32_t> value)
{
    m_Indexto3hvalues_start = value;
    m_Indexto3hvalues_startIsSet = true;
}

bool Data_day::indexto3hvaluesStartIsSet() const
{
    return m_Indexto3hvalues_startIsSet;
}

void Data_day::unsetIndexto3hvalues_start()
{
    m_Indexto3hvalues_startIsSet = false;
}
std::vector<int32_t>& Data_day::getIndexto3hvaluesEnd()
{
    return m_Indexto3hvalues_end;
}

void Data_day::setIndexto3hvaluesEnd(std::vector<int32_t> value)
{
    m_Indexto3hvalues_end = value;
    m_Indexto3hvalues_endIsSet = true;
}

bool Data_day::indexto3hvaluesEndIsSet() const
{
    return m_Indexto3hvalues_endIsSet;
}

void Data_day::unsetIndexto3hvalues_end()
{
    m_Indexto3hvalues_endIsSet = false;
}
}
}
}
}


