/*
 * SpeechSynthesis.h
 *
 *  Created on: Sep 11, 2023
 *      Author: mateusz
 */

#ifndef SPEECHSYNTHESIS_H_
#define SPEECHSYNTHESIS_H_

#include <string>
#include <vector>
#include <list>

#include "EmailDownloaderMessage.h"
#include "ConfigurationFile.h"

struct SpeechSynthesis_MessageIndexElem {
	std::string filename;	//!< Filename with an synthesized announcement
	uint64_t sayUntil;		//!< A timestamp after which this announcement will not be said
	std::string sender;		//!< Sender of this message
	uint64_t dispatchedAt;	//!< Time when this announcement was sent by a sender
};

class SpeechSynthesis_FindValidAnouncements_UnaryPredicate {

public:
	bool operator() (const SpeechSynthesis_MessageIndexElem & elem) {
		return true;
	}
};

/**
 * This is a generic class which wraps text to speech conversion. It must be inherited by another class
 * specific to exact TTS provider, although it has some methods used to read and save an index which shall
 * not be overrided.
 */
class SpeechSynthesis {
private:

	/**
	 * An index of all audio files generated by Text-to-speech conversion
	 */
	std::list<SpeechSynthesis_MessageIndexElem> indexContent;

	/**
	 * A file an index was loaded from.
	 */
	std::string indexFilename;


public:

	void createIndex(const std::string & indexFn);

	/**
	 * Opens and reads an index of announcements index
	 * @param indexFn path + name of index JSON file
	 * @return true if file was opened or false if doesn't exist
	 */
	int readIndex(const std::string & indexFn);

	/**
	 * Writes index back into a JSON file.
	 */
	void storeIndex();

	/**
	 * This is a callback used by Playlist Assembler on every message which is
	 * used on all outdated messages which should not be sayid and than removed
	 * from an index and probably even for a filesystem. The thing is that
	 * it must be used only for messages which are older than 'ignoreOlderThan'
	 * parameter in Text-to-seech configuration. Otherwise an email will be parsed
	 * and converted once again during next program startup, even that it won't
	 * be said at all. Playlist Assembler will detest it as an outdated one
	 * and call this once again etc.
	 *
	 * @param elem element to be removed
	 * @param saveIndexAuto save index file after removal
	 */
	void removeOldMessage(SpeechSynthesis_MessageIndexElem & elem, bool saveIndexAuto);

	/**
	 * Appends all announcements audio files which are valid (not too old) to be played now.
	 * These paths are read from index file, so before a call to this file all new emails
	 * must be converted from text to speech.
	 * @param playlist
	 * @return how many new elements were added
	 */
	int getValidAnouncements(std::vector<std::string> & playlist);

	/**
	 * Takes a vector with emails taken from inbox, checks if they have been already
	 * converted to speech and does that conversion if it is neccessary.
	 * @param msgs vector of emails from an inbox
	 * @param ignoreOlderThan if set to non zero all emails older than this amount of minutes will
	 * 							be automatically ignored without checking if they are already converted
	 * 							to speech and if they require such conversion
	 * @param lang
	 * @param maximumTries
	 * @param delayAfterFailedTry
	 * @param audioFilesBaseDir
	 */
	void convertEmailsToSpeech(	const std::vector<EmailDownloaderMessage> & msgs,
								uint32_t ignoreOlderThan,
								const ConfigurationFile_Language lang,
								int maximumTries,
								uint8_t delayAfterFailedTry,
								const std::string & audioFilesBaseDir);

	virtual void convertTextToSpeech(std::string & text, std::string & outputFilename, ConfigurationFile_Language lang) = 0;

	SpeechSynthesis();
	virtual ~SpeechSynthesis();

	std::list<SpeechSynthesis_MessageIndexElem>& getIndexContent() {
		return indexContent;
	}
};

#endif /* SPEECHSYNTHESIS_H_ */
