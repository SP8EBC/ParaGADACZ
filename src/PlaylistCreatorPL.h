/*
 * PlaylistCreatorPL.h
 *
 *  Created on: Dec 31, 2022
 *      Author: mateusz
 */

#ifndef PLAYLISTCREATORPL_H_
#define PLAYLISTCREATORPL_H_

#include "PlaylistCreator.h"

/**
 * This class is a speicifc implementation of PlaylistCreator for Polish
 * language.
 */
class PlaylistCreatorPL: public virtual PlaylistCreator {
public:
	PlaylistCreatorPL();
	virtual ~PlaylistCreatorPL();
	PlaylistCreatorPL(const PlaylistCreatorPL &other);
	PlaylistCreatorPL(PlaylistCreatorPL &&other);
	PlaylistCreatorPL& operator=(const PlaylistCreatorPL &other);
	PlaylistCreatorPL& operator=(PlaylistCreatorPL &&other);

	// this is crap is generated by Eclipse 'implement method' function.
	// it looks ugly but I have no time to fight with that.

	/**
	 * Returns a list of audio samples for current time
	 * \return Vector of paths to audio files representing current time (hours and minutes)
	 */
	virtual std::vector<
			std::__cxx11::basic_string<char, std::char_traits<char>,
					std::allocator<char> >,
			std::allocator<
					std::__cxx11::basic_string<char, std::char_traits<char>,
							std::allocator<char> > > > getAudioForCurrentTime();

	/**
	 * Returns a list of audio samples for forecast announcement like
	 * "Forecast for next 3 hours". If audio cannot be generated (wrong time step)
	 * empty optional is returned
	 */
	virtual std::optional<
			std::vector<
					std::__cxx11::basic_string<char, std::char_traits<char>,
							std::allocator<char> >,
					std::allocator<
							std::__cxx11::basic_string<char,
									std::char_traits<char>, std::allocator<char> > > > > getAudioForForecastAnouncement(
			int minutes);

	/**
	 * Returns a list of audio files representing given floating point number.
	 * Method always reduce precision to one digit after decimal point
	 * As an example, number -1.45 will return in English:
	 * 		minus.mp3
	 * 		one.mp3
	 * 		decimal.mp3
	 * 		four.mp3
	 *
	 * \param decimal Number to convert to audio files
	 * \return Vector of paths to audio files representing number
	 *
	 */
	virtual std::vector<
			std::__cxx11::basic_string<char, std::char_traits<char>,
					std::allocator<char> >,
			std::allocator<
					std::__cxx11::basic_string<char, std::char_traits<char>,
							std::allocator<char> > > > getAudioListFromNumber(
			float decimal);

	/**
	 * Returns an audio file with given station name or forecast name. If the station is unknown
	 * enpty optional is returned
	 *
	 * \param name weather station or forecast point name
	 */
	virtual std::optional<
			std::__cxx11::basic_string<char, std::char_traits<char>,
					std::allocator<char> > > getAudioForStationName(
			std::string name);

	/**
	 * Returns a list of audio files representing given integer number (may be negative).
	 * As an example, number -123 will return in English:
	 * 		minus.mp3
	 * 		one.mp3
	 *		hundret.mp3
	 *		twenty.mp3
	 *		three.mp3
	 *
	 *	\param integer Number to convert to audio files
	 *	\return Vector of paths to audio files representing number
	 */
	virtual std::vector<
			std::__cxx11::basic_string<char, std::char_traits<char>,
					std::allocator<char> >,
			std::allocator<
					std::__cxx11::basic_string<char, std::char_traits<char>,
							std::allocator<char> > > > getAudioListFromNumber(
			int integer);

	/**
	 * Returns single path to audio file
	 *
	 * \param unit Measurement unit to get audio file for
	 * \return Path to audio file
	 */
	virtual std::string getAudioFromUnit(PlaylistCreator_Unit unit);

	/**
	 * Returns a file for given constant announcement element, or empty optional if
	 * it cannot be found.
	 * \return Optional path to file representing constant element of an announcement, or
	 * 		   empty if no file could be found
	 */
	virtual std::optional<
			std::__cxx11::basic_string<char, std::char_traits<char>,
					std::allocator<char> > > getConstantElement(
			PlaylistCreator_ConstanElement element);

};

#endif /* PLAYLISTCREATORPL_H_ */
