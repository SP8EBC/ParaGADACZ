/**
 * WeatherLink API v1
 * First version of an API to get weather data from Davis stations
 *
 * The version of the OpenAPI document: 1.0.11
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Root.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Root::Root()
{
    m_Credit = utility::conversions::to_string_t("");
    m_CreditIsSet = false;
    m_Credit_URL = utility::conversions::to_string_t("");
    m_Credit_URLIsSet = false;
    m_Disclaimer_url = utility::conversions::to_string_t("");
    m_Disclaimer_urlIsSet = false;
    m_Copyright_url = utility::conversions::to_string_t("");
    m_Copyright_urlIsSet = false;
    m_Privacy_policy_url = utility::conversions::to_string_t("");
    m_Privacy_policy_urlIsSet = false;
    m_ImageIsSet = false;
    m_Suggested_pickup = utility::conversions::to_string_t("");
    m_Suggested_pickupIsSet = false;
    m_Suggested_pickup_period = utility::conversions::to_string_t("");
    m_Suggested_pickup_periodIsSet = false;
    m_Dewpoint_c = utility::conversions::to_string_t("");
    m_Dewpoint_cIsSet = false;
    m_Dewpoint_f = utility::conversions::to_string_t("");
    m_Dewpoint_fIsSet = false;
    m_Dewpoint_string = utility::conversions::to_string_t("");
    m_Dewpoint_stringIsSet = false;
    m_Heat_index_c = utility::conversions::to_string_t("");
    m_Heat_index_cIsSet = false;
    m_Heat_index_f = utility::conversions::to_string_t("");
    m_Heat_index_fIsSet = false;
    m_Heat_index_string = utility::conversions::to_string_t("");
    m_Heat_index_stringIsSet = false;
    m_Location = utility::conversions::to_string_t("");
    m_LocationIsSet = false;
    m_Latitude = utility::conversions::to_string_t("");
    m_LatitudeIsSet = false;
    m_Longitude = utility::conversions::to_string_t("");
    m_LongitudeIsSet = false;
    m_Observation_time = utility::conversions::to_string_t("");
    m_Observation_timeIsSet = false;
    m_Observation_time_rfc822 = utility::conversions::to_string_t("");
    m_Observation_time_rfc822IsSet = false;
    m_Pressure_in = utility::conversions::to_string_t("");
    m_Pressure_inIsSet = false;
    m_Pressure_mb = utility::conversions::to_string_t("");
    m_Pressure_mbIsSet = false;
    m_Pressure_string = utility::conversions::to_string_t("");
    m_Pressure_stringIsSet = false;
    m_Relative_humidity = 0;
    m_Relative_humidityIsSet = false;
    m_Station_id = utility::conversions::to_string_t("");
    m_Station_idIsSet = false;
    m_Temp_c = utility::conversions::to_string_t("");
    m_Temp_cIsSet = false;
    m_Temp_f = utility::conversions::to_string_t("");
    m_Temp_fIsSet = false;
    m_Temperature_string = utility::conversions::to_string_t("");
    m_Temperature_stringIsSet = false;
    m_Wind_degrees = utility::conversions::to_string_t("");
    m_Wind_degreesIsSet = false;
    m_Wind_dir = utility::conversions::to_string_t("");
    m_Wind_dirIsSet = false;
    m_Wind_kt = utility::conversions::to_string_t("");
    m_Wind_ktIsSet = false;
    m_Wind_mph = utility::conversions::to_string_t("");
    m_Wind_mphIsSet = false;
    m_Windchill_c = utility::conversions::to_string_t("");
    m_Windchill_cIsSet = false;
    m_Windchill_f = utility::conversions::to_string_t("");
    m_Windchill_fIsSet = false;
    m_Windchill_string = utility::conversions::to_string_t("");
    m_Windchill_stringIsSet = false;
    m_Davis_current_observationIsSet = false;
    m_Time_to_generate = utility::conversions::to_string_t("");
    m_Time_to_generateIsSet = false;
}

Root::~Root()
{
}

void Root::validate()
{
    // TODO: implement validation
}

web::json::value Root::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CreditIsSet)
    {
        val[utility::conversions::to_string_t("credit")] = ModelBase::toJson(m_Credit);
    }
    if(m_Credit_URLIsSet)
    {
        val[utility::conversions::to_string_t("credit_URL")] = ModelBase::toJson(m_Credit_URL);
    }
    if(m_Disclaimer_urlIsSet)
    {
        val[utility::conversions::to_string_t("disclaimer_url")] = ModelBase::toJson(m_Disclaimer_url);
    }
    if(m_Copyright_urlIsSet)
    {
        val[utility::conversions::to_string_t("copyright_url")] = ModelBase::toJson(m_Copyright_url);
    }
    if(m_Privacy_policy_urlIsSet)
    {
        val[utility::conversions::to_string_t("privacy_policy_url")] = ModelBase::toJson(m_Privacy_policy_url);
    }
    if(m_ImageIsSet)
    {
        val[utility::conversions::to_string_t("image")] = ModelBase::toJson(m_Image);
    }
    if(m_Suggested_pickupIsSet)
    {
        val[utility::conversions::to_string_t("suggested_pickup")] = ModelBase::toJson(m_Suggested_pickup);
    }
    if(m_Suggested_pickup_periodIsSet)
    {
        val[utility::conversions::to_string_t("suggested_pickup_period")] = ModelBase::toJson(m_Suggested_pickup_period);
    }
    if(m_Dewpoint_cIsSet)
    {
        val[utility::conversions::to_string_t("dewpoint_c")] = ModelBase::toJson(m_Dewpoint_c);
    }
    if(m_Dewpoint_fIsSet)
    {
        val[utility::conversions::to_string_t("dewpoint_f")] = ModelBase::toJson(m_Dewpoint_f);
    }
    if(m_Dewpoint_stringIsSet)
    {
        val[utility::conversions::to_string_t("dewpoint_string")] = ModelBase::toJson(m_Dewpoint_string);
    }
    if(m_Heat_index_cIsSet)
    {
        val[utility::conversions::to_string_t("heat_index_c")] = ModelBase::toJson(m_Heat_index_c);
    }
    if(m_Heat_index_fIsSet)
    {
        val[utility::conversions::to_string_t("heat_index_f")] = ModelBase::toJson(m_Heat_index_f);
    }
    if(m_Heat_index_stringIsSet)
    {
        val[utility::conversions::to_string_t("heat_index_string")] = ModelBase::toJson(m_Heat_index_string);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t("location")] = ModelBase::toJson(m_Location);
    }
    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t("latitude")] = ModelBase::toJson(m_Latitude);
    }
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t("longitude")] = ModelBase::toJson(m_Longitude);
    }
    if(m_Observation_timeIsSet)
    {
        val[utility::conversions::to_string_t("observation_time")] = ModelBase::toJson(m_Observation_time);
    }
    if(m_Observation_time_rfc822IsSet)
    {
        val[utility::conversions::to_string_t("observation_time_rfc822")] = ModelBase::toJson(m_Observation_time_rfc822);
    }
    if(m_Pressure_inIsSet)
    {
        val[utility::conversions::to_string_t("pressure_in")] = ModelBase::toJson(m_Pressure_in);
    }
    if(m_Pressure_mbIsSet)
    {
        val[utility::conversions::to_string_t("pressure_mb")] = ModelBase::toJson(m_Pressure_mb);
    }
    if(m_Pressure_stringIsSet)
    {
        val[utility::conversions::to_string_t("pressure_string")] = ModelBase::toJson(m_Pressure_string);
    }
    if(m_Relative_humidityIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity")] = ModelBase::toJson(m_Relative_humidity);
    }
    if(m_Station_idIsSet)
    {
        val[utility::conversions::to_string_t("station_id")] = ModelBase::toJson(m_Station_id);
    }
    if(m_Temp_cIsSet)
    {
        val[utility::conversions::to_string_t("temp_c")] = ModelBase::toJson(m_Temp_c);
    }
    if(m_Temp_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_f")] = ModelBase::toJson(m_Temp_f);
    }
    if(m_Temperature_stringIsSet)
    {
        val[utility::conversions::to_string_t("temperature_string")] = ModelBase::toJson(m_Temperature_string);
    }
    if(m_Wind_degreesIsSet)
    {
        val[utility::conversions::to_string_t("wind_degrees")] = ModelBase::toJson(m_Wind_degrees);
    }
    if(m_Wind_dirIsSet)
    {
        val[utility::conversions::to_string_t("wind_dir")] = ModelBase::toJson(m_Wind_dir);
    }
    if(m_Wind_ktIsSet)
    {
        val[utility::conversions::to_string_t("wind_kt")] = ModelBase::toJson(m_Wind_kt);
    }
    if(m_Wind_mphIsSet)
    {
        val[utility::conversions::to_string_t("wind_mph")] = ModelBase::toJson(m_Wind_mph);
    }
    if(m_Windchill_cIsSet)
    {
        val[utility::conversions::to_string_t("windchill_c")] = ModelBase::toJson(m_Windchill_c);
    }
    if(m_Windchill_fIsSet)
    {
        val[utility::conversions::to_string_t("windchill_f")] = ModelBase::toJson(m_Windchill_f);
    }
    if(m_Windchill_stringIsSet)
    {
        val[utility::conversions::to_string_t("windchill_string")] = ModelBase::toJson(m_Windchill_string);
    }
    if(m_Davis_current_observationIsSet)
    {
        val[utility::conversions::to_string_t("davis_current_observation")] = ModelBase::toJson(m_Davis_current_observation);
    }
    if(m_Time_to_generateIsSet)
    {
        val[utility::conversions::to_string_t("time_to_generate")] = ModelBase::toJson(m_Time_to_generate);
    }

    return val;
}

bool Root::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("credit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("credit"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_credit;
            ok &= ModelBase::fromJson(fieldValue, refVal_credit);
            setCredit(refVal_credit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("credit_URL")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("credit_URL"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_credit_URL;
            ok &= ModelBase::fromJson(fieldValue, refVal_credit_URL);
            setCreditURL(refVal_credit_URL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("disclaimer_url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("disclaimer_url"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_disclaimer_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_disclaimer_url);
            setDisclaimerUrl(refVal_disclaimer_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("copyright_url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("copyright_url"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_copyright_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_copyright_url);
            setCopyrightUrl(refVal_copyright_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("privacy_policy_url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("privacy_policy_url"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_privacy_policy_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_privacy_policy_url);
            setPrivacyPolicyUrl(refVal_privacy_policy_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("image")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("image"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Image> refVal_image;
            ok &= ModelBase::fromJson(fieldValue, refVal_image);
            setImage(refVal_image);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("suggested_pickup")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("suggested_pickup"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_suggested_pickup;
            ok &= ModelBase::fromJson(fieldValue, refVal_suggested_pickup);
            setSuggestedPickup(refVal_suggested_pickup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("suggested_pickup_period")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("suggested_pickup_period"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_suggested_pickup_period;
            ok &= ModelBase::fromJson(fieldValue, refVal_suggested_pickup_period);
            setSuggestedPickupPeriod(refVal_suggested_pickup_period);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dewpoint_c")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dewpoint_c"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dewpoint_c;
            ok &= ModelBase::fromJson(fieldValue, refVal_dewpoint_c);
            setDewpointC(refVal_dewpoint_c);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dewpoint_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dewpoint_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dewpoint_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_dewpoint_f);
            setDewpointF(refVal_dewpoint_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dewpoint_string")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dewpoint_string"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dewpoint_string;
            ok &= ModelBase::fromJson(fieldValue, refVal_dewpoint_string);
            setDewpointString(refVal_dewpoint_string);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("heat_index_c")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("heat_index_c"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_heat_index_c;
            ok &= ModelBase::fromJson(fieldValue, refVal_heat_index_c);
            setHeatIndexC(refVal_heat_index_c);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("heat_index_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("heat_index_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_heat_index_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_heat_index_f);
            setHeatIndexF(refVal_heat_index_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("heat_index_string")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("heat_index_string"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_heat_index_string;
            ok &= ModelBase::fromJson(fieldValue, refVal_heat_index_string);
            setHeatIndexString(refVal_heat_index_string);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("location")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("location"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_location;
            ok &= ModelBase::fromJson(fieldValue, refVal_location);
            setLocation(refVal_location);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("latitude")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("latitude"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_latitude;
            ok &= ModelBase::fromJson(fieldValue, refVal_latitude);
            setLatitude(refVal_latitude);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("longitude")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("longitude"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_longitude;
            ok &= ModelBase::fromJson(fieldValue, refVal_longitude);
            setLongitude(refVal_longitude);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("observation_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("observation_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_observation_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_observation_time);
            setObservationTime(refVal_observation_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("observation_time_rfc822")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("observation_time_rfc822"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_observation_time_rfc822;
            ok &= ModelBase::fromJson(fieldValue, refVal_observation_time_rfc822);
            setObservationTimeRfc822(refVal_observation_time_rfc822);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure_in")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure_in"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pressure_in;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure_in);
            setPressureIn(refVal_pressure_in);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure_mb")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure_mb"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pressure_mb;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure_mb);
            setPressureMb(refVal_pressure_mb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure_string")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure_string"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pressure_string;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure_string);
            setPressureString(refVal_pressure_string);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_relative_humidity;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity);
            setRelativeHumidity(refVal_relative_humidity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("station_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("station_id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_station_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_station_id);
            setStationId(refVal_station_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_c")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_c"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_c;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_c);
            setTempC(refVal_temp_c);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_f);
            setTempF(refVal_temp_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temperature_string")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temperature_string"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temperature_string;
            ok &= ModelBase::fromJson(fieldValue, refVal_temperature_string);
            setTemperatureString(refVal_temperature_string);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wind_degrees")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wind_degrees"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wind_degrees;
            ok &= ModelBase::fromJson(fieldValue, refVal_wind_degrees);
            setWindDegrees(refVal_wind_degrees);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wind_dir")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wind_dir"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wind_dir;
            ok &= ModelBase::fromJson(fieldValue, refVal_wind_dir);
            setWindDir(refVal_wind_dir);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wind_kt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wind_kt"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wind_kt;
            ok &= ModelBase::fromJson(fieldValue, refVal_wind_kt);
            setWindKt(refVal_wind_kt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wind_mph")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wind_mph"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wind_mph;
            ok &= ModelBase::fromJson(fieldValue, refVal_wind_mph);
            setWindMph(refVal_wind_mph);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("windchill_c")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("windchill_c"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_windchill_c;
            ok &= ModelBase::fromJson(fieldValue, refVal_windchill_c);
            setWindchillC(refVal_windchill_c);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("windchill_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("windchill_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_windchill_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_windchill_f);
            setWindchillF(refVal_windchill_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("windchill_string")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("windchill_string"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_windchill_string;
            ok &= ModelBase::fromJson(fieldValue, refVal_windchill_string);
            setWindchillString(refVal_windchill_string);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("davis_current_observation")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("davis_current_observation"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Davis_current_observation> refVal_davis_current_observation;
            ok &= ModelBase::fromJson(fieldValue, refVal_davis_current_observation);
            setDavisCurrentObservation(refVal_davis_current_observation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("time_to_generate")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("time_to_generate"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_time_to_generate;
            ok &= ModelBase::fromJson(fieldValue, refVal_time_to_generate);
            setTimeToGenerate(refVal_time_to_generate);
        }
    }
    return ok;
}

void Root::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CreditIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("credit"), m_Credit));
    }
    if(m_Credit_URLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("credit_URL"), m_Credit_URL));
    }
    if(m_Disclaimer_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("disclaimer_url"), m_Disclaimer_url));
    }
    if(m_Copyright_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("copyright_url"), m_Copyright_url));
    }
    if(m_Privacy_policy_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("privacy_policy_url"), m_Privacy_policy_url));
    }
    if(m_ImageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("image"), m_Image));
    }
    if(m_Suggested_pickupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("suggested_pickup"), m_Suggested_pickup));
    }
    if(m_Suggested_pickup_periodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("suggested_pickup_period"), m_Suggested_pickup_period));
    }
    if(m_Dewpoint_cIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dewpoint_c"), m_Dewpoint_c));
    }
    if(m_Dewpoint_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dewpoint_f"), m_Dewpoint_f));
    }
    if(m_Dewpoint_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dewpoint_string"), m_Dewpoint_string));
    }
    if(m_Heat_index_cIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("heat_index_c"), m_Heat_index_c));
    }
    if(m_Heat_index_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("heat_index_f"), m_Heat_index_f));
    }
    if(m_Heat_index_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("heat_index_string"), m_Heat_index_string));
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("location"), m_Location));
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("latitude"), m_Latitude));
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("longitude"), m_Longitude));
    }
    if(m_Observation_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("observation_time"), m_Observation_time));
    }
    if(m_Observation_time_rfc822IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("observation_time_rfc822"), m_Observation_time_rfc822));
    }
    if(m_Pressure_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure_in"), m_Pressure_in));
    }
    if(m_Pressure_mbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure_mb"), m_Pressure_mb));
    }
    if(m_Pressure_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure_string"), m_Pressure_string));
    }
    if(m_Relative_humidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity"), m_Relative_humidity));
    }
    if(m_Station_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("station_id"), m_Station_id));
    }
    if(m_Temp_cIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_c"), m_Temp_c));
    }
    if(m_Temp_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_f"), m_Temp_f));
    }
    if(m_Temperature_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temperature_string"), m_Temperature_string));
    }
    if(m_Wind_degreesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wind_degrees"), m_Wind_degrees));
    }
    if(m_Wind_dirIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wind_dir"), m_Wind_dir));
    }
    if(m_Wind_ktIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wind_kt"), m_Wind_kt));
    }
    if(m_Wind_mphIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wind_mph"), m_Wind_mph));
    }
    if(m_Windchill_cIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("windchill_c"), m_Windchill_c));
    }
    if(m_Windchill_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("windchill_f"), m_Windchill_f));
    }
    if(m_Windchill_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("windchill_string"), m_Windchill_string));
    }
    if(m_Davis_current_observationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("davis_current_observation"), m_Davis_current_observation));
    }
    if(m_Time_to_generateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("time_to_generate"), m_Time_to_generate));
    }
}

bool Root::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("credit")))
    {
        utility::string_t refVal_credit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("credit")), refVal_credit );
        setCredit(refVal_credit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("credit_URL")))
    {
        utility::string_t refVal_credit_URL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("credit_URL")), refVal_credit_URL );
        setCreditURL(refVal_credit_URL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("disclaimer_url")))
    {
        utility::string_t refVal_disclaimer_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("disclaimer_url")), refVal_disclaimer_url );
        setDisclaimerUrl(refVal_disclaimer_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("copyright_url")))
    {
        utility::string_t refVal_copyright_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("copyright_url")), refVal_copyright_url );
        setCopyrightUrl(refVal_copyright_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("privacy_policy_url")))
    {
        utility::string_t refVal_privacy_policy_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("privacy_policy_url")), refVal_privacy_policy_url );
        setPrivacyPolicyUrl(refVal_privacy_policy_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("image")))
    {
        std::shared_ptr<Image> refVal_image;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("image")), refVal_image );
        setImage(refVal_image);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("suggested_pickup")))
    {
        utility::string_t refVal_suggested_pickup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("suggested_pickup")), refVal_suggested_pickup );
        setSuggestedPickup(refVal_suggested_pickup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("suggested_pickup_period")))
    {
        utility::string_t refVal_suggested_pickup_period;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("suggested_pickup_period")), refVal_suggested_pickup_period );
        setSuggestedPickupPeriod(refVal_suggested_pickup_period);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dewpoint_c")))
    {
        utility::string_t refVal_dewpoint_c;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dewpoint_c")), refVal_dewpoint_c );
        setDewpointC(refVal_dewpoint_c);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dewpoint_f")))
    {
        utility::string_t refVal_dewpoint_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dewpoint_f")), refVal_dewpoint_f );
        setDewpointF(refVal_dewpoint_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dewpoint_string")))
    {
        utility::string_t refVal_dewpoint_string;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dewpoint_string")), refVal_dewpoint_string );
        setDewpointString(refVal_dewpoint_string);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("heat_index_c")))
    {
        utility::string_t refVal_heat_index_c;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("heat_index_c")), refVal_heat_index_c );
        setHeatIndexC(refVal_heat_index_c);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("heat_index_f")))
    {
        utility::string_t refVal_heat_index_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("heat_index_f")), refVal_heat_index_f );
        setHeatIndexF(refVal_heat_index_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("heat_index_string")))
    {
        utility::string_t refVal_heat_index_string;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("heat_index_string")), refVal_heat_index_string );
        setHeatIndexString(refVal_heat_index_string);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("location")))
    {
        utility::string_t refVal_location;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("location")), refVal_location );
        setLocation(refVal_location);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("latitude")))
    {
        utility::string_t refVal_latitude;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("latitude")), refVal_latitude );
        setLatitude(refVal_latitude);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("longitude")))
    {
        utility::string_t refVal_longitude;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("longitude")), refVal_longitude );
        setLongitude(refVal_longitude);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("observation_time")))
    {
        utility::string_t refVal_observation_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("observation_time")), refVal_observation_time );
        setObservationTime(refVal_observation_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("observation_time_rfc822")))
    {
        utility::string_t refVal_observation_time_rfc822;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("observation_time_rfc822")), refVal_observation_time_rfc822 );
        setObservationTimeRfc822(refVal_observation_time_rfc822);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure_in")))
    {
        utility::string_t refVal_pressure_in;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure_in")), refVal_pressure_in );
        setPressureIn(refVal_pressure_in);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure_mb")))
    {
        utility::string_t refVal_pressure_mb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure_mb")), refVal_pressure_mb );
        setPressureMb(refVal_pressure_mb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure_string")))
    {
        utility::string_t refVal_pressure_string;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure_string")), refVal_pressure_string );
        setPressureString(refVal_pressure_string);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity")))
    {
        int32_t refVal_relative_humidity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity")), refVal_relative_humidity );
        setRelativeHumidity(refVal_relative_humidity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("station_id")))
    {
        utility::string_t refVal_station_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("station_id")), refVal_station_id );
        setStationId(refVal_station_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_c")))
    {
        utility::string_t refVal_temp_c;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_c")), refVal_temp_c );
        setTempC(refVal_temp_c);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_f")))
    {
        utility::string_t refVal_temp_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_f")), refVal_temp_f );
        setTempF(refVal_temp_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temperature_string")))
    {
        utility::string_t refVal_temperature_string;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temperature_string")), refVal_temperature_string );
        setTemperatureString(refVal_temperature_string);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wind_degrees")))
    {
        utility::string_t refVal_wind_degrees;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wind_degrees")), refVal_wind_degrees );
        setWindDegrees(refVal_wind_degrees);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wind_dir")))
    {
        utility::string_t refVal_wind_dir;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wind_dir")), refVal_wind_dir );
        setWindDir(refVal_wind_dir);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wind_kt")))
    {
        utility::string_t refVal_wind_kt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wind_kt")), refVal_wind_kt );
        setWindKt(refVal_wind_kt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wind_mph")))
    {
        utility::string_t refVal_wind_mph;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wind_mph")), refVal_wind_mph );
        setWindMph(refVal_wind_mph);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("windchill_c")))
    {
        utility::string_t refVal_windchill_c;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("windchill_c")), refVal_windchill_c );
        setWindchillC(refVal_windchill_c);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("windchill_f")))
    {
        utility::string_t refVal_windchill_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("windchill_f")), refVal_windchill_f );
        setWindchillF(refVal_windchill_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("windchill_string")))
    {
        utility::string_t refVal_windchill_string;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("windchill_string")), refVal_windchill_string );
        setWindchillString(refVal_windchill_string);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("davis_current_observation")))
    {
        std::shared_ptr<Davis_current_observation> refVal_davis_current_observation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("davis_current_observation")), refVal_davis_current_observation );
        setDavisCurrentObservation(refVal_davis_current_observation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("time_to_generate")))
    {
        utility::string_t refVal_time_to_generate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("time_to_generate")), refVal_time_to_generate );
        setTimeToGenerate(refVal_time_to_generate);
    }
    return ok;
}

utility::string_t Root::getCredit() const
{
    return m_Credit;
}

void Root::setCredit(const utility::string_t& value)
{
    m_Credit = value;
    m_CreditIsSet = true;
}

bool Root::creditIsSet() const
{
    return m_CreditIsSet;
}

void Root::unsetCredit()
{
    m_CreditIsSet = false;
}
utility::string_t Root::getCreditURL() const
{
    return m_Credit_URL;
}

void Root::setCreditURL(const utility::string_t& value)
{
    m_Credit_URL = value;
    m_Credit_URLIsSet = true;
}

bool Root::creditURLIsSet() const
{
    return m_Credit_URLIsSet;
}

void Root::unsetCredit_URL()
{
    m_Credit_URLIsSet = false;
}
utility::string_t Root::getDisclaimerUrl() const
{
    return m_Disclaimer_url;
}

void Root::setDisclaimerUrl(const utility::string_t& value)
{
    m_Disclaimer_url = value;
    m_Disclaimer_urlIsSet = true;
}

bool Root::disclaimerUrlIsSet() const
{
    return m_Disclaimer_urlIsSet;
}

void Root::unsetDisclaimer_url()
{
    m_Disclaimer_urlIsSet = false;
}
utility::string_t Root::getCopyrightUrl() const
{
    return m_Copyright_url;
}

void Root::setCopyrightUrl(const utility::string_t& value)
{
    m_Copyright_url = value;
    m_Copyright_urlIsSet = true;
}

bool Root::copyrightUrlIsSet() const
{
    return m_Copyright_urlIsSet;
}

void Root::unsetCopyright_url()
{
    m_Copyright_urlIsSet = false;
}
utility::string_t Root::getPrivacyPolicyUrl() const
{
    return m_Privacy_policy_url;
}

void Root::setPrivacyPolicyUrl(const utility::string_t& value)
{
    m_Privacy_policy_url = value;
    m_Privacy_policy_urlIsSet = true;
}

bool Root::privacyPolicyUrlIsSet() const
{
    return m_Privacy_policy_urlIsSet;
}

void Root::unsetPrivacy_policy_url()
{
    m_Privacy_policy_urlIsSet = false;
}
std::shared_ptr<Image> Root::getImage() const
{
    return m_Image;
}

void Root::setImage(const std::shared_ptr<Image>& value)
{
    m_Image = value;
    m_ImageIsSet = true;
}

bool Root::imageIsSet() const
{
    return m_ImageIsSet;
}

void Root::unsetImage()
{
    m_ImageIsSet = false;
}
utility::string_t Root::getSuggestedPickup() const
{
    return m_Suggested_pickup;
}

void Root::setSuggestedPickup(const utility::string_t& value)
{
    m_Suggested_pickup = value;
    m_Suggested_pickupIsSet = true;
}

bool Root::suggestedPickupIsSet() const
{
    return m_Suggested_pickupIsSet;
}

void Root::unsetSuggested_pickup()
{
    m_Suggested_pickupIsSet = false;
}
utility::string_t Root::getSuggestedPickupPeriod() const
{
    return m_Suggested_pickup_period;
}

void Root::setSuggestedPickupPeriod(const utility::string_t& value)
{
    m_Suggested_pickup_period = value;
    m_Suggested_pickup_periodIsSet = true;
}

bool Root::suggestedPickupPeriodIsSet() const
{
    return m_Suggested_pickup_periodIsSet;
}

void Root::unsetSuggested_pickup_period()
{
    m_Suggested_pickup_periodIsSet = false;
}
utility::string_t Root::getDewpointC() const
{
    return m_Dewpoint_c;
}

void Root::setDewpointC(const utility::string_t& value)
{
    m_Dewpoint_c = value;
    m_Dewpoint_cIsSet = true;
}

bool Root::dewpointCIsSet() const
{
    return m_Dewpoint_cIsSet;
}

void Root::unsetDewpoint_c()
{
    m_Dewpoint_cIsSet = false;
}
utility::string_t Root::getDewpointF() const
{
    return m_Dewpoint_f;
}

void Root::setDewpointF(const utility::string_t& value)
{
    m_Dewpoint_f = value;
    m_Dewpoint_fIsSet = true;
}

bool Root::dewpointFIsSet() const
{
    return m_Dewpoint_fIsSet;
}

void Root::unsetDewpoint_f()
{
    m_Dewpoint_fIsSet = false;
}
utility::string_t Root::getDewpointString() const
{
    return m_Dewpoint_string;
}

void Root::setDewpointString(const utility::string_t& value)
{
    m_Dewpoint_string = value;
    m_Dewpoint_stringIsSet = true;
}

bool Root::dewpointStringIsSet() const
{
    return m_Dewpoint_stringIsSet;
}

void Root::unsetDewpoint_string()
{
    m_Dewpoint_stringIsSet = false;
}
utility::string_t Root::getHeatIndexC() const
{
    return m_Heat_index_c;
}

void Root::setHeatIndexC(const utility::string_t& value)
{
    m_Heat_index_c = value;
    m_Heat_index_cIsSet = true;
}

bool Root::heatIndexCIsSet() const
{
    return m_Heat_index_cIsSet;
}

void Root::unsetHeat_index_c()
{
    m_Heat_index_cIsSet = false;
}
utility::string_t Root::getHeatIndexF() const
{
    return m_Heat_index_f;
}

void Root::setHeatIndexF(const utility::string_t& value)
{
    m_Heat_index_f = value;
    m_Heat_index_fIsSet = true;
}

bool Root::heatIndexFIsSet() const
{
    return m_Heat_index_fIsSet;
}

void Root::unsetHeat_index_f()
{
    m_Heat_index_fIsSet = false;
}
utility::string_t Root::getHeatIndexString() const
{
    return m_Heat_index_string;
}

void Root::setHeatIndexString(const utility::string_t& value)
{
    m_Heat_index_string = value;
    m_Heat_index_stringIsSet = true;
}

bool Root::heatIndexStringIsSet() const
{
    return m_Heat_index_stringIsSet;
}

void Root::unsetHeat_index_string()
{
    m_Heat_index_stringIsSet = false;
}
utility::string_t Root::getLocation() const
{
    return m_Location;
}

void Root::setLocation(const utility::string_t& value)
{
    m_Location = value;
    m_LocationIsSet = true;
}

bool Root::locationIsSet() const
{
    return m_LocationIsSet;
}

void Root::unsetLocation()
{
    m_LocationIsSet = false;
}
utility::string_t Root::getLatitude() const
{
    return m_Latitude;
}

void Root::setLatitude(const utility::string_t& value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}

bool Root::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void Root::unsetLatitude()
{
    m_LatitudeIsSet = false;
}
utility::string_t Root::getLongitude() const
{
    return m_Longitude;
}

void Root::setLongitude(const utility::string_t& value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}

bool Root::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void Root::unsetLongitude()
{
    m_LongitudeIsSet = false;
}
utility::string_t Root::getObservationTime() const
{
    return m_Observation_time;
}

void Root::setObservationTime(const utility::string_t& value)
{
    m_Observation_time = value;
    m_Observation_timeIsSet = true;
}

bool Root::observationTimeIsSet() const
{
    return m_Observation_timeIsSet;
}

void Root::unsetObservation_time()
{
    m_Observation_timeIsSet = false;
}
utility::string_t Root::getObservationTimeRfc822() const
{
    return m_Observation_time_rfc822;
}

void Root::setObservationTimeRfc822(const utility::string_t& value)
{
    m_Observation_time_rfc822 = value;
    m_Observation_time_rfc822IsSet = true;
}

bool Root::observationTimeRfc822IsSet() const
{
    return m_Observation_time_rfc822IsSet;
}

void Root::unsetObservation_time_rfc822()
{
    m_Observation_time_rfc822IsSet = false;
}
utility::string_t Root::getPressureIn() const
{
    return m_Pressure_in;
}

void Root::setPressureIn(const utility::string_t& value)
{
    m_Pressure_in = value;
    m_Pressure_inIsSet = true;
}

bool Root::pressureInIsSet() const
{
    return m_Pressure_inIsSet;
}

void Root::unsetPressure_in()
{
    m_Pressure_inIsSet = false;
}
utility::string_t Root::getPressureMb() const
{
    return m_Pressure_mb;
}

void Root::setPressureMb(const utility::string_t& value)
{
    m_Pressure_mb = value;
    m_Pressure_mbIsSet = true;
}

bool Root::pressureMbIsSet() const
{
    return m_Pressure_mbIsSet;
}

void Root::unsetPressure_mb()
{
    m_Pressure_mbIsSet = false;
}
utility::string_t Root::getPressureString() const
{
    return m_Pressure_string;
}

void Root::setPressureString(const utility::string_t& value)
{
    m_Pressure_string = value;
    m_Pressure_stringIsSet = true;
}

bool Root::pressureStringIsSet() const
{
    return m_Pressure_stringIsSet;
}

void Root::unsetPressure_string()
{
    m_Pressure_stringIsSet = false;
}
int32_t Root::getRelativeHumidity() const
{
    return m_Relative_humidity;
}

void Root::setRelativeHumidity(int32_t value)
{
    m_Relative_humidity = value;
    m_Relative_humidityIsSet = true;
}

bool Root::relativeHumidityIsSet() const
{
    return m_Relative_humidityIsSet;
}

void Root::unsetRelative_humidity()
{
    m_Relative_humidityIsSet = false;
}
utility::string_t Root::getStationId() const
{
    return m_Station_id;
}

void Root::setStationId(const utility::string_t& value)
{
    m_Station_id = value;
    m_Station_idIsSet = true;
}

bool Root::stationIdIsSet() const
{
    return m_Station_idIsSet;
}

void Root::unsetStation_id()
{
    m_Station_idIsSet = false;
}
utility::string_t Root::getTempC() const
{
    return m_Temp_c;
}

void Root::setTempC(const utility::string_t& value)
{
    m_Temp_c = value;
    m_Temp_cIsSet = true;
}

bool Root::tempCIsSet() const
{
    return m_Temp_cIsSet;
}

void Root::unsetTemp_c()
{
    m_Temp_cIsSet = false;
}
utility::string_t Root::getTempF() const
{
    return m_Temp_f;
}

void Root::setTempF(const utility::string_t& value)
{
    m_Temp_f = value;
    m_Temp_fIsSet = true;
}

bool Root::tempFIsSet() const
{
    return m_Temp_fIsSet;
}

void Root::unsetTemp_f()
{
    m_Temp_fIsSet = false;
}
utility::string_t Root::getTemperatureString() const
{
    return m_Temperature_string;
}

void Root::setTemperatureString(const utility::string_t& value)
{
    m_Temperature_string = value;
    m_Temperature_stringIsSet = true;
}

bool Root::temperatureStringIsSet() const
{
    return m_Temperature_stringIsSet;
}

void Root::unsetTemperature_string()
{
    m_Temperature_stringIsSet = false;
}
utility::string_t Root::getWindDegrees() const
{
    return m_Wind_degrees;
}

void Root::setWindDegrees(const utility::string_t& value)
{
    m_Wind_degrees = value;
    m_Wind_degreesIsSet = true;
}

bool Root::windDegreesIsSet() const
{
    return m_Wind_degreesIsSet;
}

void Root::unsetWind_degrees()
{
    m_Wind_degreesIsSet = false;
}
utility::string_t Root::getWindDir() const
{
    return m_Wind_dir;
}

void Root::setWindDir(const utility::string_t& value)
{
    m_Wind_dir = value;
    m_Wind_dirIsSet = true;
}

bool Root::windDirIsSet() const
{
    return m_Wind_dirIsSet;
}

void Root::unsetWind_dir()
{
    m_Wind_dirIsSet = false;
}
utility::string_t Root::getWindKt() const
{
    return m_Wind_kt;
}

void Root::setWindKt(const utility::string_t& value)
{
    m_Wind_kt = value;
    m_Wind_ktIsSet = true;
}

bool Root::windKtIsSet() const
{
    return m_Wind_ktIsSet;
}

void Root::unsetWind_kt()
{
    m_Wind_ktIsSet = false;
}
utility::string_t Root::getWindMph() const
{
    return m_Wind_mph;
}

void Root::setWindMph(const utility::string_t& value)
{
    m_Wind_mph = value;
    m_Wind_mphIsSet = true;
}

bool Root::windMphIsSet() const
{
    return m_Wind_mphIsSet;
}

void Root::unsetWind_mph()
{
    m_Wind_mphIsSet = false;
}
utility::string_t Root::getWindchillC() const
{
    return m_Windchill_c;
}

void Root::setWindchillC(const utility::string_t& value)
{
    m_Windchill_c = value;
    m_Windchill_cIsSet = true;
}

bool Root::windchillCIsSet() const
{
    return m_Windchill_cIsSet;
}

void Root::unsetWindchill_c()
{
    m_Windchill_cIsSet = false;
}
utility::string_t Root::getWindchillF() const
{
    return m_Windchill_f;
}

void Root::setWindchillF(const utility::string_t& value)
{
    m_Windchill_f = value;
    m_Windchill_fIsSet = true;
}

bool Root::windchillFIsSet() const
{
    return m_Windchill_fIsSet;
}

void Root::unsetWindchill_f()
{
    m_Windchill_fIsSet = false;
}
utility::string_t Root::getWindchillString() const
{
    return m_Windchill_string;
}

void Root::setWindchillString(const utility::string_t& value)
{
    m_Windchill_string = value;
    m_Windchill_stringIsSet = true;
}

bool Root::windchillStringIsSet() const
{
    return m_Windchill_stringIsSet;
}

void Root::unsetWindchill_string()
{
    m_Windchill_stringIsSet = false;
}
std::shared_ptr<Davis_current_observation> Root::getDavisCurrentObservation() const
{
    return m_Davis_current_observation;
}

void Root::setDavisCurrentObservation(const std::shared_ptr<Davis_current_observation>& value)
{
    m_Davis_current_observation = value;
    m_Davis_current_observationIsSet = true;
}

bool Root::davisCurrentObservationIsSet() const
{
    return m_Davis_current_observationIsSet;
}

void Root::unsetDavis_current_observation()
{
    m_Davis_current_observationIsSet = false;
}
utility::string_t Root::getTimeToGenerate() const
{
    return m_Time_to_generate;
}

void Root::setTimeToGenerate(const utility::string_t& value)
{
    m_Time_to_generate = value;
    m_Time_to_generateIsSet = true;
}

bool Root::timeToGenerateIsSet() const
{
    return m_Time_to_generateIsSet;
}

void Root::unsetTime_to_generate()
{
    m_Time_to_generateIsSet = false;
}
}
}
}
}


