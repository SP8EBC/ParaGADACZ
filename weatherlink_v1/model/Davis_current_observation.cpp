/**
 * WeatherLink API v1
 * First version of an API to get weather data from Davis stations
 *
 * The version of the OpenAPI document: 1.0.11
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Davis_current_observation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Davis_current_observation::Davis_current_observation()
{
    m_DID = utility::conversions::to_string_t("");
    m_DIDIsSet = false;
    m_Station_name = utility::conversions::to_string_t("");
    m_Station_nameIsSet = false;
    m_Observation_age = 0;
    m_Observation_ageIsSet = false;
    m_Dewpoint_day_high_f = utility::conversions::to_string_t("");
    m_Dewpoint_day_high_fIsSet = false;
    m_Dewpoint_day_high_time = utility::conversions::to_string_t("");
    m_Dewpoint_day_high_timeIsSet = false;
    m_Dewpoint_day_low_f = utility::conversions::to_string_t("");
    m_Dewpoint_day_low_fIsSet = false;
    m_Dewpoint_day_low_time = utility::conversions::to_string_t("");
    m_Dewpoint_day_low_timeIsSet = false;
    m_Dewpoint_month_high_f = utility::conversions::to_string_t("");
    m_Dewpoint_month_high_fIsSet = false;
    m_Dewpoint_month_low_f = utility::conversions::to_string_t("");
    m_Dewpoint_month_low_fIsSet = false;
    m_Dewpoint_year_high_f = utility::conversions::to_string_t("");
    m_Dewpoint_year_high_fIsSet = false;
    m_Dewpoint_year_low_f = utility::conversions::to_string_t("");
    m_Dewpoint_year_low_fIsSet = false;
    m_Heat_index_day_high_f = utility::conversions::to_string_t("");
    m_Heat_index_day_high_fIsSet = false;
    m_Heat_index_day_high_time = utility::conversions::to_string_t("");
    m_Heat_index_day_high_timeIsSet = false;
    m_Heat_index_month_high_f = utility::conversions::to_string_t("");
    m_Heat_index_month_high_fIsSet = false;
    m_Heat_index_year_high_f = utility::conversions::to_string_t("");
    m_Heat_index_year_high_fIsSet = false;
    m_Pressure_day_high_in = utility::conversions::to_string_t("");
    m_Pressure_day_high_inIsSet = false;
    m_Pressure_day_high_time = utility::conversions::to_string_t("");
    m_Pressure_day_high_timeIsSet = false;
    m_Pressure_day_low_in = utility::conversions::to_string_t("");
    m_Pressure_day_low_inIsSet = false;
    m_Pressure_day_low_time = utility::conversions::to_string_t("");
    m_Pressure_day_low_timeIsSet = false;
    m_Pressure_month_high_in = utility::conversions::to_string_t("");
    m_Pressure_month_high_inIsSet = false;
    m_Pressure_month_low_in = utility::conversions::to_string_t("");
    m_Pressure_month_low_inIsSet = false;
    m_Pressure_tendency_string = utility::conversions::to_string_t("");
    m_Pressure_tendency_stringIsSet = false;
    m_Pressure_year_high_in = utility::conversions::to_string_t("");
    m_Pressure_year_high_inIsSet = false;
    m_Pressure_year_low_in = utility::conversions::to_string_t("");
    m_Pressure_year_low_inIsSet = false;
    m_Rain_day_in = utility::conversions::to_string_t("");
    m_Rain_day_inIsSet = false;
    m_Rain_month_in = utility::conversions::to_string_t("");
    m_Rain_month_inIsSet = false;
    m_Rain_rate_day_high_in_per_hr = utility::conversions::to_string_t("");
    m_Rain_rate_day_high_in_per_hrIsSet = false;
    m_Rain_rate_hour_high_in_per_hr = utility::conversions::to_string_t("");
    m_Rain_rate_hour_high_in_per_hrIsSet = false;
    m_Rain_rate_in_per_hr = utility::conversions::to_string_t("");
    m_Rain_rate_in_per_hrIsSet = false;
    m_Rain_rate_month_high_in_per_hr = utility::conversions::to_string_t("");
    m_Rain_rate_month_high_in_per_hrIsSet = false;
    m_Rain_rate_year_high_in_per_hr = utility::conversions::to_string_t("");
    m_Rain_rate_year_high_in_per_hrIsSet = false;
    m_Rain_storm_in = utility::conversions::to_string_t("");
    m_Rain_storm_inIsSet = false;
    m_Rain_year_in = utility::conversions::to_string_t("");
    m_Rain_year_inIsSet = false;
    m_Relative_humidity_day_high = utility::conversions::to_string_t("");
    m_Relative_humidity_day_highIsSet = false;
    m_Relative_humidity_day_high_time = utility::conversions::to_string_t("");
    m_Relative_humidity_day_high_timeIsSet = false;
    m_Relative_humidity_day_low = utility::conversions::to_string_t("");
    m_Relative_humidity_day_lowIsSet = false;
    m_Relative_humidity_day_low_time = utility::conversions::to_string_t("");
    m_Relative_humidity_day_low_timeIsSet = false;
    m_Relative_humidity_month_high = utility::conversions::to_string_t("");
    m_Relative_humidity_month_highIsSet = false;
    m_Relative_humidity_in = utility::conversions::to_string_t("");
    m_Relative_humidity_inIsSet = false;
    m_Relative_humidity_in_day_high = utility::conversions::to_string_t("");
    m_Relative_humidity_in_day_highIsSet = false;
    m_Relative_humidity_in_day_high_time = utility::conversions::to_string_t("");
    m_Relative_humidity_in_day_high_timeIsSet = false;
    m_Relative_humidity_in_day_low = utility::conversions::to_string_t("");
    m_Relative_humidity_in_day_lowIsSet = false;
    m_Relative_humidity_in_day_low_time = utility::conversions::to_string_t("");
    m_Relative_humidity_in_day_low_timeIsSet = false;
    m_Relative_humidity_in_month_high = utility::conversions::to_string_t("");
    m_Relative_humidity_in_month_highIsSet = false;
    m_Relative_humidity_in_month_low = utility::conversions::to_string_t("");
    m_Relative_humidity_in_month_lowIsSet = false;
    m_Relative_humidity_in_year_high = utility::conversions::to_string_t("");
    m_Relative_humidity_in_year_highIsSet = false;
    m_Relative_humidity_in_year_low = utility::conversions::to_string_t("");
    m_Relative_humidity_in_year_lowIsSet = false;
    m_Sunrise = utility::conversions::to_string_t("");
    m_SunriseIsSet = false;
    m_Sunset = utility::conversions::to_string_t("");
    m_SunsetIsSet = false;
    m_Temp_day_high_f = utility::conversions::to_string_t("");
    m_Temp_day_high_fIsSet = false;
    m_Temp_day_high_time = utility::conversions::to_string_t("");
    m_Temp_day_high_timeIsSet = false;
    m_Temp_day_low_f = utility::conversions::to_string_t("");
    m_Temp_day_low_fIsSet = false;
    m_Temp_day_low_time = utility::conversions::to_string_t("");
    m_Temp_day_low_timeIsSet = false;
    m_Temp_month_high_f = utility::conversions::to_string_t("");
    m_Temp_month_high_fIsSet = false;
    m_Temp_month_low_f = utility::conversions::to_string_t("");
    m_Temp_month_low_fIsSet = false;
    m_Temp_year_high_f = utility::conversions::to_string_t("");
    m_Temp_year_high_fIsSet = false;
    m_Temp_year_low_f = utility::conversions::to_string_t("");
    m_Temp_year_low_fIsSet = false;
    m_Temp_in_day_high_f = utility::conversions::to_string_t("");
    m_Temp_in_day_high_fIsSet = false;
    m_Temp_in_day_high_time = utility::conversions::to_string_t("");
    m_Temp_in_day_high_timeIsSet = false;
    m_Temp_in_day_low_f = utility::conversions::to_string_t("");
    m_Temp_in_day_low_fIsSet = false;
    m_Temp_in_day_low_time = utility::conversions::to_string_t("");
    m_Temp_in_day_low_timeIsSet = false;
    m_Temp_in_f = utility::conversions::to_string_t("");
    m_Temp_in_fIsSet = false;
    m_Temp_in_month_high_f = utility::conversions::to_string_t("");
    m_Temp_in_month_high_fIsSet = false;
    m_Temp_in_month_low_f = utility::conversions::to_string_t("");
    m_Temp_in_month_low_fIsSet = false;
    m_Temp_in_year_high_f = utility::conversions::to_string_t("");
    m_Temp_in_year_high_fIsSet = false;
    m_Temp_in_year_low_f = utility::conversions::to_string_t("");
    m_Temp_in_year_low_fIsSet = false;
    m_Wind_day_high_mph = utility::conversions::to_string_t("");
    m_Wind_day_high_mphIsSet = false;
    m_Wind_day_high_time = utility::conversions::to_string_t("");
    m_Wind_day_high_timeIsSet = false;
    m_Wind_month_high_mph = utility::conversions::to_string_t("");
    m_Wind_month_high_mphIsSet = false;
    m_Wind_ten_min_avg_mph = utility::conversions::to_string_t("");
    m_Wind_ten_min_avg_mphIsSet = false;
    m_Wind_ten_min_gust_mph = utility::conversions::to_string_t("");
    m_Wind_ten_min_gust_mphIsSet = false;
    m_Wind_year_high_mph = utility::conversions::to_string_t("");
    m_Wind_year_high_mphIsSet = false;
    m_Windchill_day_low_f = utility::conversions::to_string_t("");
    m_Windchill_day_low_fIsSet = false;
    m_Windchill_day_low_time = utility::conversions::to_string_t("");
    m_Windchill_day_low_timeIsSet = false;
    m_Windchill_month_low_f = utility::conversions::to_string_t("");
    m_Windchill_month_low_fIsSet = false;
    m_Windchill_year_low_f = utility::conversions::to_string_t("");
    m_Windchill_year_low_fIsSet = false;
}

Davis_current_observation::~Davis_current_observation()
{
}

void Davis_current_observation::validate()
{
    // TODO: implement validation
}

web::json::value Davis_current_observation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DIDIsSet)
    {
        val[utility::conversions::to_string_t("DID")] = ModelBase::toJson(m_DID);
    }
    if(m_Station_nameIsSet)
    {
        val[utility::conversions::to_string_t("station_name")] = ModelBase::toJson(m_Station_name);
    }
    if(m_Observation_ageIsSet)
    {
        val[utility::conversions::to_string_t("observation_age")] = ModelBase::toJson(m_Observation_age);
    }
    if(m_Dewpoint_day_high_fIsSet)
    {
        val[utility::conversions::to_string_t("dewpoint_day_high_f")] = ModelBase::toJson(m_Dewpoint_day_high_f);
    }
    if(m_Dewpoint_day_high_timeIsSet)
    {
        val[utility::conversions::to_string_t("dewpoint_day_high_time")] = ModelBase::toJson(m_Dewpoint_day_high_time);
    }
    if(m_Dewpoint_day_low_fIsSet)
    {
        val[utility::conversions::to_string_t("dewpoint_day_low_f")] = ModelBase::toJson(m_Dewpoint_day_low_f);
    }
    if(m_Dewpoint_day_low_timeIsSet)
    {
        val[utility::conversions::to_string_t("dewpoint_day_low_time")] = ModelBase::toJson(m_Dewpoint_day_low_time);
    }
    if(m_Dewpoint_month_high_fIsSet)
    {
        val[utility::conversions::to_string_t("dewpoint_month_high_f")] = ModelBase::toJson(m_Dewpoint_month_high_f);
    }
    if(m_Dewpoint_month_low_fIsSet)
    {
        val[utility::conversions::to_string_t("dewpoint_month_low_f")] = ModelBase::toJson(m_Dewpoint_month_low_f);
    }
    if(m_Dewpoint_year_high_fIsSet)
    {
        val[utility::conversions::to_string_t("dewpoint_year_high_f")] = ModelBase::toJson(m_Dewpoint_year_high_f);
    }
    if(m_Dewpoint_year_low_fIsSet)
    {
        val[utility::conversions::to_string_t("dewpoint_year_low_f")] = ModelBase::toJson(m_Dewpoint_year_low_f);
    }
    if(m_Heat_index_day_high_fIsSet)
    {
        val[utility::conversions::to_string_t("heat_index_day_high_f")] = ModelBase::toJson(m_Heat_index_day_high_f);
    }
    if(m_Heat_index_day_high_timeIsSet)
    {
        val[utility::conversions::to_string_t("heat_index_day_high_time")] = ModelBase::toJson(m_Heat_index_day_high_time);
    }
    if(m_Heat_index_month_high_fIsSet)
    {
        val[utility::conversions::to_string_t("heat_index_month_high_f")] = ModelBase::toJson(m_Heat_index_month_high_f);
    }
    if(m_Heat_index_year_high_fIsSet)
    {
        val[utility::conversions::to_string_t("heat_index_year_high_f")] = ModelBase::toJson(m_Heat_index_year_high_f);
    }
    if(m_Pressure_day_high_inIsSet)
    {
        val[utility::conversions::to_string_t("pressure_day_high_in")] = ModelBase::toJson(m_Pressure_day_high_in);
    }
    if(m_Pressure_day_high_timeIsSet)
    {
        val[utility::conversions::to_string_t("pressure_day_high_time")] = ModelBase::toJson(m_Pressure_day_high_time);
    }
    if(m_Pressure_day_low_inIsSet)
    {
        val[utility::conversions::to_string_t("pressure_day_low_in")] = ModelBase::toJson(m_Pressure_day_low_in);
    }
    if(m_Pressure_day_low_timeIsSet)
    {
        val[utility::conversions::to_string_t("pressure_day_low_time")] = ModelBase::toJson(m_Pressure_day_low_time);
    }
    if(m_Pressure_month_high_inIsSet)
    {
        val[utility::conversions::to_string_t("pressure_month_high_in")] = ModelBase::toJson(m_Pressure_month_high_in);
    }
    if(m_Pressure_month_low_inIsSet)
    {
        val[utility::conversions::to_string_t("pressure_month_low_in")] = ModelBase::toJson(m_Pressure_month_low_in);
    }
    if(m_Pressure_tendency_stringIsSet)
    {
        val[utility::conversions::to_string_t("pressure_tendency_string")] = ModelBase::toJson(m_Pressure_tendency_string);
    }
    if(m_Pressure_year_high_inIsSet)
    {
        val[utility::conversions::to_string_t("pressure_year_high_in")] = ModelBase::toJson(m_Pressure_year_high_in);
    }
    if(m_Pressure_year_low_inIsSet)
    {
        val[utility::conversions::to_string_t("pressure_year_low_in")] = ModelBase::toJson(m_Pressure_year_low_in);
    }
    if(m_Rain_day_inIsSet)
    {
        val[utility::conversions::to_string_t("rain_day_in")] = ModelBase::toJson(m_Rain_day_in);
    }
    if(m_Rain_month_inIsSet)
    {
        val[utility::conversions::to_string_t("rain_month_in")] = ModelBase::toJson(m_Rain_month_in);
    }
    if(m_Rain_rate_day_high_in_per_hrIsSet)
    {
        val[utility::conversions::to_string_t("rain_rate_day_high_in_per_hr")] = ModelBase::toJson(m_Rain_rate_day_high_in_per_hr);
    }
    if(m_Rain_rate_hour_high_in_per_hrIsSet)
    {
        val[utility::conversions::to_string_t("rain_rate_hour_high_in_per_hr")] = ModelBase::toJson(m_Rain_rate_hour_high_in_per_hr);
    }
    if(m_Rain_rate_in_per_hrIsSet)
    {
        val[utility::conversions::to_string_t("rain_rate_in_per_hr")] = ModelBase::toJson(m_Rain_rate_in_per_hr);
    }
    if(m_Rain_rate_month_high_in_per_hrIsSet)
    {
        val[utility::conversions::to_string_t("rain_rate_month_high_in_per_hr")] = ModelBase::toJson(m_Rain_rate_month_high_in_per_hr);
    }
    if(m_Rain_rate_year_high_in_per_hrIsSet)
    {
        val[utility::conversions::to_string_t("rain_rate_year_high_in_per_hr")] = ModelBase::toJson(m_Rain_rate_year_high_in_per_hr);
    }
    if(m_Rain_storm_inIsSet)
    {
        val[utility::conversions::to_string_t("rain_storm_in")] = ModelBase::toJson(m_Rain_storm_in);
    }
    if(m_Rain_year_inIsSet)
    {
        val[utility::conversions::to_string_t("rain_year_in")] = ModelBase::toJson(m_Rain_year_in);
    }
    if(m_Relative_humidity_day_highIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_day_high")] = ModelBase::toJson(m_Relative_humidity_day_high);
    }
    if(m_Relative_humidity_day_high_timeIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_day_high_time")] = ModelBase::toJson(m_Relative_humidity_day_high_time);
    }
    if(m_Relative_humidity_day_lowIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_day_low")] = ModelBase::toJson(m_Relative_humidity_day_low);
    }
    if(m_Relative_humidity_day_low_timeIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_day_low_time")] = ModelBase::toJson(m_Relative_humidity_day_low_time);
    }
    if(m_Relative_humidity_month_highIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_month_high")] = ModelBase::toJson(m_Relative_humidity_month_high);
    }
    if(m_Relative_humidity_inIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_in")] = ModelBase::toJson(m_Relative_humidity_in);
    }
    if(m_Relative_humidity_in_day_highIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_in_day_high")] = ModelBase::toJson(m_Relative_humidity_in_day_high);
    }
    if(m_Relative_humidity_in_day_high_timeIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_in_day_high_time")] = ModelBase::toJson(m_Relative_humidity_in_day_high_time);
    }
    if(m_Relative_humidity_in_day_lowIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_in_day_low")] = ModelBase::toJson(m_Relative_humidity_in_day_low);
    }
    if(m_Relative_humidity_in_day_low_timeIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_in_day_low_time")] = ModelBase::toJson(m_Relative_humidity_in_day_low_time);
    }
    if(m_Relative_humidity_in_month_highIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_in_month_high")] = ModelBase::toJson(m_Relative_humidity_in_month_high);
    }
    if(m_Relative_humidity_in_month_lowIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_in_month_low")] = ModelBase::toJson(m_Relative_humidity_in_month_low);
    }
    if(m_Relative_humidity_in_year_highIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_in_year_high")] = ModelBase::toJson(m_Relative_humidity_in_year_high);
    }
    if(m_Relative_humidity_in_year_lowIsSet)
    {
        val[utility::conversions::to_string_t("relative_humidity_in_year_low")] = ModelBase::toJson(m_Relative_humidity_in_year_low);
    }
    if(m_SunriseIsSet)
    {
        val[utility::conversions::to_string_t("sunrise")] = ModelBase::toJson(m_Sunrise);
    }
    if(m_SunsetIsSet)
    {
        val[utility::conversions::to_string_t("sunset")] = ModelBase::toJson(m_Sunset);
    }
    if(m_Temp_day_high_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_day_high_f")] = ModelBase::toJson(m_Temp_day_high_f);
    }
    if(m_Temp_day_high_timeIsSet)
    {
        val[utility::conversions::to_string_t("temp_day_high_time")] = ModelBase::toJson(m_Temp_day_high_time);
    }
    if(m_Temp_day_low_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_day_low_f")] = ModelBase::toJson(m_Temp_day_low_f);
    }
    if(m_Temp_day_low_timeIsSet)
    {
        val[utility::conversions::to_string_t("temp_day_low_time")] = ModelBase::toJson(m_Temp_day_low_time);
    }
    if(m_Temp_month_high_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_month_high_f")] = ModelBase::toJson(m_Temp_month_high_f);
    }
    if(m_Temp_month_low_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_month_low_f")] = ModelBase::toJson(m_Temp_month_low_f);
    }
    if(m_Temp_year_high_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_year_high_f")] = ModelBase::toJson(m_Temp_year_high_f);
    }
    if(m_Temp_year_low_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_year_low_f")] = ModelBase::toJson(m_Temp_year_low_f);
    }
    if(m_Temp_in_day_high_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_in_day_high_f")] = ModelBase::toJson(m_Temp_in_day_high_f);
    }
    if(m_Temp_in_day_high_timeIsSet)
    {
        val[utility::conversions::to_string_t("temp_in_day_high_time")] = ModelBase::toJson(m_Temp_in_day_high_time);
    }
    if(m_Temp_in_day_low_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_in_day_low_f")] = ModelBase::toJson(m_Temp_in_day_low_f);
    }
    if(m_Temp_in_day_low_timeIsSet)
    {
        val[utility::conversions::to_string_t("temp_in_day_low_time")] = ModelBase::toJson(m_Temp_in_day_low_time);
    }
    if(m_Temp_in_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_in_f")] = ModelBase::toJson(m_Temp_in_f);
    }
    if(m_Temp_in_month_high_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_in_month_high_f")] = ModelBase::toJson(m_Temp_in_month_high_f);
    }
    if(m_Temp_in_month_low_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_in_month_low_f")] = ModelBase::toJson(m_Temp_in_month_low_f);
    }
    if(m_Temp_in_year_high_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_in_year_high_f")] = ModelBase::toJson(m_Temp_in_year_high_f);
    }
    if(m_Temp_in_year_low_fIsSet)
    {
        val[utility::conversions::to_string_t("temp_in_year_low_f")] = ModelBase::toJson(m_Temp_in_year_low_f);
    }
    if(m_Wind_day_high_mphIsSet)
    {
        val[utility::conversions::to_string_t("wind_day_high_mph")] = ModelBase::toJson(m_Wind_day_high_mph);
    }
    if(m_Wind_day_high_timeIsSet)
    {
        val[utility::conversions::to_string_t("wind_day_high_time")] = ModelBase::toJson(m_Wind_day_high_time);
    }
    if(m_Wind_month_high_mphIsSet)
    {
        val[utility::conversions::to_string_t("wind_month_high_mph")] = ModelBase::toJson(m_Wind_month_high_mph);
    }
    if(m_Wind_ten_min_avg_mphIsSet)
    {
        val[utility::conversions::to_string_t("wind_ten_min_avg_mph")] = ModelBase::toJson(m_Wind_ten_min_avg_mph);
    }
    if(m_Wind_ten_min_gust_mphIsSet)
    {
        val[utility::conversions::to_string_t("wind_ten_min_gust_mph")] = ModelBase::toJson(m_Wind_ten_min_gust_mph);
    }
    if(m_Wind_year_high_mphIsSet)
    {
        val[utility::conversions::to_string_t("wind_year_high_mph")] = ModelBase::toJson(m_Wind_year_high_mph);
    }
    if(m_Windchill_day_low_fIsSet)
    {
        val[utility::conversions::to_string_t("windchill_day_low_f")] = ModelBase::toJson(m_Windchill_day_low_f);
    }
    if(m_Windchill_day_low_timeIsSet)
    {
        val[utility::conversions::to_string_t("windchill_day_low_time")] = ModelBase::toJson(m_Windchill_day_low_time);
    }
    if(m_Windchill_month_low_fIsSet)
    {
        val[utility::conversions::to_string_t("windchill_month_low_f")] = ModelBase::toJson(m_Windchill_month_low_f);
    }
    if(m_Windchill_year_low_fIsSet)
    {
        val[utility::conversions::to_string_t("windchill_year_low_f")] = ModelBase::toJson(m_Windchill_year_low_f);
    }

    return val;
}

bool Davis_current_observation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("DID")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("DID"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_DID;
            ok &= ModelBase::fromJson(fieldValue, refVal_DID);
            setDID(refVal_DID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("station_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("station_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_station_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_station_name);
            setStationName(refVal_station_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("observation_age")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("observation_age"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_observation_age;
            ok &= ModelBase::fromJson(fieldValue, refVal_observation_age);
            setObservationAge(refVal_observation_age);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dewpoint_day_high_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dewpoint_day_high_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dewpoint_day_high_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_dewpoint_day_high_f);
            setDewpointDayHighF(refVal_dewpoint_day_high_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dewpoint_day_high_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dewpoint_day_high_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dewpoint_day_high_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_dewpoint_day_high_time);
            setDewpointDayHighTime(refVal_dewpoint_day_high_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dewpoint_day_low_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dewpoint_day_low_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dewpoint_day_low_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_dewpoint_day_low_f);
            setDewpointDayLowF(refVal_dewpoint_day_low_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dewpoint_day_low_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dewpoint_day_low_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dewpoint_day_low_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_dewpoint_day_low_time);
            setDewpointDayLowTime(refVal_dewpoint_day_low_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dewpoint_month_high_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dewpoint_month_high_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dewpoint_month_high_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_dewpoint_month_high_f);
            setDewpointMonthHighF(refVal_dewpoint_month_high_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dewpoint_month_low_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dewpoint_month_low_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dewpoint_month_low_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_dewpoint_month_low_f);
            setDewpointMonthLowF(refVal_dewpoint_month_low_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dewpoint_year_high_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dewpoint_year_high_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dewpoint_year_high_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_dewpoint_year_high_f);
            setDewpointYearHighF(refVal_dewpoint_year_high_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dewpoint_year_low_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("dewpoint_year_low_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_dewpoint_year_low_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_dewpoint_year_low_f);
            setDewpointYearLowF(refVal_dewpoint_year_low_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("heat_index_day_high_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("heat_index_day_high_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_heat_index_day_high_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_heat_index_day_high_f);
            setHeatIndexDayHighF(refVal_heat_index_day_high_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("heat_index_day_high_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("heat_index_day_high_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_heat_index_day_high_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_heat_index_day_high_time);
            setHeatIndexDayHighTime(refVal_heat_index_day_high_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("heat_index_month_high_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("heat_index_month_high_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_heat_index_month_high_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_heat_index_month_high_f);
            setHeatIndexMonthHighF(refVal_heat_index_month_high_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("heat_index_year_high_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("heat_index_year_high_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_heat_index_year_high_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_heat_index_year_high_f);
            setHeatIndexYearHighF(refVal_heat_index_year_high_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure_day_high_in")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure_day_high_in"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pressure_day_high_in;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure_day_high_in);
            setPressureDayHighIn(refVal_pressure_day_high_in);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure_day_high_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure_day_high_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pressure_day_high_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure_day_high_time);
            setPressureDayHighTime(refVal_pressure_day_high_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure_day_low_in")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure_day_low_in"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pressure_day_low_in;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure_day_low_in);
            setPressureDayLowIn(refVal_pressure_day_low_in);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure_day_low_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure_day_low_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pressure_day_low_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure_day_low_time);
            setPressureDayLowTime(refVal_pressure_day_low_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure_month_high_in")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure_month_high_in"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pressure_month_high_in;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure_month_high_in);
            setPressureMonthHighIn(refVal_pressure_month_high_in);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure_month_low_in")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure_month_low_in"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pressure_month_low_in;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure_month_low_in);
            setPressureMonthLowIn(refVal_pressure_month_low_in);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure_tendency_string")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure_tendency_string"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pressure_tendency_string;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure_tendency_string);
            setPressureTendencyString(refVal_pressure_tendency_string);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure_year_high_in")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure_year_high_in"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pressure_year_high_in;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure_year_high_in);
            setPressureYearHighIn(refVal_pressure_year_high_in);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pressure_year_low_in")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pressure_year_low_in"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pressure_year_low_in;
            ok &= ModelBase::fromJson(fieldValue, refVal_pressure_year_low_in);
            setPressureYearLowIn(refVal_pressure_year_low_in);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rain_day_in")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rain_day_in"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rain_day_in;
            ok &= ModelBase::fromJson(fieldValue, refVal_rain_day_in);
            setRainDayIn(refVal_rain_day_in);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rain_month_in")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rain_month_in"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rain_month_in;
            ok &= ModelBase::fromJson(fieldValue, refVal_rain_month_in);
            setRainMonthIn(refVal_rain_month_in);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rain_rate_day_high_in_per_hr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rain_rate_day_high_in_per_hr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rain_rate_day_high_in_per_hr;
            ok &= ModelBase::fromJson(fieldValue, refVal_rain_rate_day_high_in_per_hr);
            setRainRateDayHighInPerHr(refVal_rain_rate_day_high_in_per_hr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rain_rate_hour_high_in_per_hr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rain_rate_hour_high_in_per_hr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rain_rate_hour_high_in_per_hr;
            ok &= ModelBase::fromJson(fieldValue, refVal_rain_rate_hour_high_in_per_hr);
            setRainRateHourHighInPerHr(refVal_rain_rate_hour_high_in_per_hr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rain_rate_in_per_hr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rain_rate_in_per_hr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rain_rate_in_per_hr;
            ok &= ModelBase::fromJson(fieldValue, refVal_rain_rate_in_per_hr);
            setRainRateInPerHr(refVal_rain_rate_in_per_hr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rain_rate_month_high_in_per_hr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rain_rate_month_high_in_per_hr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rain_rate_month_high_in_per_hr;
            ok &= ModelBase::fromJson(fieldValue, refVal_rain_rate_month_high_in_per_hr);
            setRainRateMonthHighInPerHr(refVal_rain_rate_month_high_in_per_hr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rain_rate_year_high_in_per_hr")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rain_rate_year_high_in_per_hr"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rain_rate_year_high_in_per_hr;
            ok &= ModelBase::fromJson(fieldValue, refVal_rain_rate_year_high_in_per_hr);
            setRainRateYearHighInPerHr(refVal_rain_rate_year_high_in_per_hr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rain_storm_in")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rain_storm_in"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rain_storm_in;
            ok &= ModelBase::fromJson(fieldValue, refVal_rain_storm_in);
            setRainStormIn(refVal_rain_storm_in);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rain_year_in")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rain_year_in"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rain_year_in;
            ok &= ModelBase::fromJson(fieldValue, refVal_rain_year_in);
            setRainYearIn(refVal_rain_year_in);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_day_high")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_day_high"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_day_high;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_day_high);
            setRelativeHumidityDayHigh(refVal_relative_humidity_day_high);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_day_high_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_day_high_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_day_high_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_day_high_time);
            setRelativeHumidityDayHighTime(refVal_relative_humidity_day_high_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_day_low")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_day_low"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_day_low;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_day_low);
            setRelativeHumidityDayLow(refVal_relative_humidity_day_low);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_day_low_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_day_low_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_day_low_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_day_low_time);
            setRelativeHumidityDayLowTime(refVal_relative_humidity_day_low_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_month_high")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_month_high"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_month_high;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_month_high);
            setRelativeHumidityMonthHigh(refVal_relative_humidity_month_high);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_in")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_in"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_in;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_in);
            setRelativeHumidityIn(refVal_relative_humidity_in);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_in_day_high")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_in_day_high"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_in_day_high;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_in_day_high);
            setRelativeHumidityInDayHigh(refVal_relative_humidity_in_day_high);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_in_day_high_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_in_day_high_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_in_day_high_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_in_day_high_time);
            setRelativeHumidityInDayHighTime(refVal_relative_humidity_in_day_high_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_in_day_low")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_in_day_low"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_in_day_low;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_in_day_low);
            setRelativeHumidityInDayLow(refVal_relative_humidity_in_day_low);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_in_day_low_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_in_day_low_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_in_day_low_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_in_day_low_time);
            setRelativeHumidityInDayLowTime(refVal_relative_humidity_in_day_low_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_in_month_high")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_in_month_high"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_in_month_high;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_in_month_high);
            setRelativeHumidityInMonthHigh(refVal_relative_humidity_in_month_high);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_in_month_low")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_in_month_low"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_in_month_low;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_in_month_low);
            setRelativeHumidityInMonthLow(refVal_relative_humidity_in_month_low);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_in_year_high")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_in_year_high"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_in_year_high;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_in_year_high);
            setRelativeHumidityInYearHigh(refVal_relative_humidity_in_year_high);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("relative_humidity_in_year_low")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("relative_humidity_in_year_low"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_relative_humidity_in_year_low;
            ok &= ModelBase::fromJson(fieldValue, refVal_relative_humidity_in_year_low);
            setRelativeHumidityInYearLow(refVal_relative_humidity_in_year_low);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sunrise")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sunrise"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sunrise;
            ok &= ModelBase::fromJson(fieldValue, refVal_sunrise);
            setSunrise(refVal_sunrise);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sunset")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sunset"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sunset;
            ok &= ModelBase::fromJson(fieldValue, refVal_sunset);
            setSunset(refVal_sunset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_day_high_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_day_high_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_day_high_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_day_high_f);
            setTempDayHighF(refVal_temp_day_high_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_day_high_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_day_high_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_day_high_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_day_high_time);
            setTempDayHighTime(refVal_temp_day_high_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_day_low_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_day_low_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_day_low_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_day_low_f);
            setTempDayLowF(refVal_temp_day_low_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_day_low_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_day_low_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_day_low_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_day_low_time);
            setTempDayLowTime(refVal_temp_day_low_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_month_high_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_month_high_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_month_high_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_month_high_f);
            setTempMonthHighF(refVal_temp_month_high_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_month_low_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_month_low_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_month_low_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_month_low_f);
            setTempMonthLowF(refVal_temp_month_low_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_year_high_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_year_high_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_year_high_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_year_high_f);
            setTempYearHighF(refVal_temp_year_high_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_year_low_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_year_low_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_year_low_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_year_low_f);
            setTempYearLowF(refVal_temp_year_low_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_in_day_high_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_in_day_high_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_in_day_high_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_in_day_high_f);
            setTempInDayHighF(refVal_temp_in_day_high_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_in_day_high_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_in_day_high_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_in_day_high_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_in_day_high_time);
            setTempInDayHighTime(refVal_temp_in_day_high_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_in_day_low_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_in_day_low_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_in_day_low_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_in_day_low_f);
            setTempInDayLowF(refVal_temp_in_day_low_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_in_day_low_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_in_day_low_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_in_day_low_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_in_day_low_time);
            setTempInDayLowTime(refVal_temp_in_day_low_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_in_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_in_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_in_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_in_f);
            setTempInF(refVal_temp_in_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_in_month_high_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_in_month_high_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_in_month_high_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_in_month_high_f);
            setTempInMonthHighF(refVal_temp_in_month_high_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_in_month_low_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_in_month_low_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_in_month_low_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_in_month_low_f);
            setTempInMonthLowF(refVal_temp_in_month_low_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_in_year_high_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_in_year_high_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_in_year_high_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_in_year_high_f);
            setTempInYearHighF(refVal_temp_in_year_high_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("temp_in_year_low_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("temp_in_year_low_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_temp_in_year_low_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_temp_in_year_low_f);
            setTempInYearLowF(refVal_temp_in_year_low_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wind_day_high_mph")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wind_day_high_mph"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wind_day_high_mph;
            ok &= ModelBase::fromJson(fieldValue, refVal_wind_day_high_mph);
            setWindDayHighMph(refVal_wind_day_high_mph);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wind_day_high_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wind_day_high_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wind_day_high_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_wind_day_high_time);
            setWindDayHighTime(refVal_wind_day_high_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wind_month_high_mph")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wind_month_high_mph"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wind_month_high_mph;
            ok &= ModelBase::fromJson(fieldValue, refVal_wind_month_high_mph);
            setWindMonthHighMph(refVal_wind_month_high_mph);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wind_ten_min_avg_mph")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wind_ten_min_avg_mph"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wind_ten_min_avg_mph;
            ok &= ModelBase::fromJson(fieldValue, refVal_wind_ten_min_avg_mph);
            setWindTenMinAvgMph(refVal_wind_ten_min_avg_mph);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wind_ten_min_gust_mph")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wind_ten_min_gust_mph"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wind_ten_min_gust_mph;
            ok &= ModelBase::fromJson(fieldValue, refVal_wind_ten_min_gust_mph);
            setWindTenMinGustMph(refVal_wind_ten_min_gust_mph);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wind_year_high_mph")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wind_year_high_mph"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_wind_year_high_mph;
            ok &= ModelBase::fromJson(fieldValue, refVal_wind_year_high_mph);
            setWindYearHighMph(refVal_wind_year_high_mph);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("windchill_day_low_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("windchill_day_low_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_windchill_day_low_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_windchill_day_low_f);
            setWindchillDayLowF(refVal_windchill_day_low_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("windchill_day_low_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("windchill_day_low_time"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_windchill_day_low_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_windchill_day_low_time);
            setWindchillDayLowTime(refVal_windchill_day_low_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("windchill_month_low_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("windchill_month_low_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_windchill_month_low_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_windchill_month_low_f);
            setWindchillMonthLowF(refVal_windchill_month_low_f);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("windchill_year_low_f")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("windchill_year_low_f"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_windchill_year_low_f;
            ok &= ModelBase::fromJson(fieldValue, refVal_windchill_year_low_f);
            setWindchillYearLowF(refVal_windchill_year_low_f);
        }
    }
    return ok;
}

void Davis_current_observation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("DID"), m_DID));
    }
    if(m_Station_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("station_name"), m_Station_name));
    }
    if(m_Observation_ageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("observation_age"), m_Observation_age));
    }
    if(m_Dewpoint_day_high_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dewpoint_day_high_f"), m_Dewpoint_day_high_f));
    }
    if(m_Dewpoint_day_high_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dewpoint_day_high_time"), m_Dewpoint_day_high_time));
    }
    if(m_Dewpoint_day_low_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dewpoint_day_low_f"), m_Dewpoint_day_low_f));
    }
    if(m_Dewpoint_day_low_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dewpoint_day_low_time"), m_Dewpoint_day_low_time));
    }
    if(m_Dewpoint_month_high_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dewpoint_month_high_f"), m_Dewpoint_month_high_f));
    }
    if(m_Dewpoint_month_low_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dewpoint_month_low_f"), m_Dewpoint_month_low_f));
    }
    if(m_Dewpoint_year_high_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dewpoint_year_high_f"), m_Dewpoint_year_high_f));
    }
    if(m_Dewpoint_year_low_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dewpoint_year_low_f"), m_Dewpoint_year_low_f));
    }
    if(m_Heat_index_day_high_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("heat_index_day_high_f"), m_Heat_index_day_high_f));
    }
    if(m_Heat_index_day_high_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("heat_index_day_high_time"), m_Heat_index_day_high_time));
    }
    if(m_Heat_index_month_high_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("heat_index_month_high_f"), m_Heat_index_month_high_f));
    }
    if(m_Heat_index_year_high_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("heat_index_year_high_f"), m_Heat_index_year_high_f));
    }
    if(m_Pressure_day_high_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure_day_high_in"), m_Pressure_day_high_in));
    }
    if(m_Pressure_day_high_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure_day_high_time"), m_Pressure_day_high_time));
    }
    if(m_Pressure_day_low_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure_day_low_in"), m_Pressure_day_low_in));
    }
    if(m_Pressure_day_low_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure_day_low_time"), m_Pressure_day_low_time));
    }
    if(m_Pressure_month_high_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure_month_high_in"), m_Pressure_month_high_in));
    }
    if(m_Pressure_month_low_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure_month_low_in"), m_Pressure_month_low_in));
    }
    if(m_Pressure_tendency_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure_tendency_string"), m_Pressure_tendency_string));
    }
    if(m_Pressure_year_high_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure_year_high_in"), m_Pressure_year_high_in));
    }
    if(m_Pressure_year_low_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pressure_year_low_in"), m_Pressure_year_low_in));
    }
    if(m_Rain_day_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rain_day_in"), m_Rain_day_in));
    }
    if(m_Rain_month_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rain_month_in"), m_Rain_month_in));
    }
    if(m_Rain_rate_day_high_in_per_hrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rain_rate_day_high_in_per_hr"), m_Rain_rate_day_high_in_per_hr));
    }
    if(m_Rain_rate_hour_high_in_per_hrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rain_rate_hour_high_in_per_hr"), m_Rain_rate_hour_high_in_per_hr));
    }
    if(m_Rain_rate_in_per_hrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rain_rate_in_per_hr"), m_Rain_rate_in_per_hr));
    }
    if(m_Rain_rate_month_high_in_per_hrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rain_rate_month_high_in_per_hr"), m_Rain_rate_month_high_in_per_hr));
    }
    if(m_Rain_rate_year_high_in_per_hrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rain_rate_year_high_in_per_hr"), m_Rain_rate_year_high_in_per_hr));
    }
    if(m_Rain_storm_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rain_storm_in"), m_Rain_storm_in));
    }
    if(m_Rain_year_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rain_year_in"), m_Rain_year_in));
    }
    if(m_Relative_humidity_day_highIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_day_high"), m_Relative_humidity_day_high));
    }
    if(m_Relative_humidity_day_high_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_day_high_time"), m_Relative_humidity_day_high_time));
    }
    if(m_Relative_humidity_day_lowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_day_low"), m_Relative_humidity_day_low));
    }
    if(m_Relative_humidity_day_low_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_day_low_time"), m_Relative_humidity_day_low_time));
    }
    if(m_Relative_humidity_month_highIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_month_high"), m_Relative_humidity_month_high));
    }
    if(m_Relative_humidity_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_in"), m_Relative_humidity_in));
    }
    if(m_Relative_humidity_in_day_highIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_in_day_high"), m_Relative_humidity_in_day_high));
    }
    if(m_Relative_humidity_in_day_high_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_in_day_high_time"), m_Relative_humidity_in_day_high_time));
    }
    if(m_Relative_humidity_in_day_lowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_in_day_low"), m_Relative_humidity_in_day_low));
    }
    if(m_Relative_humidity_in_day_low_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_in_day_low_time"), m_Relative_humidity_in_day_low_time));
    }
    if(m_Relative_humidity_in_month_highIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_in_month_high"), m_Relative_humidity_in_month_high));
    }
    if(m_Relative_humidity_in_month_lowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_in_month_low"), m_Relative_humidity_in_month_low));
    }
    if(m_Relative_humidity_in_year_highIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_in_year_high"), m_Relative_humidity_in_year_high));
    }
    if(m_Relative_humidity_in_year_lowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("relative_humidity_in_year_low"), m_Relative_humidity_in_year_low));
    }
    if(m_SunriseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sunrise"), m_Sunrise));
    }
    if(m_SunsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sunset"), m_Sunset));
    }
    if(m_Temp_day_high_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_day_high_f"), m_Temp_day_high_f));
    }
    if(m_Temp_day_high_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_day_high_time"), m_Temp_day_high_time));
    }
    if(m_Temp_day_low_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_day_low_f"), m_Temp_day_low_f));
    }
    if(m_Temp_day_low_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_day_low_time"), m_Temp_day_low_time));
    }
    if(m_Temp_month_high_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_month_high_f"), m_Temp_month_high_f));
    }
    if(m_Temp_month_low_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_month_low_f"), m_Temp_month_low_f));
    }
    if(m_Temp_year_high_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_year_high_f"), m_Temp_year_high_f));
    }
    if(m_Temp_year_low_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_year_low_f"), m_Temp_year_low_f));
    }
    if(m_Temp_in_day_high_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_in_day_high_f"), m_Temp_in_day_high_f));
    }
    if(m_Temp_in_day_high_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_in_day_high_time"), m_Temp_in_day_high_time));
    }
    if(m_Temp_in_day_low_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_in_day_low_f"), m_Temp_in_day_low_f));
    }
    if(m_Temp_in_day_low_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_in_day_low_time"), m_Temp_in_day_low_time));
    }
    if(m_Temp_in_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_in_f"), m_Temp_in_f));
    }
    if(m_Temp_in_month_high_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_in_month_high_f"), m_Temp_in_month_high_f));
    }
    if(m_Temp_in_month_low_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_in_month_low_f"), m_Temp_in_month_low_f));
    }
    if(m_Temp_in_year_high_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_in_year_high_f"), m_Temp_in_year_high_f));
    }
    if(m_Temp_in_year_low_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("temp_in_year_low_f"), m_Temp_in_year_low_f));
    }
    if(m_Wind_day_high_mphIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wind_day_high_mph"), m_Wind_day_high_mph));
    }
    if(m_Wind_day_high_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wind_day_high_time"), m_Wind_day_high_time));
    }
    if(m_Wind_month_high_mphIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wind_month_high_mph"), m_Wind_month_high_mph));
    }
    if(m_Wind_ten_min_avg_mphIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wind_ten_min_avg_mph"), m_Wind_ten_min_avg_mph));
    }
    if(m_Wind_ten_min_gust_mphIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wind_ten_min_gust_mph"), m_Wind_ten_min_gust_mph));
    }
    if(m_Wind_year_high_mphIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wind_year_high_mph"), m_Wind_year_high_mph));
    }
    if(m_Windchill_day_low_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("windchill_day_low_f"), m_Windchill_day_low_f));
    }
    if(m_Windchill_day_low_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("windchill_day_low_time"), m_Windchill_day_low_time));
    }
    if(m_Windchill_month_low_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("windchill_month_low_f"), m_Windchill_month_low_f));
    }
    if(m_Windchill_year_low_fIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("windchill_year_low_f"), m_Windchill_year_low_f));
    }
}

bool Davis_current_observation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("DID")))
    {
        utility::string_t refVal_DID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("DID")), refVal_DID );
        setDID(refVal_DID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("station_name")))
    {
        utility::string_t refVal_station_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("station_name")), refVal_station_name );
        setStationName(refVal_station_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("observation_age")))
    {
        int32_t refVal_observation_age;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("observation_age")), refVal_observation_age );
        setObservationAge(refVal_observation_age);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dewpoint_day_high_f")))
    {
        utility::string_t refVal_dewpoint_day_high_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dewpoint_day_high_f")), refVal_dewpoint_day_high_f );
        setDewpointDayHighF(refVal_dewpoint_day_high_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dewpoint_day_high_time")))
    {
        utility::string_t refVal_dewpoint_day_high_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dewpoint_day_high_time")), refVal_dewpoint_day_high_time );
        setDewpointDayHighTime(refVal_dewpoint_day_high_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dewpoint_day_low_f")))
    {
        utility::string_t refVal_dewpoint_day_low_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dewpoint_day_low_f")), refVal_dewpoint_day_low_f );
        setDewpointDayLowF(refVal_dewpoint_day_low_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dewpoint_day_low_time")))
    {
        utility::string_t refVal_dewpoint_day_low_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dewpoint_day_low_time")), refVal_dewpoint_day_low_time );
        setDewpointDayLowTime(refVal_dewpoint_day_low_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dewpoint_month_high_f")))
    {
        utility::string_t refVal_dewpoint_month_high_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dewpoint_month_high_f")), refVal_dewpoint_month_high_f );
        setDewpointMonthHighF(refVal_dewpoint_month_high_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dewpoint_month_low_f")))
    {
        utility::string_t refVal_dewpoint_month_low_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dewpoint_month_low_f")), refVal_dewpoint_month_low_f );
        setDewpointMonthLowF(refVal_dewpoint_month_low_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dewpoint_year_high_f")))
    {
        utility::string_t refVal_dewpoint_year_high_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dewpoint_year_high_f")), refVal_dewpoint_year_high_f );
        setDewpointYearHighF(refVal_dewpoint_year_high_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dewpoint_year_low_f")))
    {
        utility::string_t refVal_dewpoint_year_low_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("dewpoint_year_low_f")), refVal_dewpoint_year_low_f );
        setDewpointYearLowF(refVal_dewpoint_year_low_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("heat_index_day_high_f")))
    {
        utility::string_t refVal_heat_index_day_high_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("heat_index_day_high_f")), refVal_heat_index_day_high_f );
        setHeatIndexDayHighF(refVal_heat_index_day_high_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("heat_index_day_high_time")))
    {
        utility::string_t refVal_heat_index_day_high_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("heat_index_day_high_time")), refVal_heat_index_day_high_time );
        setHeatIndexDayHighTime(refVal_heat_index_day_high_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("heat_index_month_high_f")))
    {
        utility::string_t refVal_heat_index_month_high_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("heat_index_month_high_f")), refVal_heat_index_month_high_f );
        setHeatIndexMonthHighF(refVal_heat_index_month_high_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("heat_index_year_high_f")))
    {
        utility::string_t refVal_heat_index_year_high_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("heat_index_year_high_f")), refVal_heat_index_year_high_f );
        setHeatIndexYearHighF(refVal_heat_index_year_high_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure_day_high_in")))
    {
        utility::string_t refVal_pressure_day_high_in;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure_day_high_in")), refVal_pressure_day_high_in );
        setPressureDayHighIn(refVal_pressure_day_high_in);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure_day_high_time")))
    {
        utility::string_t refVal_pressure_day_high_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure_day_high_time")), refVal_pressure_day_high_time );
        setPressureDayHighTime(refVal_pressure_day_high_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure_day_low_in")))
    {
        utility::string_t refVal_pressure_day_low_in;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure_day_low_in")), refVal_pressure_day_low_in );
        setPressureDayLowIn(refVal_pressure_day_low_in);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure_day_low_time")))
    {
        utility::string_t refVal_pressure_day_low_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure_day_low_time")), refVal_pressure_day_low_time );
        setPressureDayLowTime(refVal_pressure_day_low_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure_month_high_in")))
    {
        utility::string_t refVal_pressure_month_high_in;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure_month_high_in")), refVal_pressure_month_high_in );
        setPressureMonthHighIn(refVal_pressure_month_high_in);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure_month_low_in")))
    {
        utility::string_t refVal_pressure_month_low_in;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure_month_low_in")), refVal_pressure_month_low_in );
        setPressureMonthLowIn(refVal_pressure_month_low_in);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure_tendency_string")))
    {
        utility::string_t refVal_pressure_tendency_string;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure_tendency_string")), refVal_pressure_tendency_string );
        setPressureTendencyString(refVal_pressure_tendency_string);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure_year_high_in")))
    {
        utility::string_t refVal_pressure_year_high_in;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure_year_high_in")), refVal_pressure_year_high_in );
        setPressureYearHighIn(refVal_pressure_year_high_in);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pressure_year_low_in")))
    {
        utility::string_t refVal_pressure_year_low_in;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pressure_year_low_in")), refVal_pressure_year_low_in );
        setPressureYearLowIn(refVal_pressure_year_low_in);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rain_day_in")))
    {
        utility::string_t refVal_rain_day_in;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rain_day_in")), refVal_rain_day_in );
        setRainDayIn(refVal_rain_day_in);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rain_month_in")))
    {
        utility::string_t refVal_rain_month_in;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rain_month_in")), refVal_rain_month_in );
        setRainMonthIn(refVal_rain_month_in);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rain_rate_day_high_in_per_hr")))
    {
        utility::string_t refVal_rain_rate_day_high_in_per_hr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rain_rate_day_high_in_per_hr")), refVal_rain_rate_day_high_in_per_hr );
        setRainRateDayHighInPerHr(refVal_rain_rate_day_high_in_per_hr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rain_rate_hour_high_in_per_hr")))
    {
        utility::string_t refVal_rain_rate_hour_high_in_per_hr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rain_rate_hour_high_in_per_hr")), refVal_rain_rate_hour_high_in_per_hr );
        setRainRateHourHighInPerHr(refVal_rain_rate_hour_high_in_per_hr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rain_rate_in_per_hr")))
    {
        utility::string_t refVal_rain_rate_in_per_hr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rain_rate_in_per_hr")), refVal_rain_rate_in_per_hr );
        setRainRateInPerHr(refVal_rain_rate_in_per_hr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rain_rate_month_high_in_per_hr")))
    {
        utility::string_t refVal_rain_rate_month_high_in_per_hr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rain_rate_month_high_in_per_hr")), refVal_rain_rate_month_high_in_per_hr );
        setRainRateMonthHighInPerHr(refVal_rain_rate_month_high_in_per_hr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rain_rate_year_high_in_per_hr")))
    {
        utility::string_t refVal_rain_rate_year_high_in_per_hr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rain_rate_year_high_in_per_hr")), refVal_rain_rate_year_high_in_per_hr );
        setRainRateYearHighInPerHr(refVal_rain_rate_year_high_in_per_hr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rain_storm_in")))
    {
        utility::string_t refVal_rain_storm_in;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rain_storm_in")), refVal_rain_storm_in );
        setRainStormIn(refVal_rain_storm_in);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rain_year_in")))
    {
        utility::string_t refVal_rain_year_in;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rain_year_in")), refVal_rain_year_in );
        setRainYearIn(refVal_rain_year_in);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_day_high")))
    {
        utility::string_t refVal_relative_humidity_day_high;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_day_high")), refVal_relative_humidity_day_high );
        setRelativeHumidityDayHigh(refVal_relative_humidity_day_high);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_day_high_time")))
    {
        utility::string_t refVal_relative_humidity_day_high_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_day_high_time")), refVal_relative_humidity_day_high_time );
        setRelativeHumidityDayHighTime(refVal_relative_humidity_day_high_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_day_low")))
    {
        utility::string_t refVal_relative_humidity_day_low;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_day_low")), refVal_relative_humidity_day_low );
        setRelativeHumidityDayLow(refVal_relative_humidity_day_low);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_day_low_time")))
    {
        utility::string_t refVal_relative_humidity_day_low_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_day_low_time")), refVal_relative_humidity_day_low_time );
        setRelativeHumidityDayLowTime(refVal_relative_humidity_day_low_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_month_high")))
    {
        utility::string_t refVal_relative_humidity_month_high;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_month_high")), refVal_relative_humidity_month_high );
        setRelativeHumidityMonthHigh(refVal_relative_humidity_month_high);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_in")))
    {
        utility::string_t refVal_relative_humidity_in;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_in")), refVal_relative_humidity_in );
        setRelativeHumidityIn(refVal_relative_humidity_in);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_in_day_high")))
    {
        utility::string_t refVal_relative_humidity_in_day_high;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_in_day_high")), refVal_relative_humidity_in_day_high );
        setRelativeHumidityInDayHigh(refVal_relative_humidity_in_day_high);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_in_day_high_time")))
    {
        utility::string_t refVal_relative_humidity_in_day_high_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_in_day_high_time")), refVal_relative_humidity_in_day_high_time );
        setRelativeHumidityInDayHighTime(refVal_relative_humidity_in_day_high_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_in_day_low")))
    {
        utility::string_t refVal_relative_humidity_in_day_low;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_in_day_low")), refVal_relative_humidity_in_day_low );
        setRelativeHumidityInDayLow(refVal_relative_humidity_in_day_low);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_in_day_low_time")))
    {
        utility::string_t refVal_relative_humidity_in_day_low_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_in_day_low_time")), refVal_relative_humidity_in_day_low_time );
        setRelativeHumidityInDayLowTime(refVal_relative_humidity_in_day_low_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_in_month_high")))
    {
        utility::string_t refVal_relative_humidity_in_month_high;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_in_month_high")), refVal_relative_humidity_in_month_high );
        setRelativeHumidityInMonthHigh(refVal_relative_humidity_in_month_high);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_in_month_low")))
    {
        utility::string_t refVal_relative_humidity_in_month_low;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_in_month_low")), refVal_relative_humidity_in_month_low );
        setRelativeHumidityInMonthLow(refVal_relative_humidity_in_month_low);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_in_year_high")))
    {
        utility::string_t refVal_relative_humidity_in_year_high;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_in_year_high")), refVal_relative_humidity_in_year_high );
        setRelativeHumidityInYearHigh(refVal_relative_humidity_in_year_high);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("relative_humidity_in_year_low")))
    {
        utility::string_t refVal_relative_humidity_in_year_low;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("relative_humidity_in_year_low")), refVal_relative_humidity_in_year_low );
        setRelativeHumidityInYearLow(refVal_relative_humidity_in_year_low);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sunrise")))
    {
        utility::string_t refVal_sunrise;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sunrise")), refVal_sunrise );
        setSunrise(refVal_sunrise);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sunset")))
    {
        utility::string_t refVal_sunset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sunset")), refVal_sunset );
        setSunset(refVal_sunset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_day_high_f")))
    {
        utility::string_t refVal_temp_day_high_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_day_high_f")), refVal_temp_day_high_f );
        setTempDayHighF(refVal_temp_day_high_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_day_high_time")))
    {
        utility::string_t refVal_temp_day_high_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_day_high_time")), refVal_temp_day_high_time );
        setTempDayHighTime(refVal_temp_day_high_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_day_low_f")))
    {
        utility::string_t refVal_temp_day_low_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_day_low_f")), refVal_temp_day_low_f );
        setTempDayLowF(refVal_temp_day_low_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_day_low_time")))
    {
        utility::string_t refVal_temp_day_low_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_day_low_time")), refVal_temp_day_low_time );
        setTempDayLowTime(refVal_temp_day_low_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_month_high_f")))
    {
        utility::string_t refVal_temp_month_high_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_month_high_f")), refVal_temp_month_high_f );
        setTempMonthHighF(refVal_temp_month_high_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_month_low_f")))
    {
        utility::string_t refVal_temp_month_low_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_month_low_f")), refVal_temp_month_low_f );
        setTempMonthLowF(refVal_temp_month_low_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_year_high_f")))
    {
        utility::string_t refVal_temp_year_high_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_year_high_f")), refVal_temp_year_high_f );
        setTempYearHighF(refVal_temp_year_high_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_year_low_f")))
    {
        utility::string_t refVal_temp_year_low_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_year_low_f")), refVal_temp_year_low_f );
        setTempYearLowF(refVal_temp_year_low_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_in_day_high_f")))
    {
        utility::string_t refVal_temp_in_day_high_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_in_day_high_f")), refVal_temp_in_day_high_f );
        setTempInDayHighF(refVal_temp_in_day_high_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_in_day_high_time")))
    {
        utility::string_t refVal_temp_in_day_high_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_in_day_high_time")), refVal_temp_in_day_high_time );
        setTempInDayHighTime(refVal_temp_in_day_high_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_in_day_low_f")))
    {
        utility::string_t refVal_temp_in_day_low_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_in_day_low_f")), refVal_temp_in_day_low_f );
        setTempInDayLowF(refVal_temp_in_day_low_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_in_day_low_time")))
    {
        utility::string_t refVal_temp_in_day_low_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_in_day_low_time")), refVal_temp_in_day_low_time );
        setTempInDayLowTime(refVal_temp_in_day_low_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_in_f")))
    {
        utility::string_t refVal_temp_in_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_in_f")), refVal_temp_in_f );
        setTempInF(refVal_temp_in_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_in_month_high_f")))
    {
        utility::string_t refVal_temp_in_month_high_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_in_month_high_f")), refVal_temp_in_month_high_f );
        setTempInMonthHighF(refVal_temp_in_month_high_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_in_month_low_f")))
    {
        utility::string_t refVal_temp_in_month_low_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_in_month_low_f")), refVal_temp_in_month_low_f );
        setTempInMonthLowF(refVal_temp_in_month_low_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_in_year_high_f")))
    {
        utility::string_t refVal_temp_in_year_high_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_in_year_high_f")), refVal_temp_in_year_high_f );
        setTempInYearHighF(refVal_temp_in_year_high_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("temp_in_year_low_f")))
    {
        utility::string_t refVal_temp_in_year_low_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("temp_in_year_low_f")), refVal_temp_in_year_low_f );
        setTempInYearLowF(refVal_temp_in_year_low_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wind_day_high_mph")))
    {
        utility::string_t refVal_wind_day_high_mph;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wind_day_high_mph")), refVal_wind_day_high_mph );
        setWindDayHighMph(refVal_wind_day_high_mph);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wind_day_high_time")))
    {
        utility::string_t refVal_wind_day_high_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wind_day_high_time")), refVal_wind_day_high_time );
        setWindDayHighTime(refVal_wind_day_high_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wind_month_high_mph")))
    {
        utility::string_t refVal_wind_month_high_mph;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wind_month_high_mph")), refVal_wind_month_high_mph );
        setWindMonthHighMph(refVal_wind_month_high_mph);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wind_ten_min_avg_mph")))
    {
        utility::string_t refVal_wind_ten_min_avg_mph;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wind_ten_min_avg_mph")), refVal_wind_ten_min_avg_mph );
        setWindTenMinAvgMph(refVal_wind_ten_min_avg_mph);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wind_ten_min_gust_mph")))
    {
        utility::string_t refVal_wind_ten_min_gust_mph;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wind_ten_min_gust_mph")), refVal_wind_ten_min_gust_mph );
        setWindTenMinGustMph(refVal_wind_ten_min_gust_mph);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wind_year_high_mph")))
    {
        utility::string_t refVal_wind_year_high_mph;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wind_year_high_mph")), refVal_wind_year_high_mph );
        setWindYearHighMph(refVal_wind_year_high_mph);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("windchill_day_low_f")))
    {
        utility::string_t refVal_windchill_day_low_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("windchill_day_low_f")), refVal_windchill_day_low_f );
        setWindchillDayLowF(refVal_windchill_day_low_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("windchill_day_low_time")))
    {
        utility::string_t refVal_windchill_day_low_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("windchill_day_low_time")), refVal_windchill_day_low_time );
        setWindchillDayLowTime(refVal_windchill_day_low_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("windchill_month_low_f")))
    {
        utility::string_t refVal_windchill_month_low_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("windchill_month_low_f")), refVal_windchill_month_low_f );
        setWindchillMonthLowF(refVal_windchill_month_low_f);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("windchill_year_low_f")))
    {
        utility::string_t refVal_windchill_year_low_f;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("windchill_year_low_f")), refVal_windchill_year_low_f );
        setWindchillYearLowF(refVal_windchill_year_low_f);
    }
    return ok;
}

utility::string_t Davis_current_observation::getDID() const
{
    return m_DID;
}

void Davis_current_observation::setDID(const utility::string_t& value)
{
    m_DID = value;
    m_DIDIsSet = true;
}

bool Davis_current_observation::dIDIsSet() const
{
    return m_DIDIsSet;
}

void Davis_current_observation::unsetDID()
{
    m_DIDIsSet = false;
}
utility::string_t Davis_current_observation::getStationName() const
{
    return m_Station_name;
}

void Davis_current_observation::setStationName(const utility::string_t& value)
{
    m_Station_name = value;
    m_Station_nameIsSet = true;
}

bool Davis_current_observation::stationNameIsSet() const
{
    return m_Station_nameIsSet;
}

void Davis_current_observation::unsetStation_name()
{
    m_Station_nameIsSet = false;
}
int32_t Davis_current_observation::getObservationAge() const
{
    return m_Observation_age;
}

void Davis_current_observation::setObservationAge(int32_t value)
{
    m_Observation_age = value;
    m_Observation_ageIsSet = true;
}

bool Davis_current_observation::observationAgeIsSet() const
{
    return m_Observation_ageIsSet;
}

void Davis_current_observation::unsetObservation_age()
{
    m_Observation_ageIsSet = false;
}
utility::string_t Davis_current_observation::getDewpointDayHighF() const
{
    return m_Dewpoint_day_high_f;
}

void Davis_current_observation::setDewpointDayHighF(const utility::string_t& value)
{
    m_Dewpoint_day_high_f = value;
    m_Dewpoint_day_high_fIsSet = true;
}

bool Davis_current_observation::dewpointDayHighFIsSet() const
{
    return m_Dewpoint_day_high_fIsSet;
}

void Davis_current_observation::unsetDewpoint_day_high_f()
{
    m_Dewpoint_day_high_fIsSet = false;
}
utility::string_t Davis_current_observation::getDewpointDayHighTime() const
{
    return m_Dewpoint_day_high_time;
}

void Davis_current_observation::setDewpointDayHighTime(const utility::string_t& value)
{
    m_Dewpoint_day_high_time = value;
    m_Dewpoint_day_high_timeIsSet = true;
}

bool Davis_current_observation::dewpointDayHighTimeIsSet() const
{
    return m_Dewpoint_day_high_timeIsSet;
}

void Davis_current_observation::unsetDewpoint_day_high_time()
{
    m_Dewpoint_day_high_timeIsSet = false;
}
utility::string_t Davis_current_observation::getDewpointDayLowF() const
{
    return m_Dewpoint_day_low_f;
}

void Davis_current_observation::setDewpointDayLowF(const utility::string_t& value)
{
    m_Dewpoint_day_low_f = value;
    m_Dewpoint_day_low_fIsSet = true;
}

bool Davis_current_observation::dewpointDayLowFIsSet() const
{
    return m_Dewpoint_day_low_fIsSet;
}

void Davis_current_observation::unsetDewpoint_day_low_f()
{
    m_Dewpoint_day_low_fIsSet = false;
}
utility::string_t Davis_current_observation::getDewpointDayLowTime() const
{
    return m_Dewpoint_day_low_time;
}

void Davis_current_observation::setDewpointDayLowTime(const utility::string_t& value)
{
    m_Dewpoint_day_low_time = value;
    m_Dewpoint_day_low_timeIsSet = true;
}

bool Davis_current_observation::dewpointDayLowTimeIsSet() const
{
    return m_Dewpoint_day_low_timeIsSet;
}

void Davis_current_observation::unsetDewpoint_day_low_time()
{
    m_Dewpoint_day_low_timeIsSet = false;
}
utility::string_t Davis_current_observation::getDewpointMonthHighF() const
{
    return m_Dewpoint_month_high_f;
}

void Davis_current_observation::setDewpointMonthHighF(const utility::string_t& value)
{
    m_Dewpoint_month_high_f = value;
    m_Dewpoint_month_high_fIsSet = true;
}

bool Davis_current_observation::dewpointMonthHighFIsSet() const
{
    return m_Dewpoint_month_high_fIsSet;
}

void Davis_current_observation::unsetDewpoint_month_high_f()
{
    m_Dewpoint_month_high_fIsSet = false;
}
utility::string_t Davis_current_observation::getDewpointMonthLowF() const
{
    return m_Dewpoint_month_low_f;
}

void Davis_current_observation::setDewpointMonthLowF(const utility::string_t& value)
{
    m_Dewpoint_month_low_f = value;
    m_Dewpoint_month_low_fIsSet = true;
}

bool Davis_current_observation::dewpointMonthLowFIsSet() const
{
    return m_Dewpoint_month_low_fIsSet;
}

void Davis_current_observation::unsetDewpoint_month_low_f()
{
    m_Dewpoint_month_low_fIsSet = false;
}
utility::string_t Davis_current_observation::getDewpointYearHighF() const
{
    return m_Dewpoint_year_high_f;
}

void Davis_current_observation::setDewpointYearHighF(const utility::string_t& value)
{
    m_Dewpoint_year_high_f = value;
    m_Dewpoint_year_high_fIsSet = true;
}

bool Davis_current_observation::dewpointYearHighFIsSet() const
{
    return m_Dewpoint_year_high_fIsSet;
}

void Davis_current_observation::unsetDewpoint_year_high_f()
{
    m_Dewpoint_year_high_fIsSet = false;
}
utility::string_t Davis_current_observation::getDewpointYearLowF() const
{
    return m_Dewpoint_year_low_f;
}

void Davis_current_observation::setDewpointYearLowF(const utility::string_t& value)
{
    m_Dewpoint_year_low_f = value;
    m_Dewpoint_year_low_fIsSet = true;
}

bool Davis_current_observation::dewpointYearLowFIsSet() const
{
    return m_Dewpoint_year_low_fIsSet;
}

void Davis_current_observation::unsetDewpoint_year_low_f()
{
    m_Dewpoint_year_low_fIsSet = false;
}
utility::string_t Davis_current_observation::getHeatIndexDayHighF() const
{
    return m_Heat_index_day_high_f;
}

void Davis_current_observation::setHeatIndexDayHighF(const utility::string_t& value)
{
    m_Heat_index_day_high_f = value;
    m_Heat_index_day_high_fIsSet = true;
}

bool Davis_current_observation::heatIndexDayHighFIsSet() const
{
    return m_Heat_index_day_high_fIsSet;
}

void Davis_current_observation::unsetHeat_index_day_high_f()
{
    m_Heat_index_day_high_fIsSet = false;
}
utility::string_t Davis_current_observation::getHeatIndexDayHighTime() const
{
    return m_Heat_index_day_high_time;
}

void Davis_current_observation::setHeatIndexDayHighTime(const utility::string_t& value)
{
    m_Heat_index_day_high_time = value;
    m_Heat_index_day_high_timeIsSet = true;
}

bool Davis_current_observation::heatIndexDayHighTimeIsSet() const
{
    return m_Heat_index_day_high_timeIsSet;
}

void Davis_current_observation::unsetHeat_index_day_high_time()
{
    m_Heat_index_day_high_timeIsSet = false;
}
utility::string_t Davis_current_observation::getHeatIndexMonthHighF() const
{
    return m_Heat_index_month_high_f;
}

void Davis_current_observation::setHeatIndexMonthHighF(const utility::string_t& value)
{
    m_Heat_index_month_high_f = value;
    m_Heat_index_month_high_fIsSet = true;
}

bool Davis_current_observation::heatIndexMonthHighFIsSet() const
{
    return m_Heat_index_month_high_fIsSet;
}

void Davis_current_observation::unsetHeat_index_month_high_f()
{
    m_Heat_index_month_high_fIsSet = false;
}
utility::string_t Davis_current_observation::getHeatIndexYearHighF() const
{
    return m_Heat_index_year_high_f;
}

void Davis_current_observation::setHeatIndexYearHighF(const utility::string_t& value)
{
    m_Heat_index_year_high_f = value;
    m_Heat_index_year_high_fIsSet = true;
}

bool Davis_current_observation::heatIndexYearHighFIsSet() const
{
    return m_Heat_index_year_high_fIsSet;
}

void Davis_current_observation::unsetHeat_index_year_high_f()
{
    m_Heat_index_year_high_fIsSet = false;
}
utility::string_t Davis_current_observation::getPressureDayHighIn() const
{
    return m_Pressure_day_high_in;
}

void Davis_current_observation::setPressureDayHighIn(const utility::string_t& value)
{
    m_Pressure_day_high_in = value;
    m_Pressure_day_high_inIsSet = true;
}

bool Davis_current_observation::pressureDayHighInIsSet() const
{
    return m_Pressure_day_high_inIsSet;
}

void Davis_current_observation::unsetPressure_day_high_in()
{
    m_Pressure_day_high_inIsSet = false;
}
utility::string_t Davis_current_observation::getPressureDayHighTime() const
{
    return m_Pressure_day_high_time;
}

void Davis_current_observation::setPressureDayHighTime(const utility::string_t& value)
{
    m_Pressure_day_high_time = value;
    m_Pressure_day_high_timeIsSet = true;
}

bool Davis_current_observation::pressureDayHighTimeIsSet() const
{
    return m_Pressure_day_high_timeIsSet;
}

void Davis_current_observation::unsetPressure_day_high_time()
{
    m_Pressure_day_high_timeIsSet = false;
}
utility::string_t Davis_current_observation::getPressureDayLowIn() const
{
    return m_Pressure_day_low_in;
}

void Davis_current_observation::setPressureDayLowIn(const utility::string_t& value)
{
    m_Pressure_day_low_in = value;
    m_Pressure_day_low_inIsSet = true;
}

bool Davis_current_observation::pressureDayLowInIsSet() const
{
    return m_Pressure_day_low_inIsSet;
}

void Davis_current_observation::unsetPressure_day_low_in()
{
    m_Pressure_day_low_inIsSet = false;
}
utility::string_t Davis_current_observation::getPressureDayLowTime() const
{
    return m_Pressure_day_low_time;
}

void Davis_current_observation::setPressureDayLowTime(const utility::string_t& value)
{
    m_Pressure_day_low_time = value;
    m_Pressure_day_low_timeIsSet = true;
}

bool Davis_current_observation::pressureDayLowTimeIsSet() const
{
    return m_Pressure_day_low_timeIsSet;
}

void Davis_current_observation::unsetPressure_day_low_time()
{
    m_Pressure_day_low_timeIsSet = false;
}
utility::string_t Davis_current_observation::getPressureMonthHighIn() const
{
    return m_Pressure_month_high_in;
}

void Davis_current_observation::setPressureMonthHighIn(const utility::string_t& value)
{
    m_Pressure_month_high_in = value;
    m_Pressure_month_high_inIsSet = true;
}

bool Davis_current_observation::pressureMonthHighInIsSet() const
{
    return m_Pressure_month_high_inIsSet;
}

void Davis_current_observation::unsetPressure_month_high_in()
{
    m_Pressure_month_high_inIsSet = false;
}
utility::string_t Davis_current_observation::getPressureMonthLowIn() const
{
    return m_Pressure_month_low_in;
}

void Davis_current_observation::setPressureMonthLowIn(const utility::string_t& value)
{
    m_Pressure_month_low_in = value;
    m_Pressure_month_low_inIsSet = true;
}

bool Davis_current_observation::pressureMonthLowInIsSet() const
{
    return m_Pressure_month_low_inIsSet;
}

void Davis_current_observation::unsetPressure_month_low_in()
{
    m_Pressure_month_low_inIsSet = false;
}
utility::string_t Davis_current_observation::getPressureTendencyString() const
{
    return m_Pressure_tendency_string;
}

void Davis_current_observation::setPressureTendencyString(const utility::string_t& value)
{
    m_Pressure_tendency_string = value;
    m_Pressure_tendency_stringIsSet = true;
}

bool Davis_current_observation::pressureTendencyStringIsSet() const
{
    return m_Pressure_tendency_stringIsSet;
}

void Davis_current_observation::unsetPressure_tendency_string()
{
    m_Pressure_tendency_stringIsSet = false;
}
utility::string_t Davis_current_observation::getPressureYearHighIn() const
{
    return m_Pressure_year_high_in;
}

void Davis_current_observation::setPressureYearHighIn(const utility::string_t& value)
{
    m_Pressure_year_high_in = value;
    m_Pressure_year_high_inIsSet = true;
}

bool Davis_current_observation::pressureYearHighInIsSet() const
{
    return m_Pressure_year_high_inIsSet;
}

void Davis_current_observation::unsetPressure_year_high_in()
{
    m_Pressure_year_high_inIsSet = false;
}
utility::string_t Davis_current_observation::getPressureYearLowIn() const
{
    return m_Pressure_year_low_in;
}

void Davis_current_observation::setPressureYearLowIn(const utility::string_t& value)
{
    m_Pressure_year_low_in = value;
    m_Pressure_year_low_inIsSet = true;
}

bool Davis_current_observation::pressureYearLowInIsSet() const
{
    return m_Pressure_year_low_inIsSet;
}

void Davis_current_observation::unsetPressure_year_low_in()
{
    m_Pressure_year_low_inIsSet = false;
}
utility::string_t Davis_current_observation::getRainDayIn() const
{
    return m_Rain_day_in;
}

void Davis_current_observation::setRainDayIn(const utility::string_t& value)
{
    m_Rain_day_in = value;
    m_Rain_day_inIsSet = true;
}

bool Davis_current_observation::rainDayInIsSet() const
{
    return m_Rain_day_inIsSet;
}

void Davis_current_observation::unsetRain_day_in()
{
    m_Rain_day_inIsSet = false;
}
utility::string_t Davis_current_observation::getRainMonthIn() const
{
    return m_Rain_month_in;
}

void Davis_current_observation::setRainMonthIn(const utility::string_t& value)
{
    m_Rain_month_in = value;
    m_Rain_month_inIsSet = true;
}

bool Davis_current_observation::rainMonthInIsSet() const
{
    return m_Rain_month_inIsSet;
}

void Davis_current_observation::unsetRain_month_in()
{
    m_Rain_month_inIsSet = false;
}
utility::string_t Davis_current_observation::getRainRateDayHighInPerHr() const
{
    return m_Rain_rate_day_high_in_per_hr;
}

void Davis_current_observation::setRainRateDayHighInPerHr(const utility::string_t& value)
{
    m_Rain_rate_day_high_in_per_hr = value;
    m_Rain_rate_day_high_in_per_hrIsSet = true;
}

bool Davis_current_observation::rainRateDayHighInPerHrIsSet() const
{
    return m_Rain_rate_day_high_in_per_hrIsSet;
}

void Davis_current_observation::unsetRain_rate_day_high_in_per_hr()
{
    m_Rain_rate_day_high_in_per_hrIsSet = false;
}
utility::string_t Davis_current_observation::getRainRateHourHighInPerHr() const
{
    return m_Rain_rate_hour_high_in_per_hr;
}

void Davis_current_observation::setRainRateHourHighInPerHr(const utility::string_t& value)
{
    m_Rain_rate_hour_high_in_per_hr = value;
    m_Rain_rate_hour_high_in_per_hrIsSet = true;
}

bool Davis_current_observation::rainRateHourHighInPerHrIsSet() const
{
    return m_Rain_rate_hour_high_in_per_hrIsSet;
}

void Davis_current_observation::unsetRain_rate_hour_high_in_per_hr()
{
    m_Rain_rate_hour_high_in_per_hrIsSet = false;
}
utility::string_t Davis_current_observation::getRainRateInPerHr() const
{
    return m_Rain_rate_in_per_hr;
}

void Davis_current_observation::setRainRateInPerHr(const utility::string_t& value)
{
    m_Rain_rate_in_per_hr = value;
    m_Rain_rate_in_per_hrIsSet = true;
}

bool Davis_current_observation::rainRateInPerHrIsSet() const
{
    return m_Rain_rate_in_per_hrIsSet;
}

void Davis_current_observation::unsetRain_rate_in_per_hr()
{
    m_Rain_rate_in_per_hrIsSet = false;
}
utility::string_t Davis_current_observation::getRainRateMonthHighInPerHr() const
{
    return m_Rain_rate_month_high_in_per_hr;
}

void Davis_current_observation::setRainRateMonthHighInPerHr(const utility::string_t& value)
{
    m_Rain_rate_month_high_in_per_hr = value;
    m_Rain_rate_month_high_in_per_hrIsSet = true;
}

bool Davis_current_observation::rainRateMonthHighInPerHrIsSet() const
{
    return m_Rain_rate_month_high_in_per_hrIsSet;
}

void Davis_current_observation::unsetRain_rate_month_high_in_per_hr()
{
    m_Rain_rate_month_high_in_per_hrIsSet = false;
}
utility::string_t Davis_current_observation::getRainRateYearHighInPerHr() const
{
    return m_Rain_rate_year_high_in_per_hr;
}

void Davis_current_observation::setRainRateYearHighInPerHr(const utility::string_t& value)
{
    m_Rain_rate_year_high_in_per_hr = value;
    m_Rain_rate_year_high_in_per_hrIsSet = true;
}

bool Davis_current_observation::rainRateYearHighInPerHrIsSet() const
{
    return m_Rain_rate_year_high_in_per_hrIsSet;
}

void Davis_current_observation::unsetRain_rate_year_high_in_per_hr()
{
    m_Rain_rate_year_high_in_per_hrIsSet = false;
}
utility::string_t Davis_current_observation::getRainStormIn() const
{
    return m_Rain_storm_in;
}

void Davis_current_observation::setRainStormIn(const utility::string_t& value)
{
    m_Rain_storm_in = value;
    m_Rain_storm_inIsSet = true;
}

bool Davis_current_observation::rainStormInIsSet() const
{
    return m_Rain_storm_inIsSet;
}

void Davis_current_observation::unsetRain_storm_in()
{
    m_Rain_storm_inIsSet = false;
}
utility::string_t Davis_current_observation::getRainYearIn() const
{
    return m_Rain_year_in;
}

void Davis_current_observation::setRainYearIn(const utility::string_t& value)
{
    m_Rain_year_in = value;
    m_Rain_year_inIsSet = true;
}

bool Davis_current_observation::rainYearInIsSet() const
{
    return m_Rain_year_inIsSet;
}

void Davis_current_observation::unsetRain_year_in()
{
    m_Rain_year_inIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityDayHigh() const
{
    return m_Relative_humidity_day_high;
}

void Davis_current_observation::setRelativeHumidityDayHigh(const utility::string_t& value)
{
    m_Relative_humidity_day_high = value;
    m_Relative_humidity_day_highIsSet = true;
}

bool Davis_current_observation::relativeHumidityDayHighIsSet() const
{
    return m_Relative_humidity_day_highIsSet;
}

void Davis_current_observation::unsetRelative_humidity_day_high()
{
    m_Relative_humidity_day_highIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityDayHighTime() const
{
    return m_Relative_humidity_day_high_time;
}

void Davis_current_observation::setRelativeHumidityDayHighTime(const utility::string_t& value)
{
    m_Relative_humidity_day_high_time = value;
    m_Relative_humidity_day_high_timeIsSet = true;
}

bool Davis_current_observation::relativeHumidityDayHighTimeIsSet() const
{
    return m_Relative_humidity_day_high_timeIsSet;
}

void Davis_current_observation::unsetRelative_humidity_day_high_time()
{
    m_Relative_humidity_day_high_timeIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityDayLow() const
{
    return m_Relative_humidity_day_low;
}

void Davis_current_observation::setRelativeHumidityDayLow(const utility::string_t& value)
{
    m_Relative_humidity_day_low = value;
    m_Relative_humidity_day_lowIsSet = true;
}

bool Davis_current_observation::relativeHumidityDayLowIsSet() const
{
    return m_Relative_humidity_day_lowIsSet;
}

void Davis_current_observation::unsetRelative_humidity_day_low()
{
    m_Relative_humidity_day_lowIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityDayLowTime() const
{
    return m_Relative_humidity_day_low_time;
}

void Davis_current_observation::setRelativeHumidityDayLowTime(const utility::string_t& value)
{
    m_Relative_humidity_day_low_time = value;
    m_Relative_humidity_day_low_timeIsSet = true;
}

bool Davis_current_observation::relativeHumidityDayLowTimeIsSet() const
{
    return m_Relative_humidity_day_low_timeIsSet;
}

void Davis_current_observation::unsetRelative_humidity_day_low_time()
{
    m_Relative_humidity_day_low_timeIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityMonthHigh() const
{
    return m_Relative_humidity_month_high;
}

void Davis_current_observation::setRelativeHumidityMonthHigh(const utility::string_t& value)
{
    m_Relative_humidity_month_high = value;
    m_Relative_humidity_month_highIsSet = true;
}

bool Davis_current_observation::relativeHumidityMonthHighIsSet() const
{
    return m_Relative_humidity_month_highIsSet;
}

void Davis_current_observation::unsetRelative_humidity_month_high()
{
    m_Relative_humidity_month_highIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityIn() const
{
    return m_Relative_humidity_in;
}

void Davis_current_observation::setRelativeHumidityIn(const utility::string_t& value)
{
    m_Relative_humidity_in = value;
    m_Relative_humidity_inIsSet = true;
}

bool Davis_current_observation::relativeHumidityInIsSet() const
{
    return m_Relative_humidity_inIsSet;
}

void Davis_current_observation::unsetRelative_humidity_in()
{
    m_Relative_humidity_inIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityInDayHigh() const
{
    return m_Relative_humidity_in_day_high;
}

void Davis_current_observation::setRelativeHumidityInDayHigh(const utility::string_t& value)
{
    m_Relative_humidity_in_day_high = value;
    m_Relative_humidity_in_day_highIsSet = true;
}

bool Davis_current_observation::relativeHumidityInDayHighIsSet() const
{
    return m_Relative_humidity_in_day_highIsSet;
}

void Davis_current_observation::unsetRelative_humidity_in_day_high()
{
    m_Relative_humidity_in_day_highIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityInDayHighTime() const
{
    return m_Relative_humidity_in_day_high_time;
}

void Davis_current_observation::setRelativeHumidityInDayHighTime(const utility::string_t& value)
{
    m_Relative_humidity_in_day_high_time = value;
    m_Relative_humidity_in_day_high_timeIsSet = true;
}

bool Davis_current_observation::relativeHumidityInDayHighTimeIsSet() const
{
    return m_Relative_humidity_in_day_high_timeIsSet;
}

void Davis_current_observation::unsetRelative_humidity_in_day_high_time()
{
    m_Relative_humidity_in_day_high_timeIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityInDayLow() const
{
    return m_Relative_humidity_in_day_low;
}

void Davis_current_observation::setRelativeHumidityInDayLow(const utility::string_t& value)
{
    m_Relative_humidity_in_day_low = value;
    m_Relative_humidity_in_day_lowIsSet = true;
}

bool Davis_current_observation::relativeHumidityInDayLowIsSet() const
{
    return m_Relative_humidity_in_day_lowIsSet;
}

void Davis_current_observation::unsetRelative_humidity_in_day_low()
{
    m_Relative_humidity_in_day_lowIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityInDayLowTime() const
{
    return m_Relative_humidity_in_day_low_time;
}

void Davis_current_observation::setRelativeHumidityInDayLowTime(const utility::string_t& value)
{
    m_Relative_humidity_in_day_low_time = value;
    m_Relative_humidity_in_day_low_timeIsSet = true;
}

bool Davis_current_observation::relativeHumidityInDayLowTimeIsSet() const
{
    return m_Relative_humidity_in_day_low_timeIsSet;
}

void Davis_current_observation::unsetRelative_humidity_in_day_low_time()
{
    m_Relative_humidity_in_day_low_timeIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityInMonthHigh() const
{
    return m_Relative_humidity_in_month_high;
}

void Davis_current_observation::setRelativeHumidityInMonthHigh(const utility::string_t& value)
{
    m_Relative_humidity_in_month_high = value;
    m_Relative_humidity_in_month_highIsSet = true;
}

bool Davis_current_observation::relativeHumidityInMonthHighIsSet() const
{
    return m_Relative_humidity_in_month_highIsSet;
}

void Davis_current_observation::unsetRelative_humidity_in_month_high()
{
    m_Relative_humidity_in_month_highIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityInMonthLow() const
{
    return m_Relative_humidity_in_month_low;
}

void Davis_current_observation::setRelativeHumidityInMonthLow(const utility::string_t& value)
{
    m_Relative_humidity_in_month_low = value;
    m_Relative_humidity_in_month_lowIsSet = true;
}

bool Davis_current_observation::relativeHumidityInMonthLowIsSet() const
{
    return m_Relative_humidity_in_month_lowIsSet;
}

void Davis_current_observation::unsetRelative_humidity_in_month_low()
{
    m_Relative_humidity_in_month_lowIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityInYearHigh() const
{
    return m_Relative_humidity_in_year_high;
}

void Davis_current_observation::setRelativeHumidityInYearHigh(const utility::string_t& value)
{
    m_Relative_humidity_in_year_high = value;
    m_Relative_humidity_in_year_highIsSet = true;
}

bool Davis_current_observation::relativeHumidityInYearHighIsSet() const
{
    return m_Relative_humidity_in_year_highIsSet;
}

void Davis_current_observation::unsetRelative_humidity_in_year_high()
{
    m_Relative_humidity_in_year_highIsSet = false;
}
utility::string_t Davis_current_observation::getRelativeHumidityInYearLow() const
{
    return m_Relative_humidity_in_year_low;
}

void Davis_current_observation::setRelativeHumidityInYearLow(const utility::string_t& value)
{
    m_Relative_humidity_in_year_low = value;
    m_Relative_humidity_in_year_lowIsSet = true;
}

bool Davis_current_observation::relativeHumidityInYearLowIsSet() const
{
    return m_Relative_humidity_in_year_lowIsSet;
}

void Davis_current_observation::unsetRelative_humidity_in_year_low()
{
    m_Relative_humidity_in_year_lowIsSet = false;
}
utility::string_t Davis_current_observation::getSunrise() const
{
    return m_Sunrise;
}

void Davis_current_observation::setSunrise(const utility::string_t& value)
{
    m_Sunrise = value;
    m_SunriseIsSet = true;
}

bool Davis_current_observation::sunriseIsSet() const
{
    return m_SunriseIsSet;
}

void Davis_current_observation::unsetSunrise()
{
    m_SunriseIsSet = false;
}
utility::string_t Davis_current_observation::getSunset() const
{
    return m_Sunset;
}

void Davis_current_observation::setSunset(const utility::string_t& value)
{
    m_Sunset = value;
    m_SunsetIsSet = true;
}

bool Davis_current_observation::sunsetIsSet() const
{
    return m_SunsetIsSet;
}

void Davis_current_observation::unsetSunset()
{
    m_SunsetIsSet = false;
}
utility::string_t Davis_current_observation::getTempDayHighF() const
{
    return m_Temp_day_high_f;
}

void Davis_current_observation::setTempDayHighF(const utility::string_t& value)
{
    m_Temp_day_high_f = value;
    m_Temp_day_high_fIsSet = true;
}

bool Davis_current_observation::tempDayHighFIsSet() const
{
    return m_Temp_day_high_fIsSet;
}

void Davis_current_observation::unsetTemp_day_high_f()
{
    m_Temp_day_high_fIsSet = false;
}
utility::string_t Davis_current_observation::getTempDayHighTime() const
{
    return m_Temp_day_high_time;
}

void Davis_current_observation::setTempDayHighTime(const utility::string_t& value)
{
    m_Temp_day_high_time = value;
    m_Temp_day_high_timeIsSet = true;
}

bool Davis_current_observation::tempDayHighTimeIsSet() const
{
    return m_Temp_day_high_timeIsSet;
}

void Davis_current_observation::unsetTemp_day_high_time()
{
    m_Temp_day_high_timeIsSet = false;
}
utility::string_t Davis_current_observation::getTempDayLowF() const
{
    return m_Temp_day_low_f;
}

void Davis_current_observation::setTempDayLowF(const utility::string_t& value)
{
    m_Temp_day_low_f = value;
    m_Temp_day_low_fIsSet = true;
}

bool Davis_current_observation::tempDayLowFIsSet() const
{
    return m_Temp_day_low_fIsSet;
}

void Davis_current_observation::unsetTemp_day_low_f()
{
    m_Temp_day_low_fIsSet = false;
}
utility::string_t Davis_current_observation::getTempDayLowTime() const
{
    return m_Temp_day_low_time;
}

void Davis_current_observation::setTempDayLowTime(const utility::string_t& value)
{
    m_Temp_day_low_time = value;
    m_Temp_day_low_timeIsSet = true;
}

bool Davis_current_observation::tempDayLowTimeIsSet() const
{
    return m_Temp_day_low_timeIsSet;
}

void Davis_current_observation::unsetTemp_day_low_time()
{
    m_Temp_day_low_timeIsSet = false;
}
utility::string_t Davis_current_observation::getTempMonthHighF() const
{
    return m_Temp_month_high_f;
}

void Davis_current_observation::setTempMonthHighF(const utility::string_t& value)
{
    m_Temp_month_high_f = value;
    m_Temp_month_high_fIsSet = true;
}

bool Davis_current_observation::tempMonthHighFIsSet() const
{
    return m_Temp_month_high_fIsSet;
}

void Davis_current_observation::unsetTemp_month_high_f()
{
    m_Temp_month_high_fIsSet = false;
}
utility::string_t Davis_current_observation::getTempMonthLowF() const
{
    return m_Temp_month_low_f;
}

void Davis_current_observation::setTempMonthLowF(const utility::string_t& value)
{
    m_Temp_month_low_f = value;
    m_Temp_month_low_fIsSet = true;
}

bool Davis_current_observation::tempMonthLowFIsSet() const
{
    return m_Temp_month_low_fIsSet;
}

void Davis_current_observation::unsetTemp_month_low_f()
{
    m_Temp_month_low_fIsSet = false;
}
utility::string_t Davis_current_observation::getTempYearHighF() const
{
    return m_Temp_year_high_f;
}

void Davis_current_observation::setTempYearHighF(const utility::string_t& value)
{
    m_Temp_year_high_f = value;
    m_Temp_year_high_fIsSet = true;
}

bool Davis_current_observation::tempYearHighFIsSet() const
{
    return m_Temp_year_high_fIsSet;
}

void Davis_current_observation::unsetTemp_year_high_f()
{
    m_Temp_year_high_fIsSet = false;
}
utility::string_t Davis_current_observation::getTempYearLowF() const
{
    return m_Temp_year_low_f;
}

void Davis_current_observation::setTempYearLowF(const utility::string_t& value)
{
    m_Temp_year_low_f = value;
    m_Temp_year_low_fIsSet = true;
}

bool Davis_current_observation::tempYearLowFIsSet() const
{
    return m_Temp_year_low_fIsSet;
}

void Davis_current_observation::unsetTemp_year_low_f()
{
    m_Temp_year_low_fIsSet = false;
}
utility::string_t Davis_current_observation::getTempInDayHighF() const
{
    return m_Temp_in_day_high_f;
}

void Davis_current_observation::setTempInDayHighF(const utility::string_t& value)
{
    m_Temp_in_day_high_f = value;
    m_Temp_in_day_high_fIsSet = true;
}

bool Davis_current_observation::tempInDayHighFIsSet() const
{
    return m_Temp_in_day_high_fIsSet;
}

void Davis_current_observation::unsetTemp_in_day_high_f()
{
    m_Temp_in_day_high_fIsSet = false;
}
utility::string_t Davis_current_observation::getTempInDayHighTime() const
{
    return m_Temp_in_day_high_time;
}

void Davis_current_observation::setTempInDayHighTime(const utility::string_t& value)
{
    m_Temp_in_day_high_time = value;
    m_Temp_in_day_high_timeIsSet = true;
}

bool Davis_current_observation::tempInDayHighTimeIsSet() const
{
    return m_Temp_in_day_high_timeIsSet;
}

void Davis_current_observation::unsetTemp_in_day_high_time()
{
    m_Temp_in_day_high_timeIsSet = false;
}
utility::string_t Davis_current_observation::getTempInDayLowF() const
{
    return m_Temp_in_day_low_f;
}

void Davis_current_observation::setTempInDayLowF(const utility::string_t& value)
{
    m_Temp_in_day_low_f = value;
    m_Temp_in_day_low_fIsSet = true;
}

bool Davis_current_observation::tempInDayLowFIsSet() const
{
    return m_Temp_in_day_low_fIsSet;
}

void Davis_current_observation::unsetTemp_in_day_low_f()
{
    m_Temp_in_day_low_fIsSet = false;
}
utility::string_t Davis_current_observation::getTempInDayLowTime() const
{
    return m_Temp_in_day_low_time;
}

void Davis_current_observation::setTempInDayLowTime(const utility::string_t& value)
{
    m_Temp_in_day_low_time = value;
    m_Temp_in_day_low_timeIsSet = true;
}

bool Davis_current_observation::tempInDayLowTimeIsSet() const
{
    return m_Temp_in_day_low_timeIsSet;
}

void Davis_current_observation::unsetTemp_in_day_low_time()
{
    m_Temp_in_day_low_timeIsSet = false;
}
utility::string_t Davis_current_observation::getTempInF() const
{
    return m_Temp_in_f;
}

void Davis_current_observation::setTempInF(const utility::string_t& value)
{
    m_Temp_in_f = value;
    m_Temp_in_fIsSet = true;
}

bool Davis_current_observation::tempInFIsSet() const
{
    return m_Temp_in_fIsSet;
}

void Davis_current_observation::unsetTemp_in_f()
{
    m_Temp_in_fIsSet = false;
}
utility::string_t Davis_current_observation::getTempInMonthHighF() const
{
    return m_Temp_in_month_high_f;
}

void Davis_current_observation::setTempInMonthHighF(const utility::string_t& value)
{
    m_Temp_in_month_high_f = value;
    m_Temp_in_month_high_fIsSet = true;
}

bool Davis_current_observation::tempInMonthHighFIsSet() const
{
    return m_Temp_in_month_high_fIsSet;
}

void Davis_current_observation::unsetTemp_in_month_high_f()
{
    m_Temp_in_month_high_fIsSet = false;
}
utility::string_t Davis_current_observation::getTempInMonthLowF() const
{
    return m_Temp_in_month_low_f;
}

void Davis_current_observation::setTempInMonthLowF(const utility::string_t& value)
{
    m_Temp_in_month_low_f = value;
    m_Temp_in_month_low_fIsSet = true;
}

bool Davis_current_observation::tempInMonthLowFIsSet() const
{
    return m_Temp_in_month_low_fIsSet;
}

void Davis_current_observation::unsetTemp_in_month_low_f()
{
    m_Temp_in_month_low_fIsSet = false;
}
utility::string_t Davis_current_observation::getTempInYearHighF() const
{
    return m_Temp_in_year_high_f;
}

void Davis_current_observation::setTempInYearHighF(const utility::string_t& value)
{
    m_Temp_in_year_high_f = value;
    m_Temp_in_year_high_fIsSet = true;
}

bool Davis_current_observation::tempInYearHighFIsSet() const
{
    return m_Temp_in_year_high_fIsSet;
}

void Davis_current_observation::unsetTemp_in_year_high_f()
{
    m_Temp_in_year_high_fIsSet = false;
}
utility::string_t Davis_current_observation::getTempInYearLowF() const
{
    return m_Temp_in_year_low_f;
}

void Davis_current_observation::setTempInYearLowF(const utility::string_t& value)
{
    m_Temp_in_year_low_f = value;
    m_Temp_in_year_low_fIsSet = true;
}

bool Davis_current_observation::tempInYearLowFIsSet() const
{
    return m_Temp_in_year_low_fIsSet;
}

void Davis_current_observation::unsetTemp_in_year_low_f()
{
    m_Temp_in_year_low_fIsSet = false;
}
utility::string_t Davis_current_observation::getWindDayHighMph() const
{
    return m_Wind_day_high_mph;
}

void Davis_current_observation::setWindDayHighMph(const utility::string_t& value)
{
    m_Wind_day_high_mph = value;
    m_Wind_day_high_mphIsSet = true;
}

bool Davis_current_observation::windDayHighMphIsSet() const
{
    return m_Wind_day_high_mphIsSet;
}

void Davis_current_observation::unsetWind_day_high_mph()
{
    m_Wind_day_high_mphIsSet = false;
}
utility::string_t Davis_current_observation::getWindDayHighTime() const
{
    return m_Wind_day_high_time;
}

void Davis_current_observation::setWindDayHighTime(const utility::string_t& value)
{
    m_Wind_day_high_time = value;
    m_Wind_day_high_timeIsSet = true;
}

bool Davis_current_observation::windDayHighTimeIsSet() const
{
    return m_Wind_day_high_timeIsSet;
}

void Davis_current_observation::unsetWind_day_high_time()
{
    m_Wind_day_high_timeIsSet = false;
}
utility::string_t Davis_current_observation::getWindMonthHighMph() const
{
    return m_Wind_month_high_mph;
}

void Davis_current_observation::setWindMonthHighMph(const utility::string_t& value)
{
    m_Wind_month_high_mph = value;
    m_Wind_month_high_mphIsSet = true;
}

bool Davis_current_observation::windMonthHighMphIsSet() const
{
    return m_Wind_month_high_mphIsSet;
}

void Davis_current_observation::unsetWind_month_high_mph()
{
    m_Wind_month_high_mphIsSet = false;
}
utility::string_t Davis_current_observation::getWindTenMinAvgMph() const
{
    return m_Wind_ten_min_avg_mph;
}

void Davis_current_observation::setWindTenMinAvgMph(const utility::string_t& value)
{
    m_Wind_ten_min_avg_mph = value;
    m_Wind_ten_min_avg_mphIsSet = true;
}

bool Davis_current_observation::windTenMinAvgMphIsSet() const
{
    return m_Wind_ten_min_avg_mphIsSet;
}

void Davis_current_observation::unsetWind_ten_min_avg_mph()
{
    m_Wind_ten_min_avg_mphIsSet = false;
}
utility::string_t Davis_current_observation::getWindTenMinGustMph() const
{
    return m_Wind_ten_min_gust_mph;
}

void Davis_current_observation::setWindTenMinGustMph(const utility::string_t& value)
{
    m_Wind_ten_min_gust_mph = value;
    m_Wind_ten_min_gust_mphIsSet = true;
}

bool Davis_current_observation::windTenMinGustMphIsSet() const
{
    return m_Wind_ten_min_gust_mphIsSet;
}

void Davis_current_observation::unsetWind_ten_min_gust_mph()
{
    m_Wind_ten_min_gust_mphIsSet = false;
}
utility::string_t Davis_current_observation::getWindYearHighMph() const
{
    return m_Wind_year_high_mph;
}

void Davis_current_observation::setWindYearHighMph(const utility::string_t& value)
{
    m_Wind_year_high_mph = value;
    m_Wind_year_high_mphIsSet = true;
}

bool Davis_current_observation::windYearHighMphIsSet() const
{
    return m_Wind_year_high_mphIsSet;
}

void Davis_current_observation::unsetWind_year_high_mph()
{
    m_Wind_year_high_mphIsSet = false;
}
utility::string_t Davis_current_observation::getWindchillDayLowF() const
{
    return m_Windchill_day_low_f;
}

void Davis_current_observation::setWindchillDayLowF(const utility::string_t& value)
{
    m_Windchill_day_low_f = value;
    m_Windchill_day_low_fIsSet = true;
}

bool Davis_current_observation::windchillDayLowFIsSet() const
{
    return m_Windchill_day_low_fIsSet;
}

void Davis_current_observation::unsetWindchill_day_low_f()
{
    m_Windchill_day_low_fIsSet = false;
}
utility::string_t Davis_current_observation::getWindchillDayLowTime() const
{
    return m_Windchill_day_low_time;
}

void Davis_current_observation::setWindchillDayLowTime(const utility::string_t& value)
{
    m_Windchill_day_low_time = value;
    m_Windchill_day_low_timeIsSet = true;
}

bool Davis_current_observation::windchillDayLowTimeIsSet() const
{
    return m_Windchill_day_low_timeIsSet;
}

void Davis_current_observation::unsetWindchill_day_low_time()
{
    m_Windchill_day_low_timeIsSet = false;
}
utility::string_t Davis_current_observation::getWindchillMonthLowF() const
{
    return m_Windchill_month_low_f;
}

void Davis_current_observation::setWindchillMonthLowF(const utility::string_t& value)
{
    m_Windchill_month_low_f = value;
    m_Windchill_month_low_fIsSet = true;
}

bool Davis_current_observation::windchillMonthLowFIsSet() const
{
    return m_Windchill_month_low_fIsSet;
}

void Davis_current_observation::unsetWindchill_month_low_f()
{
    m_Windchill_month_low_fIsSet = false;
}
utility::string_t Davis_current_observation::getWindchillYearLowF() const
{
    return m_Windchill_year_low_f;
}

void Davis_current_observation::setWindchillYearLowF(const utility::string_t& value)
{
    m_Windchill_year_low_f = value;
    m_Windchill_year_low_fIsSet = true;
}

bool Davis_current_observation::windchillYearLowFIsSet() const
{
    return m_Windchill_year_low_fIsSet;
}

void Davis_current_observation::unsetWindchill_year_low_f()
{
    m_Windchill_year_low_fIsSet = false;
}
}
}
}
}


